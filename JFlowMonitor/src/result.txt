a3bd892a (Kuziki  2011-05-06 23:30:39 +0800   1) /*
a3bd892a (Kuziki  2011-05-06 23:30:39 +0800   2)  * To change this template, choose Tools | Templates
a3bd892a (Kuziki  2011-05-06 23:30:39 +0800   3)  * and open the template in the editor.
a3bd892a (Kuziki  2011-05-06 23:30:39 +0800   4)  */
a3bd892a (Kuziki  2011-05-06 23:30:39 +0800   5) 
a3bd892a (Kuziki  2011-05-06 23:30:39 +0800   6) package Database;
a3bd892a (Kuziki  2011-05-06 23:30:39 +0800   7) 
6d0441bc (Kuziki  2011-05-07 16:38:52 +0800   8) import Logic.Filters.CernetPacketFilter;
6d0441bc (Kuziki  2011-05-07 16:38:52 +0800   9) import Logic.Filters.IPacketFilter;
a3bd892a (Kuziki  2011-05-06 23:30:39 +0800  10) import Network.IPacket;
a3bd892a (Kuziki  2011-05-06 23:30:39 +0800  11) import Network.Packet;
9fbce297 (Kuziki  2011-05-07 17:14:16 +0800  12) import java.io.File;
a3bd892a (Kuziki  2011-05-06 23:30:39 +0800  13) import java.sql.Connection;
a3bd892a (Kuziki  2011-05-06 23:30:39 +0800  14) import java.sql.DriverManager;
a3bd892a (Kuziki  2011-05-06 23:30:39 +0800  15) import java.sql.ResultSet;
a3bd892a (Kuziki  2011-05-06 23:30:39 +0800  16) import java.sql.SQLException;
a3bd892a (Kuziki  2011-05-06 23:30:39 +0800  17) import java.sql.Statement;
f3570d73 (Kuziki  2011-05-07 15:55:36 +0800  18) import java.text.SimpleDateFormat;
a3bd892a (Kuziki  2011-05-06 23:30:39 +0800  19) import java.util.ArrayList;
a3bd892a (Kuziki  2011-05-06 23:30:39 +0800  20) import java.util.Date;
a3bd892a (Kuziki  2011-05-06 23:30:39 +0800  21) import java.util.List;
a3bd892a (Kuziki  2011-05-06 23:30:39 +0800  22) import java.util.logging.Level;
a3bd892a (Kuziki  2011-05-06 23:30:39 +0800  23) import java.util.logging.Logger;
743291fe (Kuziki  2011-05-25 23:01:03 +0800  24) import javax.swing.JDialog;
743291fe (Kuziki  2011-05-25 23:01:03 +0800  25) import javax.swing.JLabel;
a3bd892a (Kuziki  2011-05-06 23:30:39 +0800  26) import org.sqlite.JDBC;
a3bd892a (Kuziki  2011-05-06 23:30:39 +0800  27) /**
a3bd892a (Kuziki  2011-05-06 23:30:39 +0800  28)  *
a3bd892a (Kuziki  2011-05-06 23:30:39 +0800  29)  * @author Kuziki
a3bd892a (Kuziki  2011-05-06 23:30:39 +0800  30)  */
a3bd892a (Kuziki  2011-05-06 23:30:39 +0800  31) public class Database implements IDatabaseProxy{
1dc683d7 (Kuziki  2011-05-07 14:05:43 +0800  32)     private Database()
a3bd892a (Kuziki  2011-05-06 23:30:39 +0800  33)     {
a3bd892a (Kuziki  2011-05-06 23:30:39 +0800  34)         try {
a3bd892a (Kuziki  2011-05-06 23:30:39 +0800  35)             conn = getConn();
a3bd892a (Kuziki  2011-05-06 23:30:39 +0800  36)         } catch (Exception ex) {
a3bd892a (Kuziki  2011-05-06 23:30:39 +0800  37)             Logger.getLogger(Database.class.getName()).log(Level.SEVERE, null, ex);
a3bd892a (Kuziki  2011-05-06 23:30:39 +0800  38)         }
a3bd892a (Kuziki  2011-05-06 23:30:39 +0800  39)     }
db444553 (Kuziki  2011-05-22 14:39:58 +0800  40)     private static Database instance = null;
db444553 (Kuziki  2011-05-22 14:39:58 +0800  41)     public synchronized  static IDatabaseProxy instance()
1dc683d7 (Kuziki  2011-05-07 14:05:43 +0800  42)     {
1dc683d7 (Kuziki  2011-05-07 14:05:43 +0800  43)         if(instance==null){
1dc683d7 (Kuziki  2011-05-07 14:05:43 +0800  44)             instance = new Database();
1dc683d7 (Kuziki  2011-05-07 14:05:43 +0800  45)         }
1dc683d7 (Kuziki  2011-05-07 14:05:43 +0800  46)         return instance;
1dc683d7 (Kuziki  2011-05-07 14:05:43 +0800  47)     }
db444553 (Kuziki  2011-05-22 14:39:58 +0800  48)     synchronized  public void savePacket(List<IPacket> p)
a3bd892a (Kuziki  2011-05-06 23:30:39 +0800  49)     {
a3bd892a (Kuziki  2011-05-06 23:30:39 +0800  50)         try {
8d15d360 (Kuziki  2011-05-20 16:42:31 +0800  51)             conn.setAutoCommit(false);
a3bd892a (Kuziki  2011-05-06 23:30:39 +0800  52)             Statement stat = conn.createStatement();
67223ec1 (reyoung 2011-05-21 12:51:46 +0800  53)             for(int i=0 ; i<p.size() ; ++i) // Change to Foreach
67223ec1 (reyoung 2011-05-21 12:51:46 +0800  54) //            for(IPacket pack : p)
a3bd892a (Kuziki  2011-05-06 23:30:39 +0800  55)             {
67223ec1 (reyoung 2011-05-21 12:51:46 +0800  56)                 IPacket pack = p.get(i);
4a71e90b (reyoung 2011-05-20 22:51:52 +0800  57)                 Date rdate=pack.getPacketRecvTime();
4a71e90b (reyoung 2011-05-20 22:51:52 +0800  58)                 int sip  = pack.getSourceAddress();
4a71e90b (reyoung 2011-05-20 22:51:52 +0800  59)                 int dip  = pack.getDestAddress();
4a71e90b (reyoung 2011-05-20 22:51:52 +0800  60)                 int sport = pack.getSourcePort();
4a71e90b (reyoung 2011-05-20 22:51:52 +0800  61)                 int dport = pack.getDestPort();
4a71e90b (reyoung 2011-05-20 22:51:52 +0800  62)                 int size = pack.getPacketLength();
4a71e90b (reyoung 2011-05-20 22:51:52 +0800  63)                 int flag = pack.getPacketFlag();
4a71e90b (reyoung 2011-05-20 22:51:52 +0800  64)                 boolean  UpOrDown = pack.isUpload();
4a71e90b (reyoung 2011-05-20 22:51:52 +0800  65)                 String insertSql = String.format("insert into Detail(PRecvTime,PS_IP,PD_IP,PS_Port,PD_Port,PSize,PIsUpload,PFlag) values(%d,%d,%d,%d,%d,%d,%d,%d)"
4a71e90b (reyoung 2011-05-20 22:51:52 +0800  66)                         , rdate.getTime(),sip,dip,sport,dport,size,UpOrDown?1:0,flag);
5916d9b2 (Kuziki  2011-05-07 00:57:55 +0800  67)                 stat.addBatch(insertSql);
a3bd892a (Kuziki  2011-05-06 23:30:39 +0800  68)             }
a3bd892a (Kuziki  2011-05-06 23:30:39 +0800  69)             stat.executeBatch();
8d15d360 (Kuziki  2011-05-20 16:42:31 +0800  70)             conn.commit();
a3bd892a (Kuziki  2011-05-06 23:30:39 +0800  71)         } catch (SQLException ex) {
8d15d360 (Kuziki  2011-05-20 16:42:31 +0800  72)             try {
8d15d360 (Kuziki  2011-05-20 16:42:31 +0800  73)                 conn.rollback();
743291fe (Kuziki  2011-05-25 23:01:03 +0800  74)                 JDialog j = new JDialog();
743291fe (Kuziki  2011-05-25 23:01:03 +0800  75)                 j.setAlwaysOnTop(true);
743291fe (Kuziki  2011-05-25 23:01:03 +0800  76)                 j.setTitle("Database Error");
743291fe (Kuziki  2011-05-25 23:01:03 +0800  77)                 JLabel ver = new JLabel("Database has been destoryed,please delete it");
743291fe (Kuziki  2011-05-25 23:01:03 +0800  78)                 j.add(ver);
743291fe (Kuziki  2011-05-25 23:01:03 +0800  79)                 j.setSize(320, 240);
743291fe (Kuziki  2011-05-25 23:01:03 +0800  80)                 j.setVisible(true);
8d15d360 (Kuziki  2011-05-20 16:42:31 +0800  81)             } catch (SQLException ex1) {
8d15d360 (Kuziki  2011-05-20 16:42:31 +0800  82)             }
a3bd892a (Kuziki  2011-05-06 23:30:39 +0800  83)         }
a3bd892a (Kuziki  2011-05-06 23:30:39 +0800  84)     }
e94f5e9b (reyoung 2011-05-20 20:08:30 +0800  85)     public List<IPacket> getPacket(Date from,Date to) throws SQLException
a3bd892a (Kuziki  2011-05-06 23:30:39 +0800  86)     {
8d15d360 (Kuziki  2011-05-20 16:42:31 +0800  87)         conn.setAutoCommit(true);
a3bd892a (Kuziki  2011-05-06 23:30:39 +0800  88)         Statement stat = conn.createStatement();
a3bd892a (Kuziki  2011-05-06 23:30:39 +0800  89)         Long fd = from.getTime();
a3bd892a (Kuziki  2011-05-06 23:30:39 +0800  90)         Long td = to.getTime();
57da65a9 (Kuziki  2011-05-24 19:44:41 +0800  91)         String sqlQuery = "select * from detail where PRecvTime >= ";
a3bd892a (Kuziki  2011-05-06 23:30:39 +0800  92)         sqlQuery += Long.toString(fd);
57da65a9 (Kuziki  2011-05-24 19:44:41 +0800  93)         sqlQuery += " and PRecvTime <= ";
a3bd892a (Kuziki  2011-05-06 23:30:39 +0800  94)         sqlQuery += Long.toString(td);
a3bd892a (Kuziki  2011-05-06 23:30:39 +0800  95)         ResultSet rs = stat.executeQuery(sqlQuery);
e94f5e9b (reyoung 2011-05-20 20:08:30 +0800  96)         List< IPacket > p = new ArrayList< IPacket >();
a3bd892a (Kuziki  2011-05-06 23:30:39 +0800  97)         while(rs.next())
a3bd892a (Kuziki  2011-05-06 23:30:39 +0800  98)         {
a3bd892a (Kuziki  2011-05-06 23:30:39 +0800  99)             Packet pack = new Packet();
a3bd892a (Kuziki  2011-05-06 23:30:39 +0800 100)             Date d = new Date();
743291fe (Kuziki  2011-05-25 23:01:03 +0800 101)             d.setTime(rs.getLong(2));
a3bd892a (Kuziki  2011-05-06 23:30:39 +0800 102)             pack.RecvTime = d;
743291fe (Kuziki  2011-05-25 23:01:03 +0800 103)             pack.SIP = rs.getInt(3);
743291fe (Kuziki  2011-05-25 23:01:03 +0800 104)             pack.DIP = rs.getInt(4);
743291fe (Kuziki  2011-05-25 23:01:03 +0800 105)             pack.SPort = rs.getInt(5);
743291fe (Kuziki  2011-05-25 23:01:03 +0800 106)             pack.DPort = rs.getInt(6);
743291fe (Kuziki  2011-05-25 23:01:03 +0800 107)             pack.PackLen = rs.getInt(7);
743291fe (Kuziki  2011-05-25 23:01:03 +0800 108)             pack.IsUpdate = rs.getBoolean(8);
92dcc5d8 (reyoung 2011-05-21 17:39:59 +0800 109)             pack.PacketFlag = rs.getInt("PFlag");
a3bd892a (Kuziki  2011-05-06 23:30:39 +0800 110)             p.add(pack);
a3bd892a (Kuziki  2011-05-06 23:30:39 +0800 111)         }
a3bd892a (Kuziki  2011-05-06 23:30:39 +0800 112)         rs.close();
a3bd892a (Kuziki  2011-05-06 23:30:39 +0800 113)         return p;
a3bd892a (Kuziki  2011-05-06 23:30:39 +0800 114)     }
e94f5e9b (reyoung 2011-05-20 20:08:30 +0800 115)     public List<IPacket> getPacket(Date cdate) throws SQLException
a3bd892a (Kuziki  2011-05-06 23:30:39 +0800 116)     {
a3bd892a (Kuziki  2011-05-06 23:30:39 +0800 117)         int year = cdate.getYear();
a3bd892a (Kuziki  2011-05-06 23:30:39 +0800 118)         int month = cdate.getMonth();
a3bd892a (Kuziki  2011-05-06 23:30:39 +0800 119)         int day = cdate.getDate();
a3bd892a (Kuziki  2011-05-06 23:30:39 +0800 120)         int tday = day+1;
a3bd892a (Kuziki  2011-05-06 23:30:39 +0800 121)         Date from  = new Date(year,month,day);
a3bd892a (Kuziki  2011-05-06 23:30:39 +0800 122)         Date to = new Date(year,month,tday);
7de43980 (Kuziki  2011-05-07 13:46:24 +0800 123)         return getPacket(from, to);
a3bd892a (Kuziki  2011-05-06 23:30:39 +0800 124)     }
a3bd892a (Kuziki  2011-05-06 23:30:39 +0800 125)     private static String url="org.sqlite.JDBC";
a3bd892a (Kuziki  2011-05-06 23:30:39 +0800 126)     private static String dri="jdbc:sqlite:flow.sqlite";
9fbce297 (Kuziki  2011-05-07 17:14:16 +0800 127)     private static String table0 = "CREATE TABLE Detail ( PPacketID integer PRIMARY KEY AUTOINCREMENT,PRecvTime integer(8) NOT NULL,PS_IP integer NOT NULL,PD_IP integer NOT NULL,PS_Port integer NOT NULL,PD_Port integer NOT NULL,PSize integer NOT NULL,PIsUpload boolean NOT NULL,PFlag integer NOT NULL)";
9fbce297 (Kuziki  2011-05-07 17:14:16 +0800 128)     private static String table1 = "CREATE TABLE Simple (PDate date PRIMARY KEY,POuterLegnth integer NOT NULL,PInnerLength integer NOT NULL)";
a3bd892a (Kuziki  2011-05-06 23:30:39 +0800 129)     public static Connection getConn() throws Exception
a3bd892a (Kuziki  2011-05-06 23:30:39 +0800 130)     {
9fbce297 (Kuziki  2011-05-07 17:14:16 +0800 131)         File f = new File("flow.sqlite");
9fbce297 (Kuziki  2011-05-07 17:14:16 +0800 132)         boolean fexist = f.exists();
a3bd892a (Kuziki  2011-05-06 23:30:39 +0800 133)         Class.forName(url);
a3bd892a (Kuziki  2011-05-06 23:30:39 +0800 134)         Connection conn = DriverManager.getConnection(dri);
9fbce297 (Kuziki  2011-05-07 17:14:16 +0800 135)         if(!fexist)
9fbce297 (Kuziki  2011-05-07 17:14:16 +0800 136)         {
9fbce297 (Kuziki  2011-05-07 17:14:16 +0800 137)             Statement stat = conn.createStatement();
9fbce297 (Kuziki  2011-05-07 17:14:16 +0800 138)             stat.execute(table0);
9fbce297 (Kuziki  2011-05-07 17:14:16 +0800 139)             stat.execute(table1);
9fbce297 (Kuziki  2011-05-07 17:14:16 +0800 140)         }
a3bd892a (Kuziki  2011-05-06 23:30:39 +0800 141)         return conn;
a3bd892a (Kuziki  2011-05-06 23:30:39 +0800 142)     }
a3bd892a (Kuziki  2011-05-06 23:30:39 +0800 143)     public void Closedb() throws SQLException
a3bd892a (Kuziki  2011-05-06 23:30:39 +0800 144)     {
a3bd892a (Kuziki  2011-05-06 23:30:39 +0800 145)         conn.close();
a3bd892a (Kuziki  2011-05-06 23:30:39 +0800 146)     }
a3bd892a (Kuziki  2011-05-06 23:30:39 +0800 147)     private static Connection conn;
fb076440 (Kuziki  2011-05-07 00:18:53 +0800 148) 
7de43980 (Kuziki  2011-05-07 13:46:24 +0800 149)     public List<Flow> getFlow(Date from, Date to) throws SQLException
fb076440 (Kuziki  2011-05-07 00:18:53 +0800 150)     {
7de43980 (Kuziki  2011-05-07 13:46:24 +0800 151)         List<Flow> sDate = new ArrayList<Flow>();
8d15d360 (Kuziki  2011-05-20 16:42:31 +0800 152)         conn.setAutoCommit(true);
fb076440 (Kuziki  2011-05-07 00:18:53 +0800 153)         Statement stat = conn.createStatement();
fb076440 (Kuziki  2011-05-07 00:18:53 +0800 154)         int fromYear = from.getYear()+1900;
6d0441bc (Kuziki  2011-05-07 16:38:52 +0800 155)         int fromMonth = from.getMonth()+1;
fb076440 (Kuziki  2011-05-07 00:18:53 +0800 156)         int fromDay = from.getDate();
57da65a9 (Kuziki  2011-05-24 19:44:41 +0800 157)         String fyear,fmonth,fday;
57da65a9 (Kuziki  2011-05-24 19:44:41 +0800 158)         fyear = Integer.toString(fromYear);
57da65a9 (Kuziki  2011-05-24 19:44:41 +0800 159)         fmonth = Integer.toString(fromMonth);
57da65a9 (Kuziki  2011-05-24 19:44:41 +0800 160)         fday = Integer.toString(fromDay);
57da65a9 (Kuziki  2011-05-24 19:44:41 +0800 161)         if(fromMonth < 10) fmonth = "0" + fmonth;
57da65a9 (Kuziki  2011-05-24 19:44:41 +0800 162)         if(fromDay < 10)fday = "0" + fday;
57da65a9 (Kuziki  2011-05-24 19:44:41 +0800 163)         String fromD = "'"+fyear + "-"+fmonth +"-"+fday+"'";
fb076440 (Kuziki  2011-05-07 00:18:53 +0800 164)         int toYear = to.getYear()+1900;
6d0441bc (Kuziki  2011-05-07 16:38:52 +0800 165)         int toMonth = to.getMonth()+1;
fb076440 (Kuziki  2011-05-07 00:18:53 +0800 166)         int toDay = to.getDate();
57da65a9 (Kuziki  2011-05-24 19:44:41 +0800 167)         String tyear,tmonth,tday;
57da65a9 (Kuziki  2011-05-24 19:44:41 +0800 168)         tyear = Integer.toString(toYear);
57da65a9 (Kuziki  2011-05-24 19:44:41 +0800 169)         tmonth = Integer.toString(toMonth);
57da65a9 (Kuziki  2011-05-24 19:44:41 +0800 170)         tday = Integer.toString(toDay);
57da65a9 (Kuziki  2011-05-24 19:44:41 +0800 171)         if(toMonth < 10) tmonth = "0" + tmonth;
57da65a9 (Kuziki  2011-05-24 19:44:41 +0800 172)         if(toDay < 10)tday = "0" + tday;
57da65a9 (Kuziki  2011-05-24 19:44:41 +0800 173)         String toD = "'"+tyear + "-"+tmonth +"-"+tday+"'";
fb076440 (Kuziki  2011-05-07 00:18:53 +0800 174)         String sqlQuery = "select * from Simple where PDate >= " +fromD + " and PDate <= " + toD;
fb076440 (Kuziki  2011-05-07 00:18:53 +0800 175)         ResultSet rs = stat.executeQuery(sqlQuery);
fb076440 (Kuziki  2011-05-07 00:18:53 +0800 176)         while(rs.next())
fb076440 (Kuziki  2011-05-07 00:18:53 +0800 177)         {
7de43980 (Kuziki  2011-05-07 13:46:24 +0800 178)             Flow sp = new Flow();
5916d9b2 (Kuziki  2011-05-07 00:57:55 +0800 179)             String ts = rs.getString(1);
5916d9b2 (Kuziki  2011-05-07 00:57:55 +0800 180)             String[] ymd = ts.split("-");
5916d9b2 (Kuziki  2011-05-07 00:57:55 +0800 181)             int yy = Integer.parseInt(ymd[0])-1900;
4c94ad9b (Kuziki  2011-05-07 16:42:18 +0800 182)             int mm = Integer.parseInt(ymd[1])-1;
5916d9b2 (Kuziki  2011-05-07 00:57:55 +0800 183)             int dd = Integer.parseInt(ymd[2]);
5916d9b2 (Kuziki  2011-05-07 00:57:55 +0800 184)             sp.sDate = new Date(yy,mm,dd);
01d3cce0 (Kuziki  2011-05-24 20:43:36 +0800 185)             sp.outerSize = rs.getLong(2) / 1024;
01d3cce0 (Kuziki  2011-05-24 20:43:36 +0800 186)             sp.innerSize = rs.getLong(3) / 1024;
fb076440 (Kuziki  2011-05-07 00:18:53 +0800 187)             sDate.add(sp);
fb076440 (Kuziki  2011-05-07 00:18:53 +0800 188)         }
fb076440 (Kuziki  2011-05-07 00:18:53 +0800 189)         return sDate;
fb076440 (Kuziki  2011-05-07 00:18:53 +0800 190)     }
fb076440 (Kuziki  2011-05-07 00:18:53 +0800 191) 
7de43980 (Kuziki  2011-05-07 13:46:24 +0800 192)     public Flow getFlow(Date cdate) throws SQLException {
9fbce297 (Kuziki  2011-05-07 17:14:16 +0800 193)         List<Flow> gf = getFlow(cdate, cdate);
9fbce297 (Kuziki  2011-05-07 17:14:16 +0800 194)         if(gf.isEmpty())
9fbce297 (Kuziki  2011-05-07 17:14:16 +0800 195)         {
9fbce297 (Kuziki  2011-05-07 17:14:16 +0800 196)             Flow ans = new Flow();
9fbce297 (Kuziki  2011-05-07 17:14:16 +0800 197)             return ans;
9fbce297 (Kuziki  2011-05-07 17:14:16 +0800 198)         }
9fbce297 (Kuziki  2011-05-07 17:14:16 +0800 199)         else return gf.get(0);
fb076440 (Kuziki  2011-05-07 00:18:53 +0800 200)     }
f3570d73 (Kuziki  2011-05-07 15:55:36 +0800 201)     public void compress(Date cdate)throws SQLException
f3570d73 (Kuziki  2011-05-07 15:55:36 +0800 202)     {
8d15d360 (Kuziki  2011-05-20 16:42:31 +0800 203)         conn.setAutoCommit(true);
f3570d73 (Kuziki  2011-05-07 15:55:36 +0800 204)         Statement stat = conn.createStatement();
f3570d73 (Kuziki  2011-05-07 15:55:36 +0800 205)         Long deadtime = cdate.getTime();
f3570d73 (Kuziki  2011-05-07 15:55:36 +0800 206)         String sqlQuery = "select * from Detail where PRecvTime < ";
f3570d73 (Kuziki  2011-05-07 15:55:36 +0800 207)         sqlQuery += Long.toString(deadtime);
f3570d73 (Kuziki  2011-05-07 15:55:36 +0800 208)         ResultSet rs = stat.executeQuery(sqlQuery);
f3570d73 (Kuziki  2011-05-07 15:55:36 +0800 209)         List< Packet > p = new ArrayList< Packet >();
f3570d73 (Kuziki  2011-05-07 15:55:36 +0800 210)         String sqlDel = "delete from Detail where PRecvTime < ";
f3570d73 (Kuziki  2011-05-07 15:55:36 +0800 211)         sqlDel += Long.toString(deadtime);
f3570d73 (Kuziki  2011-05-07 15:55:36 +0800 212)         while(rs.next())
f3570d73 (Kuziki  2011-05-07 15:55:36 +0800 213)         {
f3570d73 (Kuziki  2011-05-07 15:55:36 +0800 214)             Packet pack = new Packet();
f3570d73 (Kuziki  2011-05-07 15:55:36 +0800 215)             Date d = new Date();
743291fe (Kuziki  2011-05-25 23:01:03 +0800 216)             d.setTime(rs.getLong(2));
f3570d73 (Kuziki  2011-05-07 15:55:36 +0800 217)             pack.RecvTime = d;
743291fe (Kuziki  2011-05-25 23:01:03 +0800 218)             pack.SIP = rs.getInt(3);
743291fe (Kuziki  2011-05-25 23:01:03 +0800 219)             pack.DIP = rs.getInt(4);
743291fe (Kuziki  2011-05-25 23:01:03 +0800 220)             pack.SPort = rs.getInt(5);
743291fe (Kuziki  2011-05-25 23:01:03 +0800 221)             pack.DPort = rs.getInt(6);
743291fe (Kuziki  2011-05-25 23:01:03 +0800 222)             pack.PackLen = rs.getInt(7);
743291fe (Kuziki  2011-05-25 23:01:03 +0800 223)             pack.IsUpdate = rs.getBoolean(8);
743291fe (Kuziki  2011-05-25 23:01:03 +0800 224)             pack.PacketFlag = rs.getInt(9);
f3570d73 (Kuziki  2011-05-07 15:55:36 +0800 225)             p.add(pack);
f3570d73 (Kuziki  2011-05-07 15:55:36 +0800 226)         }
f3570d73 (Kuziki  2011-05-07 15:55:36 +0800 227)         rs.close();
879ed4f3 (Kuziki  2011-05-07 16:43:22 +0800 228)         stat.execute(sqlDel);
f3570d73 (Kuziki  2011-05-07 15:55:36 +0800 229)         SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd");
f3570d73 (Kuziki  2011-05-07 15:55:36 +0800 230)         String temp = "";
f3570d73 (Kuziki  2011-05-07 15:55:36 +0800 231)         String sqlInsert = "";
f3570d73 (Kuziki  2011-05-07 15:55:36 +0800 232)         String sqlUpdate = "";
743291fe (Kuziki  2011-05-25 23:01:03 +0800 233)         int total_in = 0;
743291fe (Kuziki  2011-05-25 23:01:03 +0800 234)         int total_out = 0;
743291fe (Kuziki  2011-05-25 23:01:03 +0800 235)         for(Packet ip : p)
f3570d73 (Kuziki  2011-05-07 15:55:36 +0800 236)         {
743291fe (Kuziki  2011-05-25 23:01:03 +0800 237)             temp = sdf.format(ip.RecvTime);
743291fe (Kuziki  2011-05-25 23:01:03 +0800 238)             if(inStub(ip))
f3570d73 (Kuziki  2011-05-07 15:55:36 +0800 239)             {
f3570d73 (Kuziki  2011-05-07 15:55:36 +0800 240)                 sqlQuery = "select * from Simple where PDate = '";
f3570d73 (Kuziki  2011-05-07 15:55:36 +0800 241)                 sqlQuery =  sqlQuery + temp + "'";
f3570d73 (Kuziki  2011-05-07 15:55:36 +0800 242)                 ResultSet rtemp = stat.executeQuery(sqlQuery);
f3570d73 (Kuziki  2011-05-07 15:55:36 +0800 243)                 if(rtemp.next())
f3570d73 (Kuziki  2011-05-07 15:55:36 +0800 244)                 {
f3570d73 (Kuziki  2011-05-07 15:55:36 +0800 245)                     int origin = rtemp.getInt(3);
743291fe (Kuziki  2011-05-25 23:01:03 +0800 246)                     origin += ip.PackLen;
6d0441bc (Kuziki  2011-05-07 16:38:52 +0800 247)                     sqlUpdate = "update Simple set PInnerLength = ";
6d0441bc (Kuziki  2011-05-07 16:38:52 +0800 248)                     sqlUpdate  = sqlUpdate + Integer.toString(origin) + " where PDate = '";
6d0441bc (Kuziki  2011-05-07 16:38:52 +0800 249)                     sqlUpdate = sqlUpdate + temp + "'";
f3570d73 (Kuziki  2011-05-07 15:55:36 +0800 250)                     stat.execute(sqlUpdate);
f3570d73 (Kuziki  2011-05-07 15:55:36 +0800 251)                 }
f3570d73 (Kuziki  2011-05-07 15:55:36 +0800 252)                 else
f3570d73 (Kuziki  2011-05-07 15:55:36 +0800 253)                 {
f3570d73 (Kuziki  2011-05-07 15:55:36 +0800 254)                     sqlInsert = "insert into Simple values('";
743291fe (Kuziki  2011-05-25 23:01:03 +0800 255)                     sqlInsert = sqlInsert + temp +"'," + Integer.toString(ip.PackLen) + ",0)";
f3570d73 (Kuziki  2011-05-07 15:55:36 +0800 256)                     stat.execute(sqlInsert);
f3570d73 (Kuziki  2011-05-07 15:55:36 +0800 257)                 }
f3570d73 (Kuziki  2011-05-07 15:55:36 +0800 258)             }
f3570d73 (Kuziki  2011-05-07 15:55:36 +0800 259)             else
f3570d73 (Kuziki  2011-05-07 15:55:36 +0800 260)             {
f3570d73 (Kuziki  2011-05-07 15:55:36 +0800 261)                 sqlQuery = "select * from Simple where PDate = '";
f3570d73 (Kuziki  2011-05-07 15:55:36 +0800 262)                 sqlQuery =  sqlQuery + temp + "'";
f3570d73 (Kuziki  2011-05-07 15:55:36 +0800 263)                 ResultSet rtemp = stat.executeQuery(sqlQuery);
f3570d73 (Kuziki  2011-05-07 15:55:36 +0800 264)                 if(rtemp.next())
f3570d73 (Kuziki  2011-05-07 15:55:36 +0800 265)                 {
f3570d73 (Kuziki  2011-05-07 15:55:36 +0800 266)                     int origin = rtemp.getInt(2);
743291fe (Kuziki  2011-05-25 23:01:03 +0800 267)                     origin += ip.PackLen;
57da65a9 (Kuziki  2011-05-24 19:44:41 +0800 268)                     sqlUpdate = "update Simple set POuterLegnth = ";
6d0441bc (Kuziki  2011-05-07 16:38:52 +0800 269)                     sqlUpdate  = sqlUpdate + Integer.toString(origin) + " where PDate = '";
6d0441bc (Kuziki  2011-05-07 16:38:52 +0800 270)                     sqlUpdate = sqlUpdate + temp + "'";
f3570d73 (Kuziki  2011-05-07 15:55:36 +0800 271)                     stat.execute(sqlUpdate);
f3570d73 (Kuziki  2011-05-07 15:55:36 +0800 272)                 }
f3570d73 (Kuziki  2011-05-07 15:55:36 +0800 273)                 else
f3570d73 (Kuziki  2011-05-07 15:55:36 +0800 274)                 {
f3570d73 (Kuziki  2011-05-07 15:55:36 +0800 275)                     sqlInsert = "insert into Simple values('";
743291fe (Kuziki  2011-05-25 23:01:03 +0800 276)                     sqlInsert = sqlInsert + temp +"',0," + Integer.toString(ip.PackLen) + ")";
f3570d73 (Kuziki  2011-05-07 15:55:36 +0800 277)                     stat.execute(sqlInsert);
f3570d73 (Kuziki  2011-05-07 15:55:36 +0800 278)                 }
f3570d73 (Kuziki  2011-05-07 15:55:36 +0800 279)             }
f3570d73 (Kuziki  2011-05-07 15:55:36 +0800 280)         }
f3570d73 (Kuziki  2011-05-07 15:55:36 +0800 281)     }
f3570d73 (Kuziki  2011-05-07 15:55:36 +0800 282)     private boolean inStub(Packet p)
f3570d73 (Kuziki  2011-05-07 15:55:36 +0800 283)     {
6d0441bc (Kuziki  2011-05-07 16:38:52 +0800 284)         IPacketFilter pf = CernetPacketFilter.Instance();
6d0441bc (Kuziki  2011-05-07 16:38:52 +0800 285)         return pf.check(p);
f3570d73 (Kuziki  2011-05-07 15:55:36 +0800 286)     }
a3bd892a (Kuziki  2011-05-06 23:30:39 +0800 287) }
24f49139 (reyoung 2011-05-07 11:47:02 +0800  1) /*
24f49139 (reyoung 2011-05-07 11:47:02 +0800  2)  * This file is written by reyoung, reyoung@126.com.
24f49139 (reyoung 2011-05-07 11:47:02 +0800  3)  */
24f49139 (reyoung 2011-05-07 11:47:02 +0800  4) 
24f49139 (reyoung 2011-05-07 11:47:02 +0800  5) package Database;
24f49139 (reyoung 2011-05-07 11:47:02 +0800  6) 
24f49139 (reyoung 2011-05-07 11:47:02 +0800  7) import Logic.PacketPool.IPacketPool;
24f49139 (reyoung 2011-05-07 11:47:02 +0800  8) import Logic.PacketPool.IPacketPoolEvent;
24f49139 (reyoung 2011-05-07 11:47:02 +0800  9) import Logic.PacketPool.IPacketPoolEventListener;
24f49139 (reyoung 2011-05-07 11:47:02 +0800 10) import Logic.PacketPool.PacketPool;
24f49139 (reyoung 2011-05-07 11:47:02 +0800 11) import Network.IPacket;
57da65a9 (Kuziki  2011-05-24 19:44:41 +0800 12) import java.sql.SQLException;
24f49139 (reyoung 2011-05-07 11:47:02 +0800 13) import java.util.List;
57da65a9 (Kuziki  2011-05-24 19:44:41 +0800 14) import java.util.logging.Level;
57da65a9 (Kuziki  2011-05-24 19:44:41 +0800 15) import java.util.logging.Logger;
24f49139 (reyoung 2011-05-07 11:47:02 +0800 16) 
24f49139 (reyoung 2011-05-07 11:47:02 +0800 17) /**
24f49139 (reyoung 2011-05-07 11:47:02 +0800 18)  *
24f49139 (reyoung 2011-05-07 11:47:02 +0800 19)  * @author Reyoung
24f49139 (reyoung 2011-05-07 11:47:02 +0800 20)  */
24f49139 (reyoung 2011-05-07 11:47:02 +0800 21) public class DatabaseAppender implements IPacketPoolEventListener{
24f49139 (reyoung 2011-05-07 11:47:02 +0800 22)     private DatabaseAppender(){
24f49139 (reyoung 2011-05-07 11:47:02 +0800 23)     }
4503740c (Kuziki  2011-05-20 21:32:46 +0800 24)     static private DatabaseThread dt;
24f49139 (reyoung 2011-05-07 11:47:02 +0800 25)     static private DatabaseAppender instance = null;
24f49139 (reyoung 2011-05-07 11:47:02 +0800 26)     public static IPacketPoolEventListener Instance(){
24f49139 (reyoung 2011-05-07 11:47:02 +0800 27)         if(instance == null){
24f49139 (reyoung 2011-05-07 11:47:02 +0800 28)             instance = new DatabaseAppender();
4503740c (Kuziki  2011-05-20 21:32:46 +0800 29)             dt = new DatabaseThread();
24f49139 (reyoung 2011-05-07 11:47:02 +0800 30)         }
24f49139 (reyoung 2011-05-07 11:47:02 +0800 31)         return instance;
24f49139 (reyoung 2011-05-07 11:47:02 +0800 32)     }
24f49139 (reyoung 2011-05-07 11:47:02 +0800 33)     public void onPoolRefresh(IPacketPoolEvent e) {
24f49139 (reyoung 2011-05-07 11:47:02 +0800 34)         List<IPacket> packets = e.getRawPackets();
4503740c (Kuziki  2011-05-20 21:32:46 +0800 35)         dt.addPackets(packets);
24f49139 (reyoung 2011-05-07 11:47:02 +0800 36)     }
24f49139 (reyoung 2011-05-07 11:47:02 +0800 37) 
24f49139 (reyoung 2011-05-07 11:47:02 +0800 38)     /**
24f49139 (reyoung 2011-05-07 11:47:02 +0800 39)      * 永远相应Packet Pool的更新Event
24f49139 (reyoung 2011-05-07 11:47:02 +0800 40)      * @return
24f49139 (reyoung 2011-05-07 11:47:02 +0800 41)      */
24f49139 (reyoung 2011-05-07 11:47:02 +0800 42)     final public boolean isEnable() {
24f49139 (reyoung 2011-05-07 11:47:02 +0800 43)         return true;
24f49139 (reyoung 2011-05-07 11:47:02 +0800 44)     }
24f49139 (reyoung 2011-05-07 11:47:02 +0800 45)     /**
24f49139 (reyoung 2011-05-07 11:47:02 +0800 46)      * 永远有效
24f49139 (reyoung 2011-05-07 11:47:02 +0800 47)      * @return
24f49139 (reyoung 2011-05-07 11:47:02 +0800 48)      */
05ab98ed (reyoung 2011-05-07 16:31:23 +0800 49)     final public boolean isConcern() {
24f49139 (reyoung 2011-05-07 11:47:02 +0800 50)         return true;
24f49139 (reyoung 2011-05-07 11:47:02 +0800 51)     }
24f49139 (reyoung 2011-05-07 11:47:02 +0800 52) }
8d15d360 (Kuziki  2011-05-20 16:42:31 +0800  1) /*
8d15d360 (Kuziki  2011-05-20 16:42:31 +0800  2)  * To change this template, choose Tools | Templates
8d15d360 (Kuziki  2011-05-20 16:42:31 +0800  3)  * and open the template in the editor.
8d15d360 (Kuziki  2011-05-20 16:42:31 +0800  4)  */
8d15d360 (Kuziki  2011-05-20 16:42:31 +0800  5) package Database;
8d15d360 (Kuziki  2011-05-20 16:42:31 +0800  6) 
8d15d360 (Kuziki  2011-05-20 16:42:31 +0800  7) import Network.IPacket;
4503740c (Kuziki  2011-05-20 21:32:46 +0800  8) import Network.Packet;
4503740c (Kuziki  2011-05-20 21:32:46 +0800  9) import java.util.ArrayList;
8d15d360 (Kuziki  2011-05-20 16:42:31 +0800 10) import java.util.List;
4503740c (Kuziki  2011-05-20 21:32:46 +0800 11) import java.util.Timer;
8d15d360 (Kuziki  2011-05-20 16:42:31 +0800 12) 
8d15d360 (Kuziki  2011-05-20 16:42:31 +0800 13) /**
8d15d360 (Kuziki  2011-05-20 16:42:31 +0800 14)  *
8d15d360 (Kuziki  2011-05-20 16:42:31 +0800 15)  * @author Kuziki
8d15d360 (Kuziki  2011-05-20 16:42:31 +0800 16)  */
4a71e90b (reyoung 2011-05-20 22:51:52 +0800 17) public class DatabaseThread {
4a71e90b (reyoung 2011-05-20 22:51:52 +0800 18) 
8d15d360 (Kuziki  2011-05-20 16:42:31 +0800 19)     private List<IPacket> p = null;
4503740c (Kuziki  2011-05-20 21:32:46 +0800 20)     private Timer timer;
4a71e90b (reyoung 2011-05-20 22:51:52 +0800 21) 
4a71e90b (reyoung 2011-05-20 22:51:52 +0800 22)     public DatabaseThread() {
4503740c (Kuziki  2011-05-20 21:32:46 +0800 23)         p = new ArrayList<IPacket>();
4503740c (Kuziki  2011-05-20 21:32:46 +0800 24)         timer = new Timer();
4503740c (Kuziki  2011-05-20 21:32:46 +0800 25) //        timer.schedule(new MyTask(), 0, 10000);
4a71e90b (reyoung 2011-05-20 22:51:52 +0800 26)         timer.schedule(new MyTask(), 0, 10000);
8d15d360 (Kuziki  2011-05-20 16:42:31 +0800 27)     }
4a71e90b (reyoung 2011-05-20 22:51:52 +0800 28) 
4a71e90b (reyoung 2011-05-20 22:51:52 +0800 29)     public void addPackets(List<IPacket> packet) {
4503740c (Kuziki  2011-05-20 21:32:46 +0800 30)         p.addAll(packet);
4503740c (Kuziki  2011-05-20 21:32:46 +0800 31)     }
4a71e90b (reyoung 2011-05-20 22:51:52 +0800 32) 
4a71e90b (reyoung 2011-05-20 22:51:52 +0800 33)     class MyTask extends java.util.TimerTask {
4a71e90b (reyoung 2011-05-20 22:51:52 +0800 34) 
4503740c (Kuziki  2011-05-20 21:32:46 +0800 35)         @Override
4a71e90b (reyoung 2011-05-20 22:51:52 +0800 36)         public void run() {
67223ec1 (reyoung 2011-05-21 12:51:46 +0800 37) //            synchronized (p) {
67223ec1 (reyoung 2011-05-21 12:51:46 +0800 38)             if (p != null && p.size() > 0) {
67223ec1 (reyoung 2011-05-21 12:51:46 +0800 39)                 Database.instance().savePacket(p);
67223ec1 (reyoung 2011-05-21 12:51:46 +0800 40)                 p.clear();
4503740c (Kuziki  2011-05-20 21:32:46 +0800 41)             }
67223ec1 (reyoung 2011-05-21 12:51:46 +0800 42) //            }
5e2ce63e (Kuziki  2011-05-20 17:23:47 +0800 43)         }
8d15d360 (Kuziki  2011-05-20 16:42:31 +0800 44)     }
8d15d360 (Kuziki  2011-05-20 16:42:31 +0800 45) }
1dc683d7 (Kuziki  2011-05-07 14:05:43 +0800  1) /*
1dc683d7 (Kuziki  2011-05-07 14:05:43 +0800  2)  * To change this template, choose Tools | Templates
1dc683d7 (Kuziki  2011-05-07 14:05:43 +0800  3)  * and open the template in the editor.
1dc683d7 (Kuziki  2011-05-07 14:05:43 +0800  4)  */
1dc683d7 (Kuziki  2011-05-07 14:05:43 +0800  5) 
1dc683d7 (Kuziki  2011-05-07 14:05:43 +0800  6) package Database;
1dc683d7 (Kuziki  2011-05-07 14:05:43 +0800  7) 
1dc683d7 (Kuziki  2011-05-07 14:05:43 +0800  8) import java.util.Date;
1dc683d7 (Kuziki  2011-05-07 14:05:43 +0800  9) 
1dc683d7 (Kuziki  2011-05-07 14:05:43 +0800 10) 
1dc683d7 (Kuziki  2011-05-07 14:05:43 +0800 11) /**
1dc683d7 (Kuziki  2011-05-07 14:05:43 +0800 12)  *
1dc683d7 (Kuziki  2011-05-07 14:05:43 +0800 13)  * @author Kuziki
1dc683d7 (Kuziki  2011-05-07 14:05:43 +0800 14)  */
1dc683d7 (Kuziki  2011-05-07 14:05:43 +0800 15) public class Flow {
1dc683d7 (Kuziki  2011-05-07 14:05:43 +0800 16)     public Date sDate;
01d3cce0 (Kuziki  2011-05-24 20:43:36 +0800 17)     public long innerSize;
01d3cce0 (Kuziki  2011-05-24 20:43:36 +0800 18)     public long outerSize;
f108e175 (reyoung 2011-05-20 20:40:55 +0800 19)     public Flow(){
f108e175 (reyoung 2011-05-20 20:40:55 +0800 20)         innerSize = 0;
f108e175 (reyoung 2011-05-20 20:40:55 +0800 21)         outerSize = 0;
f108e175 (reyoung 2011-05-20 20:40:55 +0800 22)         sDate = new Date();
f108e175 (reyoung 2011-05-20 20:40:55 +0800 23)     }
1dc683d7 (Kuziki  2011-05-07 14:05:43 +0800 24) }
0edcd5a1 (reyoung 2011-05-05 14:27:12 +0800  1) /*
0edcd5a1 (reyoung 2011-05-05 14:27:12 +0800  2)  * This file is written by reyoung, reyoung@126.com.
0edcd5a1 (reyoung 2011-05-05 14:27:12 +0800  3)  */
0edcd5a1 (reyoung 2011-05-05 14:27:12 +0800  4) 
0edcd5a1 (reyoung 2011-05-05 14:27:12 +0800  5) package Database;
0edcd5a1 (reyoung 2011-05-05 14:27:12 +0800  6) 
545cf70e (reyoung 2011-05-05 18:41:35 +0800  7) import Network.IPacket;
245b7d02 (Kuziki  2011-05-06 23:15:29 +0800  8) import Network.Packet;
245b7d02 (Kuziki  2011-05-06 23:15:29 +0800  9) import java.sql.SQLException;
245b7d02 (Kuziki  2011-05-06 23:15:29 +0800 10) import java.util.Date;
245b7d02 (Kuziki  2011-05-06 23:15:29 +0800 11) import java.util.List;
545cf70e (reyoung 2011-05-05 18:41:35 +0800 12) 
0edcd5a1 (reyoung 2011-05-05 14:27:12 +0800 13) /**
0edcd5a1 (reyoung 2011-05-05 14:27:12 +0800 14)  *
0edcd5a1 (reyoung 2011-05-05 14:27:12 +0800 15)  * @author Reyoung
0edcd5a1 (reyoung 2011-05-05 14:27:12 +0800 16)  */
0edcd5a1 (reyoung 2011-05-05 14:27:12 +0800 17) public interface IDatabaseProxy {
7de43980 (Kuziki  2011-05-07 13:46:24 +0800 18)     public void savePacket(List<IPacket> p);//N个包插一次
e94f5e9b (reyoung 2011-05-20 20:08:30 +0800 19)     public List<IPacket> getPacket(Date cdate)throws SQLException;//查询某一天的包
e94f5e9b (reyoung 2011-05-20 20:08:30 +0800 20)     public List<IPacket> getPacket(Date from,Date to) throws SQLException;//查询几天之间的包
7de43980 (Kuziki  2011-05-07 13:46:24 +0800 21)     public List<Flow> getFlow(Date from,Date to)throws SQLException;//查询几天之间的流量
7de43980 (Kuziki  2011-05-07 13:46:24 +0800 22)     public Flow getFlow(Date cdate)throws SQLException;//查询某天的流量
f3570d73 (Kuziki  2011-05-07 15:55:36 +0800 23)     public void compress(Date cDate)throws SQLException;//将指定时间范围内的详细信息压缩成简表条目
1dc683d7 (Kuziki  2011-05-07 14:05:43 +0800 24)     public void Closedb()throws SQLException; // 关闭连接
0edcd5a1 (reyoung 2011-05-05 14:27:12 +0800 25) }
a1a5301e JFlowMonitor/src/Logic/AbstractPacketFilter.java         (aHa     2011-05-06 18:52:07 +0800  1) /*
a1a5301e JFlowMonitor/src/Logic/AbstractPacketFilter.java         (aHa     2011-05-06 18:52:07 +0800  2)  * To change this template, choose Tools | Templates
a1a5301e JFlowMonitor/src/Logic/AbstractPacketFilter.java         (aHa     2011-05-06 18:52:07 +0800  3)  * and open the template in the editor.
a1a5301e JFlowMonitor/src/Logic/AbstractPacketFilter.java         (aHa     2011-05-06 18:52:07 +0800  4)  */
a1a5301e JFlowMonitor/src/Logic/AbstractPacketFilter.java         (aHa     2011-05-06 18:52:07 +0800  5) 
65b592be JFlowMonitor/src/Logic/Filters/AbstractPacketFilter.java (reyoung 2011-05-06 20:23:47 +0800  6) package Logic.Filters;
a1a5301e JFlowMonitor/src/Logic/AbstractPacketFilter.java         (aHa     2011-05-06 18:52:07 +0800  7) 
a1a5301e JFlowMonitor/src/Logic/AbstractPacketFilter.java         (aHa     2011-05-06 18:52:07 +0800  8) /**
a1a5301e JFlowMonitor/src/Logic/AbstractPacketFilter.java         (aHa     2011-05-06 18:52:07 +0800  9)  *
a1a5301e JFlowMonitor/src/Logic/AbstractPacketFilter.java         (aHa     2011-05-06 18:52:07 +0800 10)  * @author YQ
a1a5301e JFlowMonitor/src/Logic/AbstractPacketFilter.java         (aHa     2011-05-06 18:52:07 +0800 11)  */
a1a5301e JFlowMonitor/src/Logic/AbstractPacketFilter.java         (aHa     2011-05-06 18:52:07 +0800 12) public abstract class AbstractPacketFilter implements IPacketFilter{
a1a5301e JFlowMonitor/src/Logic/AbstractPacketFilter.java         (aHa     2011-05-06 18:52:07 +0800 13)     static protected  byte[] Ipv4Int2ByteArray(int ipv4){
a1a5301e JFlowMonitor/src/Logic/AbstractPacketFilter.java         (aHa     2011-05-06 18:52:07 +0800 14)         byte[] retv = new byte[4];
a1a5301e JFlowMonitor/src/Logic/AbstractPacketFilter.java         (aHa     2011-05-06 18:52:07 +0800 15)         retv[0] = (byte) (((ipv4 & (0xff000000)) >> 24) & 0x000000ff);
a1a5301e JFlowMonitor/src/Logic/AbstractPacketFilter.java         (aHa     2011-05-06 18:52:07 +0800 16)         retv[1] = (byte) ((ipv4&0x00ff0000)>>16);
a1a5301e JFlowMonitor/src/Logic/AbstractPacketFilter.java         (aHa     2011-05-06 18:52:07 +0800 17)         retv[2] = (byte) ((ipv4&0x0000ff00)>>8);
a1a5301e JFlowMonitor/src/Logic/AbstractPacketFilter.java         (aHa     2011-05-06 18:52:07 +0800 18)         retv[3] = (byte) (ipv4&0x000000ff);
a1a5301e JFlowMonitor/src/Logic/AbstractPacketFilter.java         (aHa     2011-05-06 18:52:07 +0800 19)         return  retv;
a1a5301e JFlowMonitor/src/Logic/AbstractPacketFilter.java         (aHa     2011-05-06 18:52:07 +0800 20)     }
a1a5301e JFlowMonitor/src/Logic/AbstractPacketFilter.java         (aHa     2011-05-06 18:52:07 +0800 21)     static protected int ipToInt(String strIP)
a1a5301e JFlowMonitor/src/Logic/AbstractPacketFilter.java         (aHa     2011-05-06 18:52:07 +0800 22)      //将127.0.0.1 形式的IP地址转换成10进制整数，这里没有进行任何错误处理
a1a5301e JFlowMonitor/src/Logic/AbstractPacketFilter.java         (aHa     2011-05-06 18:52:07 +0800 23)      {
a1a5301e JFlowMonitor/src/Logic/AbstractPacketFilter.java         (aHa     2011-05-06 18:52:07 +0800 24)           int[] ip=new int[4];
a1a5301e JFlowMonitor/src/Logic/AbstractPacketFilter.java         (aHa     2011-05-06 18:52:07 +0800 25)           int position1=strIP.indexOf(".");
a1a5301e JFlowMonitor/src/Logic/AbstractPacketFilter.java         (aHa     2011-05-06 18:52:07 +0800 26)           int position2=strIP.indexOf(".",position1+1);
a1a5301e JFlowMonitor/src/Logic/AbstractPacketFilter.java         (aHa     2011-05-06 18:52:07 +0800 27)           int position3=strIP.indexOf(".",position2+1);
a1a5301e JFlowMonitor/src/Logic/AbstractPacketFilter.java         (aHa     2011-05-06 18:52:07 +0800 28)           ip[0]=(int) Long.parseLong(strIP.substring(0,position1));
a1a5301e JFlowMonitor/src/Logic/AbstractPacketFilter.java         (aHa     2011-05-06 18:52:07 +0800 29)           ip[1]=(int) Long.parseLong(strIP.substring(position1+1,position2));
a1a5301e JFlowMonitor/src/Logic/AbstractPacketFilter.java         (aHa     2011-05-06 18:52:07 +0800 30)           ip[2]=(int) Long.parseLong(strIP.substring(position2+1,position3));
a1a5301e JFlowMonitor/src/Logic/AbstractPacketFilter.java         (aHa     2011-05-06 18:52:07 +0800 31)           ip[3]=(int) Long.parseLong(strIP.substring(position3+1));
a1a5301e JFlowMonitor/src/Logic/AbstractPacketFilter.java         (aHa     2011-05-06 18:52:07 +0800 32)           return (ip[0]<<24)+(ip[1]<<16)+(ip[2]<<8)+ip[3];
a1a5301e JFlowMonitor/src/Logic/AbstractPacketFilter.java         (aHa     2011-05-06 18:52:07 +0800 33)      }
a1a5301e JFlowMonitor/src/Logic/AbstractPacketFilter.java         (aHa     2011-05-06 18:52:07 +0800 34)      static protected String intToIP(int intIP)
a1a5301e JFlowMonitor/src/Logic/AbstractPacketFilter.java         (aHa     2011-05-06 18:52:07 +0800 35)      {
a1a5301e JFlowMonitor/src/Logic/AbstractPacketFilter.java         (aHa     2011-05-06 18:52:07 +0800 36)           StringBuilder sb=new StringBuilder("");
a1a5301e JFlowMonitor/src/Logic/AbstractPacketFilter.java         (aHa     2011-05-06 18:52:07 +0800 37)           sb.append(String.valueOf(intIP>>>24));//直接右移24位
a1a5301e JFlowMonitor/src/Logic/AbstractPacketFilter.java         (aHa     2011-05-06 18:52:07 +0800 38)           sb.append(".");
a1a5301e JFlowMonitor/src/Logic/AbstractPacketFilter.java         (aHa     2011-05-06 18:52:07 +0800 39)            //将高8位置0，然后右移16位
a1a5301e JFlowMonitor/src/Logic/AbstractPacketFilter.java         (aHa     2011-05-06 18:52:07 +0800 40)           sb.append(String.valueOf((intIP&0x00FFFFFF)>>>16));
a1a5301e JFlowMonitor/src/Logic/AbstractPacketFilter.java         (aHa     2011-05-06 18:52:07 +0800 41)           sb.append(".");
a1a5301e JFlowMonitor/src/Logic/AbstractPacketFilter.java         (aHa     2011-05-06 18:52:07 +0800 42)           sb.append(String.valueOf((intIP&0x0000FFFF)>>>8));
a1a5301e JFlowMonitor/src/Logic/AbstractPacketFilter.java         (aHa     2011-05-06 18:52:07 +0800 43)           sb.append(".");
a1a5301e JFlowMonitor/src/Logic/AbstractPacketFilter.java         (aHa     2011-05-06 18:52:07 +0800 44)           sb.append(String.valueOf(intIP&0x000000FF));
a1a5301e JFlowMonitor/src/Logic/AbstractPacketFilter.java         (aHa     2011-05-06 18:52:07 +0800 45)           return sb.toString();
a1a5301e JFlowMonitor/src/Logic/AbstractPacketFilter.java         (aHa     2011-05-06 18:52:07 +0800 46)      }
a1a5301e JFlowMonitor/src/Logic/AbstractPacketFilter.java         (aHa     2011-05-06 18:52:07 +0800 47) }
a1a5301e JFlowMonitor/src/Logic/CernetAttribute.java         (aHa     2011-05-06 18:52:07 +0800  1) /*
a1a5301e JFlowMonitor/src/Logic/CernetAttribute.java         (aHa     2011-05-06 18:52:07 +0800  2)  * To change this template, choose Tools | Templates
a1a5301e JFlowMonitor/src/Logic/CernetAttribute.java         (aHa     2011-05-06 18:52:07 +0800  3)  * and open the template in the editor.
a1a5301e JFlowMonitor/src/Logic/CernetAttribute.java         (aHa     2011-05-06 18:52:07 +0800  4)  */
a1a5301e JFlowMonitor/src/Logic/CernetAttribute.java         (aHa     2011-05-06 18:52:07 +0800  5) 
65b592be JFlowMonitor/src/Logic/Filters/CernetAttribute.java (reyoung 2011-05-06 20:23:47 +0800  6) package Logic.Filters;
a1a5301e JFlowMonitor/src/Logic/CernetAttribute.java         (aHa     2011-05-06 18:52:07 +0800  7) 
a1a5301e JFlowMonitor/src/Logic/CernetAttribute.java         (aHa     2011-05-06 18:52:07 +0800  8) /**
a1a5301e JFlowMonitor/src/Logic/CernetAttribute.java         (aHa     2011-05-06 18:52:07 +0800  9)  *
a1a5301e JFlowMonitor/src/Logic/CernetAttribute.java         (aHa     2011-05-06 18:52:07 +0800 10)  * @author YQ
a1a5301e JFlowMonitor/src/Logic/CernetAttribute.java         (aHa     2011-05-06 18:52:07 +0800 11)  */
a1a5301e JFlowMonitor/src/Logic/CernetAttribute.java         (aHa     2011-05-06 18:52:07 +0800 12) public class CernetAttribute<A1,A2> {
a1a5301e JFlowMonitor/src/Logic/CernetAttribute.java         (aHa     2011-05-06 18:52:07 +0800 13)     public A1 ip;
a1a5301e JFlowMonitor/src/Logic/CernetAttribute.java         (aHa     2011-05-06 18:52:07 +0800 14)     public A2 mask;
a1a5301e JFlowMonitor/src/Logic/CernetAttribute.java         (aHa     2011-05-06 18:52:07 +0800 15) }
a1a5301e JFlowMonitor/src/Logic/CernetPacketFilter.java         (aHa     2011-05-06 18:52:07 +0800  1) /*
a1a5301e JFlowMonitor/src/Logic/CernetPacketFilter.java         (aHa     2011-05-06 18:52:07 +0800  2)  * To change this template, choose Tools | Templates
a1a5301e JFlowMonitor/src/Logic/CernetPacketFilter.java         (aHa     2011-05-06 18:52:07 +0800  3)  * and open the template in the editor.
a1a5301e JFlowMonitor/src/Logic/CernetPacketFilter.java         (aHa     2011-05-06 18:52:07 +0800  4)  */
65b592be JFlowMonitor/src/Logic/Filters/CernetPacketFilter.java (reyoung 2011-05-06 20:23:47 +0800  5) package Logic.Filters;
a1a5301e JFlowMonitor/src/Logic/CernetPacketFilter.java         (aHa     2011-05-06 18:52:07 +0800  6) 
a1a5301e JFlowMonitor/src/Logic/CernetPacketFilter.java         (aHa     2011-05-06 18:52:07 +0800  7) import Network.*;
a1a5301e JFlowMonitor/src/Logic/CernetPacketFilter.java         (aHa     2011-05-06 18:52:07 +0800  8) import java.util.List;
a1a5301e JFlowMonitor/src/Logic/CernetPacketFilter.java         (aHa     2011-05-06 18:52:07 +0800  9) 
a1a5301e JFlowMonitor/src/Logic/CernetPacketFilter.java         (aHa     2011-05-06 18:52:07 +0800 10) /**
a1a5301e JFlowMonitor/src/Logic/CernetPacketFilter.java         (aHa     2011-05-06 18:52:07 +0800 11)  *
a1a5301e JFlowMonitor/src/Logic/CernetPacketFilter.java         (aHa     2011-05-06 18:52:07 +0800 12)  * @author YQ
a1a5301e JFlowMonitor/src/Logic/CernetPacketFilter.java         (aHa     2011-05-06 18:52:07 +0800 13)  */
a1a5301e JFlowMonitor/src/Logic/CernetPacketFilter.java         (aHa     2011-05-06 18:52:07 +0800 14) public class CernetPacketFilter extends AbstractPacketFilter {
291954fe JFlowMonitor/src/Logic/Filters/CernetPacketFilter.java (aHa     2011-05-06 23:20:47 +0800 15)     private static CernetPacketFilter cernetPacketFilter = null;
291954fe JFlowMonitor/src/Logic/Filters/CernetPacketFilter.java (aHa     2011-05-06 23:20:47 +0800 16)     private static CernetReader cernetReader = null;
291954fe JFlowMonitor/src/Logic/Filters/CernetPacketFilter.java (aHa     2011-05-06 23:20:47 +0800 17)     public static void Initialize(String fn){
291954fe JFlowMonitor/src/Logic/Filters/CernetPacketFilter.java (aHa     2011-05-06 23:20:47 +0800 18)         if(cernetPacketFilter == null){
291954fe JFlowMonitor/src/Logic/Filters/CernetPacketFilter.java (aHa     2011-05-06 23:20:47 +0800 19)             cernetPacketFilter = new CernetPacketFilter();
291954fe JFlowMonitor/src/Logic/Filters/CernetPacketFilter.java (aHa     2011-05-06 23:20:47 +0800 20)             cernetReader = new CernetReader(fn);
7e8ec036 JFlowMonitor/src/Logic/Filters/CernetPacketFilter.java (reyoung 2011-05-06 21:45:30 +0800 21)         }
291954fe JFlowMonitor/src/Logic/Filters/CernetPacketFilter.java (aHa     2011-05-06 23:20:47 +0800 22)     }
291954fe JFlowMonitor/src/Logic/Filters/CernetPacketFilter.java (aHa     2011-05-06 23:20:47 +0800 23)     public static IPacketFilter Instance(){
c042a7aa JFlowMonitor/src/Logic/Filters/CernetPacketFilter.java (aHa     2011-05-07 14:29:49 +0800 24)         if(cernetPacketFilter == null){
c042a7aa JFlowMonitor/src/Logic/Filters/CernetPacketFilter.java (aHa     2011-05-07 14:29:49 +0800 25)             Initialize("Cernet");
c042a7aa JFlowMonitor/src/Logic/Filters/CernetPacketFilter.java (aHa     2011-05-07 14:29:49 +0800 26)         }
291954fe JFlowMonitor/src/Logic/Filters/CernetPacketFilter.java (aHa     2011-05-06 23:20:47 +0800 27)         return cernetPacketFilter;
14dfa7db JFlowMonitor/src/Logic/Filters/CernetPacketFilter.java (aHa     2011-05-06 23:00:54 +0800 28)     }
14dfa7db JFlowMonitor/src/Logic/Filters/CernetPacketFilter.java (aHa     2011-05-06 23:00:54 +0800 29)     private CernetPacketFilter(){
7e8ec036 JFlowMonitor/src/Logic/Filters/CernetPacketFilter.java (reyoung 2011-05-06 21:45:30 +0800 30)     }
14dfa7db JFlowMonitor/src/Logic/Filters/CernetPacketFilter.java (aHa     2011-05-06 23:00:54 +0800 31)     public boolean check(IPacket packet) {
a1a5301e JFlowMonitor/src/Logic/CernetPacketFilter.java         (aHa     2011-05-06 18:52:07 +0800 32)         boolean isInCernet = false;
f3a1b6c6 JFlowMonitor/src/Logic/Filters/CernetPacketFilter.java (aHa     2011-05-07 14:05:38 +0800 33)         int destAddress = packet.getDestAddress();
a1a5301e JFlowMonitor/src/Logic/CernetPacketFilter.java         (aHa     2011-05-06 18:52:07 +0800 34)         int cernetAddress = 0;
a1a5301e JFlowMonitor/src/Logic/CernetPacketFilter.java         (aHa     2011-05-06 18:52:07 +0800 35)         int cernerMask = 0;
291954fe JFlowMonitor/src/Logic/Filters/CernetPacketFilter.java (aHa     2011-05-06 23:20:47 +0800 36)         List<CernetAttribute<String, String>> cernetDataList = cernetReader.getCernetAttribute();
a1a5301e JFlowMonitor/src/Logic/CernetPacketFilter.java         (aHa     2011-05-06 18:52:07 +0800 37)         for (int i = 0; i < cernetDataList.size(); ++i) {
a1a5301e JFlowMonitor/src/Logic/CernetPacketFilter.java         (aHa     2011-05-06 18:52:07 +0800 38)             CernetAttribute<String, String> c = cernetDataList.get(i);
a1a5301e JFlowMonitor/src/Logic/CernetPacketFilter.java         (aHa     2011-05-06 18:52:07 +0800 39)             cernetAddress = ipToInt(c.ip);
a1a5301e JFlowMonitor/src/Logic/CernetPacketFilter.java         (aHa     2011-05-06 18:52:07 +0800 40)             cernerMask = ipToInt(c.mask);
f3a1b6c6 JFlowMonitor/src/Logic/Filters/CernetPacketFilter.java (aHa     2011-05-07 14:05:38 +0800 41)             if ((cernetAddress & cernerMask) == (destAddress & cernerMask)){
a1a5301e JFlowMonitor/src/Logic/CernetPacketFilter.java         (aHa     2011-05-06 18:52:07 +0800 42)                 isInCernet = true;
a1a5301e JFlowMonitor/src/Logic/CernetPacketFilter.java         (aHa     2011-05-06 18:52:07 +0800 43)                 break;
a1a5301e JFlowMonitor/src/Logic/CernetPacketFilter.java         (aHa     2011-05-06 18:52:07 +0800 44)             }
a1a5301e JFlowMonitor/src/Logic/CernetPacketFilter.java         (aHa     2011-05-06 18:52:07 +0800 45)         }
a1a5301e JFlowMonitor/src/Logic/CernetPacketFilter.java         (aHa     2011-05-06 18:52:07 +0800 46)         return isInCernet;
a1a5301e JFlowMonitor/src/Logic/CernetPacketFilter.java         (aHa     2011-05-06 18:52:07 +0800 47)     }
a1a5301e JFlowMonitor/src/Logic/CernetPacketFilter.java         (aHa     2011-05-06 18:52:07 +0800 48) }
d4f873fd (aHa 2011-05-06 23:21:58 +0800  1) /*
d4f873fd (aHa 2011-05-06 23:21:58 +0800  2)  * To change this template, choose Tools | Templates
d4f873fd (aHa 2011-05-06 23:21:58 +0800  3)  * and open the template in the editor.
d4f873fd (aHa 2011-05-06 23:21:58 +0800  4)  */
d4f873fd (aHa 2011-05-06 23:21:58 +0800  5) package Logic.Filters;
d4f873fd (aHa 2011-05-06 23:21:58 +0800  6) 
f3a1b6c6 (aHa 2011-05-07 14:05:38 +0800  7) import java.io.BufferedReader;
f3a1b6c6 (aHa 2011-05-07 14:05:38 +0800  8) import java.io.File;
f3a1b6c6 (aHa 2011-05-07 14:05:38 +0800  9) import java.io.FileReader;
f3a1b6c6 (aHa 2011-05-07 14:05:38 +0800 10) import java.io.IOException;
d4f873fd (aHa 2011-05-06 23:21:58 +0800 11) import java.util.ArrayList;
d4f873fd (aHa 2011-05-06 23:21:58 +0800 12) import java.util.List;
f3a1b6c6 (aHa 2011-05-07 14:05:38 +0800 13) import java.util.StringTokenizer;
d4f873fd (aHa 2011-05-06 23:21:58 +0800 14) 
d4f873fd (aHa 2011-05-06 23:21:58 +0800 15) /**
d4f873fd (aHa 2011-05-06 23:21:58 +0800 16)  *
d4f873fd (aHa 2011-05-06 23:21:58 +0800 17)  * @author YQ
d4f873fd (aHa 2011-05-06 23:21:58 +0800 18)  */
d4f873fd (aHa 2011-05-06 23:21:58 +0800 19) public class CernetReader {
f3a1b6c6 (aHa 2011-05-07 14:05:38 +0800 20) 
f3a1b6c6 (aHa 2011-05-07 14:05:38 +0800 21)     private String m_fileName = null;
f3a1b6c6 (aHa 2011-05-07 14:05:38 +0800 22)     private List<CernetAttribute<String, String>> m_cernetAttributeList = null;
f3a1b6c6 (aHa 2011-05-07 14:05:38 +0800 23) 
f3a1b6c6 (aHa 2011-05-07 14:05:38 +0800 24)     public CernetReader(String fileName) {
f3a1b6c6 (aHa 2011-05-07 14:05:38 +0800 25)         this.m_fileName = fileName;
f3a1b6c6 (aHa 2011-05-07 14:05:38 +0800 26)         m_cernetAttributeList = new ArrayList<CernetAttribute<String, String>>();
f3a1b6c6 (aHa 2011-05-07 14:05:38 +0800 27)         File file = new File(fileName);
f3a1b6c6 (aHa 2011-05-07 14:05:38 +0800 28)         List list = new ArrayList();
f3a1b6c6 (aHa 2011-05-07 14:05:38 +0800 29)         try {
f3a1b6c6 (aHa 2011-05-07 14:05:38 +0800 30)             BufferedReader br = new BufferedReader(new FileReader(file));
f3a1b6c6 (aHa 2011-05-07 14:05:38 +0800 31)             String line = null;
f3a1b6c6 (aHa 2011-05-07 14:05:38 +0800 32)             //因为不知道有几行数据，所以先存入list集合中
f3a1b6c6 (aHa 2011-05-07 14:05:38 +0800 33)             while ((line = br.readLine()) != null) {
f3a1b6c6 (aHa 2011-05-07 14:05:38 +0800 34)                 list.add(line);
f3a1b6c6 (aHa 2011-05-07 14:05:38 +0800 35)             }
f3a1b6c6 (aHa 2011-05-07 14:05:38 +0800 36)             br.close();
f3a1b6c6 (aHa 2011-05-07 14:05:38 +0800 37)         } catch (IOException e) {
f3a1b6c6 (aHa 2011-05-07 14:05:38 +0800 38)         }
f3a1b6c6 (aHa 2011-05-07 14:05:38 +0800 39)         for (int i = 0; i < list.size(); i++) {
f3a1b6c6 (aHa 2011-05-07 14:05:38 +0800 40)             CernetAttribute<String, String> ca = new CernetAttribute<String, String>();
f3a1b6c6 (aHa 2011-05-07 14:05:38 +0800 41)             String changedString = list.get(i).toString();
f3a1b6c6 (aHa 2011-05-07 14:05:38 +0800 42)             String[] strData = null;
f3a1b6c6 (aHa 2011-05-07 14:05:38 +0800 43)             StringTokenizer strtoken = new StringTokenizer(changedString, " ");
f3a1b6c6 (aHa 2011-05-07 14:05:38 +0800 44)             strData = new String[strtoken.countTokens()];
f3a1b6c6 (aHa 2011-05-07 14:05:38 +0800 45)             int j = 0;
f3a1b6c6 (aHa 2011-05-07 14:05:38 +0800 46)             while (strtoken.hasMoreTokens()) {
f3a1b6c6 (aHa 2011-05-07 14:05:38 +0800 47)                 strData[j] = strtoken.nextToken().trim();
f3a1b6c6 (aHa 2011-05-07 14:05:38 +0800 48)                 j++;
f3a1b6c6 (aHa 2011-05-07 14:05:38 +0800 49)             }
f3a1b6c6 (aHa 2011-05-07 14:05:38 +0800 50)             ca.ip = strData[0];
f3a1b6c6 (aHa 2011-05-07 14:05:38 +0800 51)             ca.mask = strData[2];
f3a1b6c6 (aHa 2011-05-07 14:05:38 +0800 52)             m_cernetAttributeList.add(ca);
f3a1b6c6 (aHa 2011-05-07 14:05:38 +0800 53)         }
d4f873fd (aHa 2011-05-06 23:21:58 +0800 54)     }
f3a1b6c6 (aHa 2011-05-07 14:05:38 +0800 55) 
f3a1b6c6 (aHa 2011-05-07 14:05:38 +0800 56)     public List<CernetAttribute<String, String>> getCernetAttribute() {
f3a1b6c6 (aHa 2011-05-07 14:05:38 +0800 57)         return m_cernetAttributeList;
d4f873fd (aHa 2011-05-06 23:21:58 +0800 58)     }
d4f873fd (aHa 2011-05-06 23:21:58 +0800 59) }
ff21b104 (reyoung 2011-05-06 22:57:46 +0800  1) /*
ff21b104 (reyoung 2011-05-06 22:57:46 +0800  2)  * This file is written by reyoung, reyoung@126.com.
ff21b104 (reyoung 2011-05-06 22:57:46 +0800  3)  */
ff21b104 (reyoung 2011-05-06 22:57:46 +0800  4) 
ff21b104 (reyoung 2011-05-06 22:57:46 +0800  5) package Logic.Filters;
ff21b104 (reyoung 2011-05-06 22:57:46 +0800  6) 
ff21b104 (reyoung 2011-05-06 22:57:46 +0800  7) 
ff21b104 (reyoung 2011-05-06 22:57:46 +0800  8) /**
ff21b104 (reyoung 2011-05-06 22:57:46 +0800  9)  *
ff21b104 (reyoung 2011-05-06 22:57:46 +0800 10)  * @author Reyoung
ff21b104 (reyoung 2011-05-06 22:57:46 +0800 11)  */
ff21b104 (reyoung 2011-05-06 22:57:46 +0800 12) public class FilterFactory {
ff21b104 (reyoung 2011-05-06 22:57:46 +0800 13)     static IPacketFilter getFilterByName(String n){
ff21b104 (reyoung 2011-05-06 22:57:46 +0800 14)         if(n.equals(HttpFilter.class.getSimpleName())){
ff21b104 (reyoung 2011-05-06 22:57:46 +0800 15)             return HttpFilter.Instance();
ff21b104 (reyoung 2011-05-06 22:57:46 +0800 16)         }else if(n.equals(TcpFilter.class.getSimpleName())){
ff21b104 (reyoung 2011-05-06 22:57:46 +0800 17)             return TcpFilter.Instance();
ff21b104 (reyoung 2011-05-06 22:57:46 +0800 18)         }else if(n.equals(CernetPacketFilter.class.getSimpleName())){
ff21b104 (reyoung 2011-05-06 22:57:46 +0800 19)             return CernetPacketFilter.Instance();
ff21b104 (reyoung 2011-05-06 22:57:46 +0800 20)         }
ff21b104 (reyoung 2011-05-06 22:57:46 +0800 21)         return null;
ff21b104 (reyoung 2011-05-06 22:57:46 +0800 22)     }
ff21b104 (reyoung 2011-05-06 22:57:46 +0800 23) }
25b29c04 (reyoung 2011-05-06 22:45:46 +0800  1) /*
25b29c04 (reyoung 2011-05-06 22:45:46 +0800  2)  * This file is written by reyoung, reyoung@126.com.
25b29c04 (reyoung 2011-05-06 22:45:46 +0800  3)  */
25b29c04 (reyoung 2011-05-06 22:45:46 +0800  4) 
25b29c04 (reyoung 2011-05-06 22:45:46 +0800  5) package Logic.Filters;
25b29c04 (reyoung 2011-05-06 22:45:46 +0800  6) 
25b29c04 (reyoung 2011-05-06 22:45:46 +0800  7) import Network.IPacket;
25b29c04 (reyoung 2011-05-06 22:45:46 +0800  8) 
25b29c04 (reyoung 2011-05-06 22:45:46 +0800  9) /**
25b29c04 (reyoung 2011-05-06 22:45:46 +0800 10)  *
25b29c04 (reyoung 2011-05-06 22:45:46 +0800 11)  * @author Reyoung
25b29c04 (reyoung 2011-05-06 22:45:46 +0800 12)  */
25b29c04 (reyoung 2011-05-06 22:45:46 +0800 13) public class HttpFilter implements IPacketFilter{
25b29c04 (reyoung 2011-05-06 22:45:46 +0800 14) 
25b29c04 (reyoung 2011-05-06 22:45:46 +0800 15)     private HttpFilter(){
25b29c04 (reyoung 2011-05-06 22:45:46 +0800 16)         
25b29c04 (reyoung 2011-05-06 22:45:46 +0800 17)     }
25b29c04 (reyoung 2011-05-06 22:45:46 +0800 18)     private static HttpFilter instance=null;
25b29c04 (reyoung 2011-05-06 22:45:46 +0800 19)     static public IPacketFilter Instance(){
25b29c04 (reyoung 2011-05-06 22:45:46 +0800 20)         if(instance==null){
25b29c04 (reyoung 2011-05-06 22:45:46 +0800 21)             instance = new HttpFilter();
25b29c04 (reyoung 2011-05-06 22:45:46 +0800 22)         }
25b29c04 (reyoung 2011-05-06 22:45:46 +0800 23)         return instance;
25b29c04 (reyoung 2011-05-06 22:45:46 +0800 24)     }
25b29c04 (reyoung 2011-05-06 22:45:46 +0800 25)     public boolean check(IPacket packet) {
25b29c04 (reyoung 2011-05-06 22:45:46 +0800 26)         return (packet.getPacketFlag()&packet.PacketFlag_HTTP)!=0;
25b29c04 (reyoung 2011-05-06 22:45:46 +0800 27)     }
25b29c04 (reyoung 2011-05-06 22:45:46 +0800 28) }
0edcd5a1 JFlowMonitor/src/Logic/IPacketFilter.java         (reyoung 2011-05-05 14:27:12 +0800  1) /*
0edcd5a1 JFlowMonitor/src/Logic/IPacketFilter.java         (reyoung 2011-05-05 14:27:12 +0800  2)  * This file is written by reyoung, reyoung@126.com.
0edcd5a1 JFlowMonitor/src/Logic/IPacketFilter.java         (reyoung 2011-05-05 14:27:12 +0800  3)  */
0edcd5a1 JFlowMonitor/src/Logic/IPacketFilter.java         (reyoung 2011-05-05 14:27:12 +0800  4) 
65b592be JFlowMonitor/src/Logic/Filters/IPacketFilter.java (reyoung 2011-05-06 20:23:47 +0800  5) package Logic.Filters;
0edcd5a1 JFlowMonitor/src/Logic/IPacketFilter.java         (reyoung 2011-05-05 14:27:12 +0800  6) import Network.IPacket;
0edcd5a1 JFlowMonitor/src/Logic/IPacketFilter.java         (reyoung 2011-05-05 14:27:12 +0800  7) /**
0edcd5a1 JFlowMonitor/src/Logic/IPacketFilter.java         (reyoung 2011-05-05 14:27:12 +0800  8)  *
0edcd5a1 JFlowMonitor/src/Logic/IPacketFilter.java         (reyoung 2011-05-05 14:27:12 +0800  9)  * @author Reyoung
0edcd5a1 JFlowMonitor/src/Logic/IPacketFilter.java         (reyoung 2011-05-05 14:27:12 +0800 10)  */
0edcd5a1 JFlowMonitor/src/Logic/IPacketFilter.java         (reyoung 2011-05-05 14:27:12 +0800 11) public interface IPacketFilter {
7e8ec036 JFlowMonitor/src/Logic/Filters/IPacketFilter.java (reyoung 2011-05-06 21:45:30 +0800 12)     /**
7e8ec036 JFlowMonitor/src/Logic/Filters/IPacketFilter.java (reyoung 2011-05-06 21:45:30 +0800 13)      * Filter 过滤器
7e8ec036 JFlowMonitor/src/Logic/Filters/IPacketFilter.java (reyoung 2011-05-06 21:45:30 +0800 14)      * 因为过滤器有很多类型，比如内外网过滤器，HTTP过滤器，所以，不能再接口的check传入其他参数
7e8ec036 JFlowMonitor/src/Logic/Filters/IPacketFilter.java (reyoung 2011-05-06 21:45:30 +0800 15)      * CernetReader应该是你的Filter内部维护的东西，而不应该修改全局的接口
7e8ec036 JFlowMonitor/src/Logic/Filters/IPacketFilter.java (reyoung 2011-05-06 21:45:30 +0800 16)      * @param packet
7e8ec036 JFlowMonitor/src/Logic/Filters/IPacketFilter.java (reyoung 2011-05-06 21:45:30 +0800 17)      * @return
7e8ec036 JFlowMonitor/src/Logic/Filters/IPacketFilter.java (reyoung 2011-05-06 21:45:30 +0800 18)      */
7e8ec036 JFlowMonitor/src/Logic/Filters/IPacketFilter.java (reyoung 2011-05-06 21:45:30 +0800 19)     public boolean check(IPacket packet);
0edcd5a1 JFlowMonitor/src/Logic/IPacketFilter.java         (reyoung 2011-05-05 14:27:12 +0800 20) }
25b29c04 (reyoung 2011-05-06 22:45:46 +0800  1) /*
25b29c04 (reyoung 2011-05-06 22:45:46 +0800  2)  * This file is written by reyoung, reyoung@126.com.
25b29c04 (reyoung 2011-05-06 22:45:46 +0800  3)  */
25b29c04 (reyoung 2011-05-06 22:45:46 +0800  4) 
25b29c04 (reyoung 2011-05-06 22:45:46 +0800  5) package Logic.Filters;
25b29c04 (reyoung 2011-05-06 22:45:46 +0800  6) 
25b29c04 (reyoung 2011-05-06 22:45:46 +0800  7) import Network.IPacket;
25b29c04 (reyoung 2011-05-06 22:45:46 +0800  8) 
25b29c04 (reyoung 2011-05-06 22:45:46 +0800  9) /**
25b29c04 (reyoung 2011-05-06 22:45:46 +0800 10)  *
25b29c04 (reyoung 2011-05-06 22:45:46 +0800 11)  * @author Reyoung
25b29c04 (reyoung 2011-05-06 22:45:46 +0800 12)  */
25b29c04 (reyoung 2011-05-06 22:45:46 +0800 13) public class TcpFilter implements IPacketFilter{
25b29c04 (reyoung 2011-05-06 22:45:46 +0800 14)     private TcpFilter(){
25b29c04 (reyoung 2011-05-06 22:45:46 +0800 15) 
25b29c04 (reyoung 2011-05-06 22:45:46 +0800 16)     }
25b29c04 (reyoung 2011-05-06 22:45:46 +0800 17)     private static TcpFilter instance = null;
ff21b104 (reyoung 2011-05-06 22:57:46 +0800 18)     static public TcpFilter Instance(){
25b29c04 (reyoung 2011-05-06 22:45:46 +0800 19)         if(instance == null){
25b29c04 (reyoung 2011-05-06 22:45:46 +0800 20)             instance = new TcpFilter();
25b29c04 (reyoung 2011-05-06 22:45:46 +0800 21)         }
25b29c04 (reyoung 2011-05-06 22:45:46 +0800 22)         return instance;
25b29c04 (reyoung 2011-05-06 22:45:46 +0800 23)     }
25b29c04 (reyoung 2011-05-06 22:45:46 +0800 24) 
25b29c04 (reyoung 2011-05-06 22:45:46 +0800 25)     public boolean check(IPacket packet) {
25b29c04 (reyoung 2011-05-06 22:45:46 +0800 26)         return (packet.getPacketFlag()&IPacket.PacketFlag_TCP)!=0;
25b29c04 (reyoung 2011-05-06 22:45:46 +0800 27)     }
25b29c04 (reyoung 2011-05-06 22:45:46 +0800 28)     
25b29c04 (reyoung 2011-05-06 22:45:46 +0800 29) }
e94f5e9b (reyoung 2011-05-20 20:08:30 +0800  1) /*
e94f5e9b (reyoung 2011-05-20 20:08:30 +0800  2)  * This file is written by reyoung, reyoung@126.com.
e94f5e9b (reyoung 2011-05-20 20:08:30 +0800  3)  */
e94f5e9b (reyoung 2011-05-20 20:08:30 +0800  4) 
e94f5e9b (reyoung 2011-05-20 20:08:30 +0800  5) package Logic.History;
e94f5e9b (reyoung 2011-05-20 20:08:30 +0800  6) 
e94f5e9b (reyoung 2011-05-20 20:08:30 +0800  7) import Database.Database;
e94f5e9b (reyoung 2011-05-20 20:08:30 +0800  8) import Database.Flow;
e94f5e9b (reyoung 2011-05-20 20:08:30 +0800  9) import Database.IDatabaseProxy;
e94f5e9b (reyoung 2011-05-20 20:08:30 +0800 10) import Network.IPacket;
e94f5e9b (reyoung 2011-05-20 20:08:30 +0800 11) import java.sql.SQLException;
e94f5e9b (reyoung 2011-05-20 20:08:30 +0800 12) import java.util.Date;
e94f5e9b (reyoung 2011-05-20 20:08:30 +0800 13) import java.util.HashMap;
e94f5e9b (reyoung 2011-05-20 20:08:30 +0800 14) import java.util.List;
fa4f9b28 (reyoung 2011-05-20 21:05:36 +0800 15) import java.util.Map;
e94f5e9b (reyoung 2011-05-20 20:08:30 +0800 16) import java.util.logging.Level;
e94f5e9b (reyoung 2011-05-20 20:08:30 +0800 17) import java.util.logging.Logger;
e94f5e9b (reyoung 2011-05-20 20:08:30 +0800 18) 
e94f5e9b (reyoung 2011-05-20 20:08:30 +0800 19) /**
e94f5e9b (reyoung 2011-05-20 20:08:30 +0800 20)  *
e94f5e9b (reyoung 2011-05-20 20:08:30 +0800 21)  * @author Reyoung
e94f5e9b (reyoung 2011-05-20 20:08:30 +0800 22)  */
e94f5e9b (reyoung 2011-05-20 20:08:30 +0800 23) public class FlowHistoryInfo extends HistoryInfo{
fa4f9b28 (reyoung 2011-05-20 21:05:36 +0800 24)     public Map<Date,Flow> Data;
e94f5e9b (reyoung 2011-05-20 20:08:30 +0800 25)     public FlowHistoryInfo(Date From,Date To){
e94f5e9b (reyoung 2011-05-20 20:08:30 +0800 26)         super(From,To);
f108e175 (reyoung 2011-05-20 20:40:55 +0800 27)         Data = new HashMap<Date, Flow>();
e94f5e9b (reyoung 2011-05-20 20:08:30 +0800 28)     }
e94f5e9b (reyoung 2011-05-20 20:08:30 +0800 29)     @Override
e94f5e9b (reyoung 2011-05-20 20:08:30 +0800 30)     protected void process() {
e94f5e9b (reyoung 2011-05-20 20:08:30 +0800 31)         IDatabaseProxy ins = Database.instance();
e94f5e9b (reyoung 2011-05-20 20:08:30 +0800 32)         try {
e94f5e9b (reyoung 2011-05-20 20:08:30 +0800 33)             List<Flow> flow = ins.getFlow(FromDate, ToDate);
e94f5e9b (reyoung 2011-05-20 20:08:30 +0800 34)             List<IPacket> ipckets = ins.getPacket(FromDate, ToDate);
f108e175 (reyoung 2011-05-20 20:40:55 +0800 35)             Data.putAll(ConvertPacketToFlow(ipckets));
f108e175 (reyoung 2011-05-20 20:40:55 +0800 36)             for(Flow f:flow){
f108e175 (reyoung 2011-05-20 20:40:55 +0800 37)                 Data.put(f.sDate,f);
f108e175 (reyoung 2011-05-20 20:40:55 +0800 38)             }
e94f5e9b (reyoung 2011-05-20 20:08:30 +0800 39)         } catch (SQLException ex) {
e94f5e9b (reyoung 2011-05-20 20:08:30 +0800 40)             Logger.getLogger(FlowHistoryInfo.class.getName()).log(Level.SEVERE, null, ex);
e94f5e9b (reyoung 2011-05-20 20:08:30 +0800 41)         }
e94f5e9b (reyoung 2011-05-20 20:08:30 +0800 42)     }
e94f5e9b (reyoung 2011-05-20 20:08:30 +0800 43) }
e94f5e9b (reyoung 2011-05-20 20:08:30 +0800 44) 
743291fe (Kuziki 2011-05-25 23:01:03 +0800  1) /*
743291fe (Kuziki 2011-05-25 23:01:03 +0800  2)  * To change this template, choose Tools | Templates
743291fe (Kuziki 2011-05-25 23:01:03 +0800  3)  * and open the template in the editor.
743291fe (Kuziki 2011-05-25 23:01:03 +0800  4)  */
743291fe (Kuziki 2011-05-25 23:01:03 +0800  5) 
743291fe (Kuziki 2011-05-25 23:01:03 +0800  6) package Logic.History;
743291fe (Kuziki 2011-05-25 23:01:03 +0800  7) 
743291fe (Kuziki 2011-05-25 23:01:03 +0800  8) import Database.Database;
743291fe (Kuziki 2011-05-25 23:01:03 +0800  9) import java.sql.SQLException;
743291fe (Kuziki 2011-05-25 23:01:03 +0800 10) import java.util.Date;
743291fe (Kuziki 2011-05-25 23:01:03 +0800 11) import java.util.logging.Level;
743291fe (Kuziki 2011-05-25 23:01:03 +0800 12) import java.util.logging.Logger;
743291fe (Kuziki 2011-05-25 23:01:03 +0800 13) 
743291fe (Kuziki 2011-05-25 23:01:03 +0800 14) /**
743291fe (Kuziki 2011-05-25 23:01:03 +0800 15)  *
743291fe (Kuziki 2011-05-25 23:01:03 +0800 16)  * @author Kuziki
743291fe (Kuziki 2011-05-25 23:01:03 +0800 17)  */
743291fe (Kuziki 2011-05-25 23:01:03 +0800 18) public class HistoryCompressThread extends Thread{
743291fe (Kuziki 2011-05-25 23:01:03 +0800 19)     Date deadDay;
743291fe (Kuziki 2011-05-25 23:01:03 +0800 20)      public HistoryCompressThread(Date t)
743291fe (Kuziki 2011-05-25 23:01:03 +0800 21)      {
743291fe (Kuziki 2011-05-25 23:01:03 +0800 22)          deadDay = t;
743291fe (Kuziki 2011-05-25 23:01:03 +0800 23)      }
743291fe (Kuziki 2011-05-25 23:01:03 +0800 24)      @Override
743291fe (Kuziki 2011-05-25 23:01:03 +0800 25)      public void run(){
743291fe (Kuziki 2011-05-25 23:01:03 +0800 26)         try {
743291fe (Kuziki 2011-05-25 23:01:03 +0800 27)             Database.instance().compress(deadDay);
743291fe (Kuziki 2011-05-25 23:01:03 +0800 28)         } catch (SQLException ex) {
743291fe (Kuziki 2011-05-25 23:01:03 +0800 29)             Logger.getLogger(HistoryCompressThread.class.getName()).log(Level.SEVERE, null, ex);
743291fe (Kuziki 2011-05-25 23:01:03 +0800 30)         }
743291fe (Kuziki 2011-05-25 23:01:03 +0800 31)      }
743291fe (Kuziki 2011-05-25 23:01:03 +0800 32) }
e94f5e9b (reyoung 2011-05-20 20:08:30 +0800  1) /*
e94f5e9b (reyoung 2011-05-20 20:08:30 +0800  2)  * This file is written by reyoung, reyoung@126.com.
e94f5e9b (reyoung 2011-05-20 20:08:30 +0800  3)  */
e94f5e9b (reyoung 2011-05-20 20:08:30 +0800  4) 
e94f5e9b (reyoung 2011-05-20 20:08:30 +0800  5) package Logic.History;
e94f5e9b (reyoung 2011-05-20 20:08:30 +0800  6) 
f108e175 (reyoung 2011-05-20 20:40:55 +0800  7) import Database.Flow;
f108e175 (reyoung 2011-05-20 20:40:55 +0800  8) import Logic.Filters.CernetPacketFilter;
f108e175 (reyoung 2011-05-20 20:40:55 +0800  9) import Network.IPacket;
6ddb27f4 (reyoung 2011-05-20 20:43:56 +0800 10) //import java.util.Calendar;
e94f5e9b (reyoung 2011-05-20 20:08:30 +0800 11) import java.util.Date;
f108e175 (reyoung 2011-05-20 20:40:55 +0800 12) import java.util.HashMap;
6ddb27f4 (reyoung 2011-05-20 20:43:56 +0800 13) //import java.util.Hashtable;
f108e175 (reyoung 2011-05-20 20:40:55 +0800 14) import java.util.Iterator;
f108e175 (reyoung 2011-05-20 20:40:55 +0800 15) import java.util.List;
6ddb27f4 (reyoung 2011-05-20 20:43:56 +0800 16) //import java.util.ListIterator;
f108e175 (reyoung 2011-05-20 20:40:55 +0800 17) import java.util.Map;
6ddb27f4 (reyoung 2011-05-20 20:43:56 +0800 18) //import oracle.toplink.essentials.internal.expressions.LogicalExpression;
e94f5e9b (reyoung 2011-05-20 20:08:30 +0800 19) 
e94f5e9b (reyoung 2011-05-20 20:08:30 +0800 20) /**
6ddb27f4 (reyoung 2011-05-20 20:43:56 +0800 21)  * HistoryInfo是UI层访问数据库历史的唯一通道！
6ddb27f4 (reyoung 2011-05-20 20:43:56 +0800 22)  *  他可以获得UI层所需要的所有历史数据。
6ddb27f4 (reyoung 2011-05-20 20:43:56 +0800 23)  *  比如，从某天到某天的简单流量信息，可以为
6ddb27f4 (reyoung 2011-05-20 20:43:56 +0800 24)  *      FlowHistoryInfo info = new FlowHistoryInfo(BeginDate,EndDate);
e94f5e9b (reyoung 2011-05-20 20:08:30 +0800 25)  * @author Reyoung
e94f5e9b (reyoung 2011-05-20 20:08:30 +0800 26)  */
e94f5e9b (reyoung 2011-05-20 20:08:30 +0800 27) public abstract class HistoryInfo {
e94f5e9b (reyoung 2011-05-20 20:08:30 +0800 28)     public Date  FromDate;
e94f5e9b (reyoung 2011-05-20 20:08:30 +0800 29)     public Date  ToDate;
e94f5e9b (reyoung 2011-05-20 20:08:30 +0800 30)     public boolean Complete;
e94f5e9b (reyoung 2011-05-20 20:08:30 +0800 31) 
e94f5e9b (reyoung 2011-05-20 20:08:30 +0800 32) 
e94f5e9b (reyoung 2011-05-20 20:08:30 +0800 33)     public HistoryInfo(Date FromDate, Date ToDate) {
e94f5e9b (reyoung 2011-05-20 20:08:30 +0800 34)         this.FromDate = FromDate;
e94f5e9b (reyoung 2011-05-20 20:08:30 +0800 35)         this.ToDate = ToDate;
e94f5e9b (reyoung 2011-05-20 20:08:30 +0800 36)         this.Complete = false;
4a71e90b (reyoung 2011-05-20 22:51:52 +0800 37) //        this.process();
4a71e90b (reyoung 2011-05-20 22:51:52 +0800 38)     }
4a71e90b (reyoung 2011-05-20 22:51:52 +0800 39)     public void init(){
e94f5e9b (reyoung 2011-05-20 20:08:30 +0800 40)         this.process();
e94f5e9b (reyoung 2011-05-20 20:08:30 +0800 41)     }
f108e175 (reyoung 2011-05-20 20:40:55 +0800 42)     static protected Date NormalizeDate(Date date){
f108e175 (reyoung 2011-05-20 20:40:55 +0800 43)         int d = date.getDate();
f108e175 (reyoung 2011-05-20 20:40:55 +0800 44)         int m = date.getMonth();
f108e175 (reyoung 2011-05-20 20:40:55 +0800 45)         int y = date.getYear();
f108e175 (reyoung 2011-05-20 20:40:55 +0800 46)         return new Date(y, m, d);
f108e175 (reyoung 2011-05-20 20:40:55 +0800 47)     }
f108e175 (reyoung 2011-05-20 20:40:55 +0800 48)     static protected Map<Date,Flow> ConvertPacketToFlow(List<IPacket> packs){
f108e175 (reyoung 2011-05-20 20:40:55 +0800 49)         Map<Date,Flow> table = new HashMap<Date, Flow>();
f108e175 (reyoung 2011-05-20 20:40:55 +0800 50)         Iterator<IPacket> it = packs.iterator();
f108e175 (reyoung 2011-05-20 20:40:55 +0800 51)         while(it.hasNext()){
f108e175 (reyoung 2011-05-20 20:40:55 +0800 52)             IPacket p = it.next();
f108e175 (reyoung 2011-05-20 20:40:55 +0800 53)             Date recv = p.getPacketRecvTime();
f108e175 (reyoung 2011-05-20 20:40:55 +0800 54)             recv = NormalizeDate(recv);
f108e175 (reyoung 2011-05-20 20:40:55 +0800 55)             if(table.containsKey(recv)){
f108e175 (reyoung 2011-05-20 20:40:55 +0800 56)                 Flow f = table.get(recv);
f108e175 (reyoung 2011-05-20 20:40:55 +0800 57)                 boolean isIn = CernetPacketFilter.Instance().check(p);
f108e175 (reyoung 2011-05-20 20:40:55 +0800 58)                 if(isIn)
01d3cce0 (Kuziki  2011-05-24 20:43:36 +0800 59)                     f.innerSize+=(long)p.getPacketLength() / 1024;
f108e175 (reyoung 2011-05-20 20:40:55 +0800 60)                 else
01d3cce0 (Kuziki  2011-05-24 20:43:36 +0800 61)                     f.outerSize+=(long)p.getPacketLength() / 1024;
f108e175 (reyoung 2011-05-20 20:40:55 +0800 62)             }else{
f108e175 (reyoung 2011-05-20 20:40:55 +0800 63)                 Flow f = new Flow();
f108e175 (reyoung 2011-05-20 20:40:55 +0800 64)                 boolean isIn = CernetPacketFilter.Instance().check(p);
f108e175 (reyoung 2011-05-20 20:40:55 +0800 65)                 if(isIn)
01d3cce0 (Kuziki  2011-05-24 20:43:36 +0800 66)                     f.innerSize+=(long)p.getPacketLength() / 1024;
f108e175 (reyoung 2011-05-20 20:40:55 +0800 67)                 else
01d3cce0 (Kuziki  2011-05-24 20:43:36 +0800 68)                     f.outerSize+=(long)p.getPacketLength() / 1024;
f108e175 (reyoung 2011-05-20 20:40:55 +0800 69)                 table.put(recv, f);
f108e175 (reyoung 2011-05-20 20:40:55 +0800 70)             }
f108e175 (reyoung 2011-05-20 20:40:55 +0800 71)         }
f108e175 (reyoung 2011-05-20 20:40:55 +0800 72)         return table;
f108e175 (reyoung 2011-05-20 20:40:55 +0800 73)     }
e94f5e9b (reyoung 2011-05-20 20:08:30 +0800 74)     abstract protected  void process();
e94f5e9b (reyoung 2011-05-20 20:08:30 +0800 75) }
fa4f9b28 JFlowMonitor/src/Logic/History/MostVisitedSiteHistoryInfo.java (reyoung 2011-05-20 21:05:36 +0800   1) /*
fa4f9b28 JFlowMonitor/src/Logic/History/MostVisitedSiteHistoryInfo.java (reyoung 2011-05-20 21:05:36 +0800   2)  * This file is written by reyoung, reyoung@126.com.
fa4f9b28 JFlowMonitor/src/Logic/History/MostVisitedSiteHistoryInfo.java (reyoung 2011-05-20 21:05:36 +0800   3)  */
fa4f9b28 JFlowMonitor/src/Logic/History/MostVisitedSiteHistoryInfo.java (reyoung 2011-05-20 21:05:36 +0800   4) 
fa4f9b28 JFlowMonitor/src/Logic/History/MostVisitedSiteHistoryInfo.java (reyoung 2011-05-20 21:05:36 +0800   5) package Logic.History;
fa4f9b28 JFlowMonitor/src/Logic/History/MostVisitedSiteHistoryInfo.java (reyoung 2011-05-20 21:05:36 +0800   6) 
5bd10d29 JFlowMonitor/src/Logic/History/MostFlowedSiteHistoryInfo.java  (Kuziki  2011-05-20 23:35:32 +0800   7) import Network.IPacket;
5bd10d29 JFlowMonitor/src/Logic/History/MostFlowedSiteHistoryInfo.java  (Kuziki  2011-05-20 23:35:32 +0800   8) import Network.Packet;
5bd10d29 JFlowMonitor/src/Logic/History/MostFlowedSiteHistoryInfo.java  (Kuziki  2011-05-20 23:35:32 +0800   9) import java.util.ArrayList;
5bd10d29 JFlowMonitor/src/Logic/History/MostFlowedSiteHistoryInfo.java  (Kuziki  2011-05-20 23:35:32 +0800  10) import java.util.Collection;
5bd10d29 JFlowMonitor/src/Logic/History/MostFlowedSiteHistoryInfo.java  (Kuziki  2011-05-20 23:35:32 +0800  11) import java.util.Comparator;
fa4f9b28 JFlowMonitor/src/Logic/History/MostVisitedSiteHistoryInfo.java (reyoung 2011-05-20 21:05:36 +0800  12) import java.util.Date;
5bd10d29 JFlowMonitor/src/Logic/History/MostFlowedSiteHistoryInfo.java  (Kuziki  2011-05-20 23:35:32 +0800  13) import java.util.HashMap;
5bd10d29 JFlowMonitor/src/Logic/History/MostFlowedSiteHistoryInfo.java  (Kuziki  2011-05-20 23:35:32 +0800  14) import java.util.LinkedList;
fa4f9b28 JFlowMonitor/src/Logic/History/MostVisitedSiteHistoryInfo.java (reyoung 2011-05-20 21:05:36 +0800  15) import java.util.List;
5bd10d29 JFlowMonitor/src/Logic/History/MostFlowedSiteHistoryInfo.java  (Kuziki  2011-05-20 23:35:32 +0800  16) import java.util.Map;
fa4f9b28 JFlowMonitor/src/Logic/History/MostVisitedSiteHistoryInfo.java (reyoung 2011-05-20 21:05:36 +0800  17) 
fa4f9b28 JFlowMonitor/src/Logic/History/MostVisitedSiteHistoryInfo.java (reyoung 2011-05-20 21:05:36 +0800  18) /**
fa4f9b28 JFlowMonitor/src/Logic/History/MostVisitedSiteHistoryInfo.java (reyoung 2011-05-20 21:05:36 +0800  19)  *
fa4f9b28 JFlowMonitor/src/Logic/History/MostVisitedSiteHistoryInfo.java (reyoung 2011-05-20 21:05:36 +0800  20)  * @author Reyoung
fa4f9b28 JFlowMonitor/src/Logic/History/MostVisitedSiteHistoryInfo.java (reyoung 2011-05-20 21:05:36 +0800  21)  */
93c6172e JFlowMonitor/src/Logic/History/MostFlowedSiteHistoryInfo.java  (Kuziki  2011-05-20 21:44:11 +0800  22) public class MostFlowedSiteHistoryInfo extends RawPacketHistoryInfo{
fa4f9b28 JFlowMonitor/src/Logic/History/MostVisitedSiteHistoryInfo.java (reyoung 2011-05-20 21:05:36 +0800  23) 
93c6172e JFlowMonitor/src/Logic/History/MostFlowedSiteHistoryInfo.java  (Kuziki  2011-05-20 21:44:11 +0800  24)     public List<String > Sites;
db444553 JFlowMonitor/src/Logic/History/MostFlowedSiteHistoryInfo.java  (Kuziki  2011-05-22 14:39:58 +0800  25)     public List<Integer> SiteFolws;
5bd10d29 JFlowMonitor/src/Logic/History/MostFlowedSiteHistoryInfo.java  (Kuziki  2011-05-20 23:35:32 +0800  26)     private int SiteNum;
5bd10d29 JFlowMonitor/src/Logic/History/MostFlowedSiteHistoryInfo.java  (Kuziki  2011-05-20 23:35:32 +0800  27)     private List<AUX_CLASS> l;
93c6172e JFlowMonitor/src/Logic/History/MostFlowedSiteHistoryInfo.java  (Kuziki  2011-05-20 21:44:11 +0800  28)     public MostFlowedSiteHistoryInfo(Date From,Date To,int N) {
fa4f9b28 JFlowMonitor/src/Logic/History/MostVisitedSiteHistoryInfo.java (reyoung 2011-05-20 21:05:36 +0800  29)         super(From,To);
5bd10d29 JFlowMonitor/src/Logic/History/MostFlowedSiteHistoryInfo.java  (Kuziki  2011-05-20 23:35:32 +0800  30)         Sites = new ArrayList<String>();
5bd10d29 JFlowMonitor/src/Logic/History/MostFlowedSiteHistoryInfo.java  (Kuziki  2011-05-20 23:35:32 +0800  31)         SiteNum = N;
fa4f9b28 JFlowMonitor/src/Logic/History/MostVisitedSiteHistoryInfo.java (reyoung 2011-05-20 21:05:36 +0800  32)     }
5bd10d29 JFlowMonitor/src/Logic/History/MostFlowedSiteHistoryInfo.java  (Kuziki  2011-05-20 23:35:32 +0800  33)     private Map<String,Integer> SiteMap;
fa4f9b28 JFlowMonitor/src/Logic/History/MostVisitedSiteHistoryInfo.java (reyoung 2011-05-20 21:05:36 +0800  34)     @Override
fa4f9b28 JFlowMonitor/src/Logic/History/MostVisitedSiteHistoryInfo.java (reyoung 2011-05-20 21:05:36 +0800  35)     protected void process(){
fa4f9b28 JFlowMonitor/src/Logic/History/MostVisitedSiteHistoryInfo.java (reyoung 2011-05-20 21:05:36 +0800  36)         super.process();
5bd10d29 JFlowMonitor/src/Logic/History/MostFlowedSiteHistoryInfo.java  (Kuziki  2011-05-20 23:35:32 +0800  37)         SiteMap = new HashMap<String,Integer>();
db444553 JFlowMonitor/src/Logic/History/MostFlowedSiteHistoryInfo.java  (Kuziki  2011-05-22 14:39:58 +0800  38)         SiteFolws = new ArrayList<Integer>();
5bd10d29 JFlowMonitor/src/Logic/History/MostFlowedSiteHistoryInfo.java  (Kuziki  2011-05-20 23:35:32 +0800  39)         l = new ArrayList<AUX_CLASS>();
5bd10d29 JFlowMonitor/src/Logic/History/MostFlowedSiteHistoryInfo.java  (Kuziki  2011-05-20 23:35:32 +0800  40)         getMap();
5bd10d29 JFlowMonitor/src/Logic/History/MostFlowedSiteHistoryInfo.java  (Kuziki  2011-05-20 23:35:32 +0800  41)         getLink();
5bd10d29 JFlowMonitor/src/Logic/History/MostFlowedSiteHistoryInfo.java  (Kuziki  2011-05-20 23:35:32 +0800  42)         getSites();
5bd10d29 JFlowMonitor/src/Logic/History/MostFlowedSiteHistoryInfo.java  (Kuziki  2011-05-20 23:35:32 +0800  43)     }
5bd10d29 JFlowMonitor/src/Logic/History/MostFlowedSiteHistoryInfo.java  (Kuziki  2011-05-20 23:35:32 +0800  44)     private void getMap()
5bd10d29 JFlowMonitor/src/Logic/History/MostFlowedSiteHistoryInfo.java  (Kuziki  2011-05-20 23:35:32 +0800  45)     {
5bd10d29 JFlowMonitor/src/Logic/History/MostFlowedSiteHistoryInfo.java  (Kuziki  2011-05-20 23:35:32 +0800  46)         for(IPacket p : Packets)
5bd10d29 JFlowMonitor/src/Logic/History/MostFlowedSiteHistoryInfo.java  (Kuziki  2011-05-20 23:35:32 +0800  47)         {
5bd10d29 JFlowMonitor/src/Logic/History/MostFlowedSiteHistoryInfo.java  (Kuziki  2011-05-20 23:35:32 +0800  48)             if(p.isUpload())
5bd10d29 JFlowMonitor/src/Logic/History/MostFlowedSiteHistoryInfo.java  (Kuziki  2011-05-20 23:35:32 +0800  49)             {
5bd10d29 JFlowMonitor/src/Logic/History/MostFlowedSiteHistoryInfo.java  (Kuziki  2011-05-20 23:35:32 +0800  50)                 if(SiteMap.containsKey(p.getDestAddressString()))
5bd10d29 JFlowMonitor/src/Logic/History/MostFlowedSiteHistoryInfo.java  (Kuziki  2011-05-20 23:35:32 +0800  51)                 {
5bd10d29 JFlowMonitor/src/Logic/History/MostFlowedSiteHistoryInfo.java  (Kuziki  2011-05-20 23:35:32 +0800  52)                     int temp = SiteMap.get(p.getDestAddressString());
5bd10d29 JFlowMonitor/src/Logic/History/MostFlowedSiteHistoryInfo.java  (Kuziki  2011-05-20 23:35:32 +0800  53)                     temp += p.getPacketLength();
5bd10d29 JFlowMonitor/src/Logic/History/MostFlowedSiteHistoryInfo.java  (Kuziki  2011-05-20 23:35:32 +0800  54)                     SiteMap.put(p.getDestAddressString(), temp);
5bd10d29 JFlowMonitor/src/Logic/History/MostFlowedSiteHistoryInfo.java  (Kuziki  2011-05-20 23:35:32 +0800  55)                 }
5bd10d29 JFlowMonitor/src/Logic/History/MostFlowedSiteHistoryInfo.java  (Kuziki  2011-05-20 23:35:32 +0800  56)                 else
5bd10d29 JFlowMonitor/src/Logic/History/MostFlowedSiteHistoryInfo.java  (Kuziki  2011-05-20 23:35:32 +0800  57)                 {
5bd10d29 JFlowMonitor/src/Logic/History/MostFlowedSiteHistoryInfo.java  (Kuziki  2011-05-20 23:35:32 +0800  58)                     SiteMap.put(p.getDestAddressString(), p.getPacketLength());
5bd10d29 JFlowMonitor/src/Logic/History/MostFlowedSiteHistoryInfo.java  (Kuziki  2011-05-20 23:35:32 +0800  59)                 }
5bd10d29 JFlowMonitor/src/Logic/History/MostFlowedSiteHistoryInfo.java  (Kuziki  2011-05-20 23:35:32 +0800  60)             }
5bd10d29 JFlowMonitor/src/Logic/History/MostFlowedSiteHistoryInfo.java  (Kuziki  2011-05-20 23:35:32 +0800  61)             else
5bd10d29 JFlowMonitor/src/Logic/History/MostFlowedSiteHistoryInfo.java  (Kuziki  2011-05-20 23:35:32 +0800  62)             {
5bd10d29 JFlowMonitor/src/Logic/History/MostFlowedSiteHistoryInfo.java  (Kuziki  2011-05-20 23:35:32 +0800  63)                 if(SiteMap.containsKey(p.getSourceAddressString()))
5bd10d29 JFlowMonitor/src/Logic/History/MostFlowedSiteHistoryInfo.java  (Kuziki  2011-05-20 23:35:32 +0800  64)                 {
5bd10d29 JFlowMonitor/src/Logic/History/MostFlowedSiteHistoryInfo.java  (Kuziki  2011-05-20 23:35:32 +0800  65)                     int temp = SiteMap.get(p.getSourceAddressString());
5bd10d29 JFlowMonitor/src/Logic/History/MostFlowedSiteHistoryInfo.java  (Kuziki  2011-05-20 23:35:32 +0800  66)                     temp += p.getPacketLength();
5bd10d29 JFlowMonitor/src/Logic/History/MostFlowedSiteHistoryInfo.java  (Kuziki  2011-05-20 23:35:32 +0800  67)                     SiteMap.put(p.getSourceAddressString(), temp);
5bd10d29 JFlowMonitor/src/Logic/History/MostFlowedSiteHistoryInfo.java  (Kuziki  2011-05-20 23:35:32 +0800  68)                 }
5bd10d29 JFlowMonitor/src/Logic/History/MostFlowedSiteHistoryInfo.java  (Kuziki  2011-05-20 23:35:32 +0800  69)                 else
5bd10d29 JFlowMonitor/src/Logic/History/MostFlowedSiteHistoryInfo.java  (Kuziki  2011-05-20 23:35:32 +0800  70)                 {
5bd10d29 JFlowMonitor/src/Logic/History/MostFlowedSiteHistoryInfo.java  (Kuziki  2011-05-20 23:35:32 +0800  71)                     SiteMap.put(p.getSourceAddressString(), p.getPacketLength());
5bd10d29 JFlowMonitor/src/Logic/History/MostFlowedSiteHistoryInfo.java  (Kuziki  2011-05-20 23:35:32 +0800  72)                 }
5bd10d29 JFlowMonitor/src/Logic/History/MostFlowedSiteHistoryInfo.java  (Kuziki  2011-05-20 23:35:32 +0800  73)             }
5bd10d29 JFlowMonitor/src/Logic/History/MostFlowedSiteHistoryInfo.java  (Kuziki  2011-05-20 23:35:32 +0800  74)         }
5bd10d29 JFlowMonitor/src/Logic/History/MostFlowedSiteHistoryInfo.java  (Kuziki  2011-05-20 23:35:32 +0800  75)     }
5bd10d29 JFlowMonitor/src/Logic/History/MostFlowedSiteHistoryInfo.java  (Kuziki  2011-05-20 23:35:32 +0800  76)     class AUX_CLASS{
5bd10d29 JFlowMonitor/src/Logic/History/MostFlowedSiteHistoryInfo.java  (Kuziki  2011-05-20 23:35:32 +0800  77)         public int Times;
5bd10d29 JFlowMonitor/src/Logic/History/MostFlowedSiteHistoryInfo.java  (Kuziki  2011-05-20 23:35:32 +0800  78)         public String Site;
5bd10d29 JFlowMonitor/src/Logic/History/MostFlowedSiteHistoryInfo.java  (Kuziki  2011-05-20 23:35:32 +0800  79)         public AUX_CLASS(String site,int time)
5bd10d29 JFlowMonitor/src/Logic/History/MostFlowedSiteHistoryInfo.java  (Kuziki  2011-05-20 23:35:32 +0800  80)         {
5bd10d29 JFlowMonitor/src/Logic/History/MostFlowedSiteHistoryInfo.java  (Kuziki  2011-05-20 23:35:32 +0800  81)             Site = site;
5bd10d29 JFlowMonitor/src/Logic/History/MostFlowedSiteHistoryInfo.java  (Kuziki  2011-05-20 23:35:32 +0800  82)             Times = time;
5bd10d29 JFlowMonitor/src/Logic/History/MostFlowedSiteHistoryInfo.java  (Kuziki  2011-05-20 23:35:32 +0800  83)         }
5bd10d29 JFlowMonitor/src/Logic/History/MostFlowedSiteHistoryInfo.java  (Kuziki  2011-05-20 23:35:32 +0800  84)     }
5bd10d29 JFlowMonitor/src/Logic/History/MostFlowedSiteHistoryInfo.java  (Kuziki  2011-05-20 23:35:32 +0800  85)     private void getLink()
5bd10d29 JFlowMonitor/src/Logic/History/MostFlowedSiteHistoryInfo.java  (Kuziki  2011-05-20 23:35:32 +0800  86)     {
5bd10d29 JFlowMonitor/src/Logic/History/MostFlowedSiteHistoryInfo.java  (Kuziki  2011-05-20 23:35:32 +0800  87)         for(String site : SiteMap.keySet())
5bd10d29 JFlowMonitor/src/Logic/History/MostFlowedSiteHistoryInfo.java  (Kuziki  2011-05-20 23:35:32 +0800  88)         {
5bd10d29 JFlowMonitor/src/Logic/History/MostFlowedSiteHistoryInfo.java  (Kuziki  2011-05-20 23:35:32 +0800  89)             l.add(new AUX_CLASS(site,SiteMap.get(site)));
5bd10d29 JFlowMonitor/src/Logic/History/MostFlowedSiteHistoryInfo.java  (Kuziki  2011-05-20 23:35:32 +0800  90)         }
5bd10d29 JFlowMonitor/src/Logic/History/MostFlowedSiteHistoryInfo.java  (Kuziki  2011-05-20 23:35:32 +0800  91)         java.util.Collections.sort(l, new Comparator<AUX_CLASS>() {
5bd10d29 JFlowMonitor/src/Logic/History/MostFlowedSiteHistoryInfo.java  (Kuziki  2011-05-20 23:35:32 +0800  92)             public int compare(AUX_CLASS o1, AUX_CLASS o2) {
5bd10d29 JFlowMonitor/src/Logic/History/MostFlowedSiteHistoryInfo.java  (Kuziki  2011-05-20 23:35:32 +0800  93)                 if(o1.Times > o2.Times)return 1;
5bd10d29 JFlowMonitor/src/Logic/History/MostFlowedSiteHistoryInfo.java  (Kuziki  2011-05-20 23:35:32 +0800  94)                 else if(o1.Times == o2.Times)return 0;
5bd10d29 JFlowMonitor/src/Logic/History/MostFlowedSiteHistoryInfo.java  (Kuziki  2011-05-20 23:35:32 +0800  95)                 else return -1;
5bd10d29 JFlowMonitor/src/Logic/History/MostFlowedSiteHistoryInfo.java  (Kuziki  2011-05-20 23:35:32 +0800  96)             }
5bd10d29 JFlowMonitor/src/Logic/History/MostFlowedSiteHistoryInfo.java  (Kuziki  2011-05-20 23:35:32 +0800  97)         });
5bd10d29 JFlowMonitor/src/Logic/History/MostFlowedSiteHistoryInfo.java  (Kuziki  2011-05-20 23:35:32 +0800  98)     }
5bd10d29 JFlowMonitor/src/Logic/History/MostFlowedSiteHistoryInfo.java  (Kuziki  2011-05-20 23:35:32 +0800  99)     private void getSites()
5bd10d29 JFlowMonitor/src/Logic/History/MostFlowedSiteHistoryInfo.java  (Kuziki  2011-05-20 23:35:32 +0800 100)     {
5bd10d29 JFlowMonitor/src/Logic/History/MostFlowedSiteHistoryInfo.java  (Kuziki  2011-05-20 23:35:32 +0800 101)         if(!l.isEmpty())
5bd10d29 JFlowMonitor/src/Logic/History/MostFlowedSiteHistoryInfo.java  (Kuziki  2011-05-20 23:35:32 +0800 102)         {
5bd10d29 JFlowMonitor/src/Logic/History/MostFlowedSiteHistoryInfo.java  (Kuziki  2011-05-20 23:35:32 +0800 103)             for(AUX_CLASS e : l)
5bd10d29 JFlowMonitor/src/Logic/History/MostFlowedSiteHistoryInfo.java  (Kuziki  2011-05-20 23:35:32 +0800 104)             {
5bd10d29 JFlowMonitor/src/Logic/History/MostFlowedSiteHistoryInfo.java  (Kuziki  2011-05-20 23:35:32 +0800 105)                 if(l.indexOf(e) < SiteNum)
5bd10d29 JFlowMonitor/src/Logic/History/MostFlowedSiteHistoryInfo.java  (Kuziki  2011-05-20 23:35:32 +0800 106)                 {
5bd10d29 JFlowMonitor/src/Logic/History/MostFlowedSiteHistoryInfo.java  (Kuziki  2011-05-20 23:35:32 +0800 107)                     Sites.add(e.Site);
db444553 JFlowMonitor/src/Logic/History/MostFlowedSiteHistoryInfo.java  (Kuziki  2011-05-22 14:39:58 +0800 108)                     SiteFolws.add(e.Times);
5bd10d29 JFlowMonitor/src/Logic/History/MostFlowedSiteHistoryInfo.java  (Kuziki  2011-05-20 23:35:32 +0800 109)                 }
5bd10d29 JFlowMonitor/src/Logic/History/MostFlowedSiteHistoryInfo.java  (Kuziki  2011-05-20 23:35:32 +0800 110)                 else break;
5bd10d29 JFlowMonitor/src/Logic/History/MostFlowedSiteHistoryInfo.java  (Kuziki  2011-05-20 23:35:32 +0800 111)             }
5bd10d29 JFlowMonitor/src/Logic/History/MostFlowedSiteHistoryInfo.java  (Kuziki  2011-05-20 23:35:32 +0800 112)         }
fa4f9b28 JFlowMonitor/src/Logic/History/MostVisitedSiteHistoryInfo.java (reyoung 2011-05-20 21:05:36 +0800 113)     }
fa4f9b28 JFlowMonitor/src/Logic/History/MostVisitedSiteHistoryInfo.java (reyoung 2011-05-20 21:05:36 +0800 114) }
4a71e90b (reyoung 2011-05-20 22:51:52 +0800  1) /*
4a71e90b (reyoung 2011-05-20 22:51:52 +0800  2)  * This file is written by reyoung, reyoung@126.com.
4a71e90b (reyoung 2011-05-20 22:51:52 +0800  3)  */
4a71e90b (reyoung 2011-05-20 22:51:52 +0800  4) 
4a71e90b (reyoung 2011-05-20 22:51:52 +0800  5) package Logic.History;
4a71e90b (reyoung 2011-05-20 22:51:52 +0800  6) 
92dcc5d8 (reyoung 2011-05-21 17:39:59 +0800  7) import Network.IPacket;
2066684d (reyoung 2011-05-21 17:50:30 +0800  8) import java.net.Inet4Address;
2066684d (reyoung 2011-05-21 17:50:30 +0800  9) import java.net.InetAddress;
2066684d (reyoung 2011-05-21 17:50:30 +0800 10) import java.net.UnknownHostException;
4a71e90b (reyoung 2011-05-20 22:51:52 +0800 11) import java.util.ArrayList;
92dcc5d8 (reyoung 2011-05-21 17:39:59 +0800 12) import java.util.Collections;
92dcc5d8 (reyoung 2011-05-21 17:39:59 +0800 13) import java.util.Comparator;
4a71e90b (reyoung 2011-05-20 22:51:52 +0800 14) import java.util.Date;
92dcc5d8 (reyoung 2011-05-21 17:39:59 +0800 15) import java.util.HashMap;
4a71e90b (reyoung 2011-05-20 22:51:52 +0800 16) import java.util.LinkedList;
4a71e90b (reyoung 2011-05-20 22:51:52 +0800 17) import java.util.List;
92dcc5d8 (reyoung 2011-05-21 17:39:59 +0800 18) import java.util.Map;
2066684d (reyoung 2011-05-21 17:50:30 +0800 19) import java.util.logging.Level;
2066684d (reyoung 2011-05-21 17:50:30 +0800 20) import java.util.logging.Logger;
4a71e90b (reyoung 2011-05-20 22:51:52 +0800 21) 
4a71e90b (reyoung 2011-05-20 22:51:52 +0800 22) /**
4a71e90b (reyoung 2011-05-20 22:51:52 +0800 23)  *
4a71e90b (reyoung 2011-05-20 22:51:52 +0800 24)  * @author Reyoung
4a71e90b (reyoung 2011-05-20 22:51:52 +0800 25)  */
4a71e90b (reyoung 2011-05-20 22:51:52 +0800 26) public class MostVisitedSiteHistoryInfo extends ProtocolHistoryInfo{
4a71e90b (reyoung 2011-05-20 22:51:52 +0800 27)     public List<String > MostVisitedSite;
4a71e90b (reyoung 2011-05-20 22:51:52 +0800 28)     private int m_limit;
4a71e90b (reyoung 2011-05-20 22:51:52 +0800 29)     public MostVisitedSiteHistoryInfo(Date From,Date To,int N){
4a71e90b (reyoung 2011-05-20 22:51:52 +0800 30)         super(From, To, HTTP); //! 只使用HTTP包
4a71e90b (reyoung 2011-05-20 22:51:52 +0800 31)         m_limit = N;
4a71e90b (reyoung 2011-05-20 22:51:52 +0800 32)     }
92dcc5d8 (reyoung 2011-05-21 17:39:59 +0800 33)     class __AUX_Class{
92dcc5d8 (reyoung 2011-05-21 17:39:59 +0800 34)         public int site;
92dcc5d8 (reyoung 2011-05-21 17:39:59 +0800 35)         public int times;
92dcc5d8 (reyoung 2011-05-21 17:39:59 +0800 36)     }
4a71e90b (reyoung 2011-05-20 22:51:52 +0800 37)     @Override
4a71e90b (reyoung 2011-05-20 22:51:52 +0800 38)     protected void process(){
4a71e90b (reyoung 2011-05-20 22:51:52 +0800 39)         super.process();
4a71e90b (reyoung 2011-05-20 22:51:52 +0800 40)         MostVisitedSite = new ArrayList<String>();
92dcc5d8 (reyoung 2011-05-21 17:39:59 +0800 41)         Map<Integer , Integer> ipMap = new HashMap<Integer, Integer>();
92dcc5d8 (reyoung 2011-05-21 17:39:59 +0800 42)         for(IPacket p : this.ProtocolPacket){
92dcc5d8 (reyoung 2011-05-21 17:39:59 +0800 43)             if(p.isUpload()){
92dcc5d8 (reyoung 2011-05-21 17:39:59 +0800 44)                 if(ipMap.containsKey(p.getDestAddress())){
92dcc5d8 (reyoung 2011-05-21 17:39:59 +0800 45)                     Integer value = ipMap.get(p.getDestAddress())+1;
92dcc5d8 (reyoung 2011-05-21 17:39:59 +0800 46)                     ipMap.put(p.getDestAddress(), value);
92dcc5d8 (reyoung 2011-05-21 17:39:59 +0800 47)                 }else{
92dcc5d8 (reyoung 2011-05-21 17:39:59 +0800 48)                     ipMap.put(p.getDestAddress(), 1);
92dcc5d8 (reyoung 2011-05-21 17:39:59 +0800 49)                 }
92dcc5d8 (reyoung 2011-05-21 17:39:59 +0800 50)             }
92dcc5d8 (reyoung 2011-05-21 17:39:59 +0800 51)         }
92dcc5d8 (reyoung 2011-05-21 17:39:59 +0800 52)         List<__AUX_Class> auxlist = new ArrayList<__AUX_Class>();
92dcc5d8 (reyoung 2011-05-21 17:39:59 +0800 53)         for(Map.Entry<Integer,Integer> p: ipMap.entrySet()){
92dcc5d8 (reyoung 2011-05-21 17:39:59 +0800 54)             __AUX_Class c = new __AUX_Class();
92dcc5d8 (reyoung 2011-05-21 17:39:59 +0800 55)             c.site = p.getKey();
92dcc5d8 (reyoung 2011-05-21 17:39:59 +0800 56)             c.times = p.getValue();
92dcc5d8 (reyoung 2011-05-21 17:39:59 +0800 57)             auxlist.add(c);
92dcc5d8 (reyoung 2011-05-21 17:39:59 +0800 58)         }
92dcc5d8 (reyoung 2011-05-21 17:39:59 +0800 59)         Collections.sort(auxlist, new Comparator() {
92dcc5d8 (reyoung 2011-05-21 17:39:59 +0800 60)             public int compare(Object o1, Object o2) {
92dcc5d8 (reyoung 2011-05-21 17:39:59 +0800 61)                 __AUX_Class c1 = (__AUX_Class)o1;
92dcc5d8 (reyoung 2011-05-21 17:39:59 +0800 62)                 __AUX_Class c2 = (__AUX_Class)o2;
92dcc5d8 (reyoung 2011-05-21 17:39:59 +0800 63)                 if(c1.times<c2.times){
92dcc5d8 (reyoung 2011-05-21 17:39:59 +0800 64)                     return 1;
92dcc5d8 (reyoung 2011-05-21 17:39:59 +0800 65)                 }else if(c1.times>c2.times){
92dcc5d8 (reyoung 2011-05-21 17:39:59 +0800 66)                     return -1;
92dcc5d8 (reyoung 2011-05-21 17:39:59 +0800 67)                 }else{
92dcc5d8 (reyoung 2011-05-21 17:39:59 +0800 68)                     return 0;
92dcc5d8 (reyoung 2011-05-21 17:39:59 +0800 69)                 }
92dcc5d8 (reyoung 2011-05-21 17:39:59 +0800 70)             }
92dcc5d8 (reyoung 2011-05-21 17:39:59 +0800 71)         });
92dcc5d8 (reyoung 2011-05-21 17:39:59 +0800 72)         for(int i=0;i< (m_limit<auxlist.size()?m_limit:auxlist.size());++i){
2066684d (reyoung 2011-05-21 17:50:30 +0800 73)             int ip = auxlist.get(i).site;
2066684d (reyoung 2011-05-21 17:50:30 +0800 74)             byte [] ipv4 = convertIp(ip);
2066684d (reyoung 2011-05-21 17:50:30 +0800 75)             try {
2066684d (reyoung 2011-05-21 17:50:30 +0800 76)                 InetAddress addr = Inet4Address.getByAddress(ipv4);
2066684d (reyoung 2011-05-21 17:50:30 +0800 77)                 MostVisitedSite.add(addr.toString());
2066684d (reyoung 2011-05-21 17:50:30 +0800 78)             } catch (UnknownHostException ex) {
2066684d (reyoung 2011-05-21 17:50:30 +0800 79)                 Logger.getLogger(MostVisitedSiteHistoryInfo.class.getName()).log(Level.SEVERE, null, ex);
2066684d (reyoung 2011-05-21 17:50:30 +0800 80)             }
2066684d (reyoung 2011-05-21 17:50:30 +0800 81) 
92dcc5d8 (reyoung 2011-05-21 17:39:59 +0800 82)         }
4a71e90b (reyoung 2011-05-20 22:51:52 +0800 83)     }
2066684d (reyoung 2011-05-21 17:50:30 +0800 84) 
2066684d (reyoung 2011-05-21 17:50:30 +0800 85)     static byte [] convertIp(int ipv4){
2066684d (reyoung 2011-05-21 17:50:30 +0800 86)         byte[] retv = new byte[4];
2066684d (reyoung 2011-05-21 17:50:30 +0800 87)         retv[0] = (byte) (((ipv4 & (0xff000000)) >> 24) & 0x000000ff);
2066684d (reyoung 2011-05-21 17:50:30 +0800 88)         retv[1] = (byte) ((ipv4&0x00ff0000)>>16);
2066684d (reyoung 2011-05-21 17:50:30 +0800 89)         retv[2] = (byte) ((ipv4&0x0000ff00)>>8);
2066684d (reyoung 2011-05-21 17:50:30 +0800 90)         retv[3] = (byte) (ipv4&0x000000ff);
2066684d (reyoung 2011-05-21 17:50:30 +0800 91)         return  retv;
2066684d (reyoung 2011-05-21 17:50:30 +0800 92)     }
4a71e90b (reyoung 2011-05-20 22:51:52 +0800 93) }
ef727dc9 (reyoung 2011-05-24 16:00:45 +0800  1) /*
ef727dc9 (reyoung 2011-05-24 16:00:45 +0800  2)  * This file is written by reyoung, reyoung@126.com.
ef727dc9 (reyoung 2011-05-24 16:00:45 +0800  3)  */
ef727dc9 (reyoung 2011-05-24 16:00:45 +0800  4) 
ef727dc9 (reyoung 2011-05-24 16:00:45 +0800  5) package Logic.History;
ef727dc9 (reyoung 2011-05-24 16:00:45 +0800  6) 
ef727dc9 (reyoung 2011-05-24 16:00:45 +0800  7) /**
ef727dc9 (reyoung 2011-05-24 16:00:45 +0800  8)  *
ef727dc9 (reyoung 2011-05-24 16:00:45 +0800  9)  * @author Reyoung
ef727dc9 (reyoung 2011-05-24 16:00:45 +0800 10)  */
ef727dc9 (reyoung 2011-05-24 16:00:45 +0800 11) public interface ProcessCompleteListener {
ef727dc9 (reyoung 2011-05-24 16:00:45 +0800 12)     void onProcessComplete(HistoryInfo info);
ef727dc9 (reyoung 2011-05-24 16:00:45 +0800 13) }
ef727dc9 (reyoung 2011-05-24 16:00:45 +0800  1) /*
ef727dc9 (reyoung 2011-05-24 16:00:45 +0800  2)  * This file is written by reyoung, reyoung@126.com.
ef727dc9 (reyoung 2011-05-24 16:00:45 +0800  3)  */
ef727dc9 (reyoung 2011-05-24 16:00:45 +0800  4) 
ef727dc9 (reyoung 2011-05-24 16:00:45 +0800  5) package Logic.History;
ef727dc9 (reyoung 2011-05-24 16:00:45 +0800  6) 
ef727dc9 (reyoung 2011-05-24 16:00:45 +0800  7) /**
ef727dc9 (reyoung 2011-05-24 16:00:45 +0800  8)  *
ef727dc9 (reyoung 2011-05-24 16:00:45 +0800  9)  * @author Reyoung
ef727dc9 (reyoung 2011-05-24 16:00:45 +0800 10)  */
ef727dc9 (reyoung 2011-05-24 16:00:45 +0800 11) public class ProcessThread extends Thread{
ef727dc9 (reyoung 2011-05-24 16:00:45 +0800 12)     ProcessCompleteListener m_listener;
ef727dc9 (reyoung 2011-05-24 16:00:45 +0800 13)     HistoryInfo             m_info;
ef727dc9 (reyoung 2011-05-24 16:00:45 +0800 14) 
ef727dc9 (reyoung 2011-05-24 16:00:45 +0800 15)     public ProcessThread(ProcessCompleteListener lis,HistoryInfo h){
ef727dc9 (reyoung 2011-05-24 16:00:45 +0800 16)         m_listener = lis;
ef727dc9 (reyoung 2011-05-24 16:00:45 +0800 17)         m_info = h;
ef727dc9 (reyoung 2011-05-24 16:00:45 +0800 18)     }
ef727dc9 (reyoung 2011-05-24 16:00:45 +0800 19) 
ef727dc9 (reyoung 2011-05-24 16:00:45 +0800 20)     @Override
ef727dc9 (reyoung 2011-05-24 16:00:45 +0800 21)     public void run(){
ef727dc9 (reyoung 2011-05-24 16:00:45 +0800 22)         m_info.process();
ef727dc9 (reyoung 2011-05-24 16:00:45 +0800 23)         synchronized(this){
ef727dc9 (reyoung 2011-05-24 16:00:45 +0800 24)             m_listener.onProcessComplete(m_info);
ef727dc9 (reyoung 2011-05-24 16:00:45 +0800 25)         }
ef727dc9 (reyoung 2011-05-24 16:00:45 +0800 26)     }
ef727dc9 (reyoung 2011-05-24 16:00:45 +0800 27) }
4a71e90b (reyoung 2011-05-20 22:51:52 +0800  1) /*
4a71e90b (reyoung 2011-05-20 22:51:52 +0800  2)  * This file is written by reyoung, reyoung@126.com.
4a71e90b (reyoung 2011-05-20 22:51:52 +0800  3)  */
4a71e90b (reyoung 2011-05-20 22:51:52 +0800  4) 
4a71e90b (reyoung 2011-05-20 22:51:52 +0800  5) package Logic.History;
4a71e90b (reyoung 2011-05-20 22:51:52 +0800  6) 
4a71e90b (reyoung 2011-05-20 22:51:52 +0800  7) import Network.IPacket;
4a71e90b (reyoung 2011-05-20 22:51:52 +0800  8) 
4a71e90b (reyoung 2011-05-20 22:51:52 +0800  9) import java.util.ArrayList;
4a71e90b (reyoung 2011-05-20 22:51:52 +0800 10) import java.util.Date;
4a71e90b (reyoung 2011-05-20 22:51:52 +0800 11) import java.util.List;
4a71e90b (reyoung 2011-05-20 22:51:52 +0800 12) 
4a71e90b (reyoung 2011-05-20 22:51:52 +0800 13) /**
4a71e90b (reyoung 2011-05-20 22:51:52 +0800 14)  *
4a71e90b (reyoung 2011-05-20 22:51:52 +0800 15)  * @author Reyoung
4a71e90b (reyoung 2011-05-20 22:51:52 +0800 16)  */
4a71e90b (reyoung 2011-05-20 22:51:52 +0800 17) public class ProtocolHistoryInfo extends RawPacketHistoryInfo{
4a71e90b (reyoung 2011-05-20 22:51:52 +0800 18)     public List<IPacket > ProtocolPacket;
4a71e90b (reyoung 2011-05-20 22:51:52 +0800 19)     public final static int HTTP = Network.Packet.PacketFlag_HTTP;
4a71e90b (reyoung 2011-05-20 22:51:52 +0800 20)     public final static int TCP  = Network.Packet.PacketFlag_TCP;
4a71e90b (reyoung 2011-05-20 22:51:52 +0800 21)     public final static int UDP = Network.Packet.PacketFlag_UDP;
4a71e90b (reyoung 2011-05-20 22:51:52 +0800 22)     public final static int ETHERNET = Network.Packet.PacketFlag_Ethernet;
4a71e90b (reyoung 2011-05-20 22:51:52 +0800 23) 
4a71e90b (reyoung 2011-05-20 22:51:52 +0800 24) //    public final static int FTP = 16; // 未实现
4a71e90b (reyoung 2011-05-20 22:51:52 +0800 25)     private int m_protocol ;
4a71e90b (reyoung 2011-05-20 22:51:52 +0800 26) 
4a71e90b (reyoung 2011-05-20 22:51:52 +0800 27)     public ProtocolHistoryInfo(Date From,Date To,int Protocol){
4a71e90b (reyoung 2011-05-20 22:51:52 +0800 28)         super(From, To);
4a71e90b (reyoung 2011-05-20 22:51:52 +0800 29)         ProtocolPacket = new ArrayList<IPacket>();
4a71e90b (reyoung 2011-05-20 22:51:52 +0800 30)         m_protocol = Protocol;
4a71e90b (reyoung 2011-05-20 22:51:52 +0800 31)     }
4a71e90b (reyoung 2011-05-20 22:51:52 +0800 32)     @Override
4a71e90b (reyoung 2011-05-20 22:51:52 +0800 33)     protected void process(){
4a71e90b (reyoung 2011-05-20 22:51:52 +0800 34)         super.process();
4a71e90b (reyoung 2011-05-20 22:51:52 +0800 35)         if(false){  // 为其他情况预留的if语句
4a71e90b (reyoung 2011-05-20 22:51:52 +0800 36) 
4a71e90b (reyoung 2011-05-20 22:51:52 +0800 37)         }else{
4a71e90b (reyoung 2011-05-20 22:51:52 +0800 38)             for(IPacket p : this.Packets){
4a71e90b (reyoung 2011-05-20 22:51:52 +0800 39)                 int flag = p.getPacketFlag();
4a71e90b (reyoung 2011-05-20 22:51:52 +0800 40)                 if(( m_protocol&flag )!=0){
4a71e90b (reyoung 2011-05-20 22:51:52 +0800 41)                     ProtocolPacket.add(p);
4a71e90b (reyoung 2011-05-20 22:51:52 +0800 42)                 }
4a71e90b (reyoung 2011-05-20 22:51:52 +0800 43)             }
4a71e90b (reyoung 2011-05-20 22:51:52 +0800 44)         }
4a71e90b (reyoung 2011-05-20 22:51:52 +0800 45)     }
4a71e90b (reyoung 2011-05-20 22:51:52 +0800 46) }
fa4f9b28 (reyoung 2011-05-20 21:05:36 +0800  1) /*
fa4f9b28 (reyoung 2011-05-20 21:05:36 +0800  2)  * This file is written by reyoung, reyoung@126.com.
fa4f9b28 (reyoung 2011-05-20 21:05:36 +0800  3)  */
fa4f9b28 (reyoung 2011-05-20 21:05:36 +0800  4) 
fa4f9b28 (reyoung 2011-05-20 21:05:36 +0800  5) package Logic.History;
fa4f9b28 (reyoung 2011-05-20 21:05:36 +0800  6) 
fa4f9b28 (reyoung 2011-05-20 21:05:36 +0800  7) import Database.Database;
fa4f9b28 (reyoung 2011-05-20 21:05:36 +0800  8) import Network.IPacket;
fa4f9b28 (reyoung 2011-05-20 21:05:36 +0800  9) import java.sql.SQLException;
fa4f9b28 (reyoung 2011-05-20 21:05:36 +0800 10) import java.util.Date;
fa4f9b28 (reyoung 2011-05-20 21:05:36 +0800 11) import java.util.List;
fa4f9b28 (reyoung 2011-05-20 21:05:36 +0800 12) import java.util.logging.Level;
fa4f9b28 (reyoung 2011-05-20 21:05:36 +0800 13) import java.util.logging.Logger;
fa4f9b28 (reyoung 2011-05-20 21:05:36 +0800 14) 
fa4f9b28 (reyoung 2011-05-20 21:05:36 +0800 15) /**
fa4f9b28 (reyoung 2011-05-20 21:05:36 +0800 16)  *
fa4f9b28 (reyoung 2011-05-20 21:05:36 +0800 17)  * @author Reyoung
fa4f9b28 (reyoung 2011-05-20 21:05:36 +0800 18)  */
fa4f9b28 (reyoung 2011-05-20 21:05:36 +0800 19) public class RawPacketHistoryInfo extends HistoryInfo {
fa4f9b28 (reyoung 2011-05-20 21:05:36 +0800 20)     public List<IPacket> Packets;
fa4f9b28 (reyoung 2011-05-20 21:05:36 +0800 21)     public RawPacketHistoryInfo(Date From ,Date To){
fa4f9b28 (reyoung 2011-05-20 21:05:36 +0800 22)         super(From,To);
fa4f9b28 (reyoung 2011-05-20 21:05:36 +0800 23)     }
fa4f9b28 (reyoung 2011-05-20 21:05:36 +0800 24)     
fa4f9b28 (reyoung 2011-05-20 21:05:36 +0800 25)     @Override
fa4f9b28 (reyoung 2011-05-20 21:05:36 +0800 26)     protected void process() {
fa4f9b28 (reyoung 2011-05-20 21:05:36 +0800 27)         try {
fa4f9b28 (reyoung 2011-05-20 21:05:36 +0800 28)             Packets = Database.instance().getPacket(FromDate, ToDate);
fa4f9b28 (reyoung 2011-05-20 21:05:36 +0800 29)         } catch (SQLException ex) {
fa4f9b28 (reyoung 2011-05-20 21:05:36 +0800 30)             Logger.getLogger(RawPacketHistoryInfo.class.getName()).log(Level.SEVERE, null, ex);
fa4f9b28 (reyoung 2011-05-20 21:05:36 +0800 31)         }
fa4f9b28 (reyoung 2011-05-20 21:05:36 +0800 32)     }
fa4f9b28 (reyoung 2011-05-20 21:05:36 +0800 33) }
255d040e (reyoung 2011-05-26 20:55:35 +0800  1) /*
255d040e (reyoung 2011-05-26 20:55:35 +0800  2)  * This file is written by reyoung, reyoung@126.com.
255d040e (reyoung 2011-05-26 20:55:35 +0800  3)  */
255d040e (reyoung 2011-05-26 20:55:35 +0800  4) package Logic.History;
255d040e (reyoung 2011-05-26 20:55:35 +0800  5) 
255d040e (reyoung 2011-05-26 20:55:35 +0800  6) import Network.IPacket;
255d040e (reyoung 2011-05-26 20:55:35 +0800  7) import java.util.Date;
255d040e (reyoung 2011-05-26 20:55:35 +0800  8) 
255d040e (reyoung 2011-05-26 20:55:35 +0800  9) /**
255d040e (reyoung 2011-05-26 20:55:35 +0800 10)  *
255d040e (reyoung 2011-05-26 20:55:35 +0800 11)  * @author Reyoung
255d040e (reyoung 2011-05-26 20:55:35 +0800 12)  */
255d040e (reyoung 2011-05-26 20:55:35 +0800 13) public class TimeAttributeHistoryInfo extends RawPacketHistoryInfo {
255d040e (reyoung 2011-05-26 20:55:35 +0800 14)     public long[] TimeBytes;
255d040e (reyoung 2011-05-26 20:55:35 +0800 15)     public TimeAttributeHistoryInfo(Date From, Date To) {
255d040e (reyoung 2011-05-26 20:55:35 +0800 16)         super(From, To);
255d040e (reyoung 2011-05-26 20:55:35 +0800 17)         TimeBytes = new long[24];
255d040e (reyoung 2011-05-26 20:55:35 +0800 18)     }
255d040e (reyoung 2011-05-26 20:55:35 +0800 19)     @Override
255d040e (reyoung 2011-05-26 20:55:35 +0800 20)     public void process() {
255d040e (reyoung 2011-05-26 20:55:35 +0800 21)         super.process();
255d040e (reyoung 2011-05-26 20:55:35 +0800 22)         for (int i = 0; i < TimeBytes.length; ++i) {
255d040e (reyoung 2011-05-26 20:55:35 +0800 23)             TimeBytes[i] = 0;
255d040e (reyoung 2011-05-26 20:55:35 +0800 24)         }
255d040e (reyoung 2011-05-26 20:55:35 +0800 25)         for (IPacket p : this.Packets) {
255d040e (reyoung 2011-05-26 20:55:35 +0800 26)             int l = p.getPacketLength();
255d040e (reyoung 2011-05-26 20:55:35 +0800 27)             Date d = p.getPacketRecvTime();
255d040e (reyoung 2011-05-26 20:55:35 +0800 28)             TimeBytes[d.getHours()]+=l;
255d040e (reyoung 2011-05-26 20:55:35 +0800 29)         }
255d040e (reyoung 2011-05-26 20:55:35 +0800 30)     }
255d040e (reyoung 2011-05-26 20:55:35 +0800 31) }
099251f2 (reyoung 2011-05-06 21:04:39 +0800  1) /*
099251f2 (reyoung 2011-05-06 21:04:39 +0800  2)  * This file is written by reyoung, reyoung@126.com.
099251f2 (reyoung 2011-05-06 21:04:39 +0800  3)  */
099251f2 (reyoung 2011-05-06 21:04:39 +0800  4) 
099251f2 (reyoung 2011-05-06 21:04:39 +0800  5) package Logic.PacketPool;
099251f2 (reyoung 2011-05-06 21:04:39 +0800  6) 
099251f2 (reyoung 2011-05-06 21:04:39 +0800  7) /**
099251f2 (reyoung 2011-05-06 21:04:39 +0800  8)  *
099251f2 (reyoung 2011-05-06 21:04:39 +0800  9)  * @author Reyoung
099251f2 (reyoung 2011-05-06 21:04:39 +0800 10)  */
099251f2 (reyoung 2011-05-06 21:04:39 +0800 11) public interface IPacketPool {
099251f2 (reyoung 2011-05-06 21:04:39 +0800 12)     public void addPacketPoolListener(IPacketPoolEventListener lis);
099251f2 (reyoung 2011-05-06 21:04:39 +0800 13)     public void setTimerInterval(int tim);
099251f2 (reyoung 2011-05-06 21:04:39 +0800 14)     public void forceRefresh();
099251f2 (reyoung 2011-05-06 21:04:39 +0800 15) }
099251f2 (reyoung 2011-05-06 21:04:39 +0800  1) /*
099251f2 (reyoung 2011-05-06 21:04:39 +0800  2)  * This file is written by reyoung, reyoung@126.com.
099251f2 (reyoung 2011-05-06 21:04:39 +0800  3)  */
099251f2 (reyoung 2011-05-06 21:04:39 +0800  4) 
099251f2 (reyoung 2011-05-06 21:04:39 +0800  5) package Logic.PacketPool;
099251f2 (reyoung 2011-05-06 21:04:39 +0800  6) 
099251f2 (reyoung 2011-05-06 21:04:39 +0800  7) import java.util.List;
099251f2 (reyoung 2011-05-06 21:04:39 +0800  8) 
099251f2 (reyoung 2011-05-06 21:04:39 +0800  9) 
099251f2 (reyoung 2011-05-06 21:04:39 +0800 10) 
6f062edf (reyoung 2011-05-06 22:08:00 +0800 11) 
099251f2 (reyoung 2011-05-06 21:04:39 +0800 12) /**
6f062edf (reyoung 2011-05-06 22:08:00 +0800 13)  * 这个类只可以在IPacketPoolEventListener的时间中出现，如果需要接受这个类
6f062edf (reyoung 2011-05-06 22:08:00 +0800 14)  * 需要继承自IPacketPoolEventListener
099251f2 (reyoung 2011-05-06 21:04:39 +0800 15)  * @author Reyoung
099251f2 (reyoung 2011-05-06 21:04:39 +0800 16)  */
099251f2 (reyoung 2011-05-06 21:04:39 +0800 17) public interface IPacketPoolEvent {
6f062edf (reyoung 2011-05-06 22:08:00 +0800 18)     /**
6f062edf (reyoung 2011-05-06 22:08:00 +0800 19)      * 获得内网上传数度
6f062edf (reyoung 2011-05-06 22:08:00 +0800 20)      * @return 单位 byte per second
6f062edf (reyoung 2011-05-06 22:08:00 +0800 21)      */
99723502 (reyoung 2011-05-06 21:57:34 +0800 22)     public double getInnerUploadSpeed();
6f062edf (reyoung 2011-05-06 22:08:00 +0800 23) 
6f062edf (reyoung 2011-05-06 22:08:00 +0800 24)     /**
6f062edf (reyoung 2011-05-06 22:08:00 +0800 25)      * 获得外网上传速度
6f062edf (reyoung 2011-05-06 22:08:00 +0800 26)      * @return 单位 byte per second
6f062edf (reyoung 2011-05-06 22:08:00 +0800 27)      */
99723502 (reyoung 2011-05-06 21:57:34 +0800 28)     public double getOutterUploadSpeed();
099251f2 (reyoung 2011-05-06 21:04:39 +0800 29) 
6f062edf (reyoung 2011-05-06 22:08:00 +0800 30)     /**
6f062edf (reyoung 2011-05-06 22:08:00 +0800 31)      * 获得内网下载速度
6f062edf (reyoung 2011-05-06 22:08:00 +0800 32)      * @return 单位 byte per second
6f062edf (reyoung 2011-05-06 22:08:00 +0800 33)      */
99723502 (reyoung 2011-05-06 21:57:34 +0800 34)     public double getInnerDownloadSpeed();
6f062edf (reyoung 2011-05-06 22:08:00 +0800 35) 
6f062edf (reyoung 2011-05-06 22:08:00 +0800 36)     /**
6f062edf (reyoung 2011-05-06 22:08:00 +0800 37)      * 获得外网下载速度
6f062edf (reyoung 2011-05-06 22:08:00 +0800 38)      * @return 单位 byte per second
6f062edf (reyoung 2011-05-06 22:08:00 +0800 39)      */
99723502 (reyoung 2011-05-06 21:57:34 +0800 40)     public double getOutterDownloadSpeed();
99723502 (reyoung 2011-05-06 21:57:34 +0800 41) 
6f062edf (reyoung 2011-05-06 22:08:00 +0800 42)     /**
6f062edf (reyoung 2011-05-06 22:08:00 +0800 43)      * 获得上传速度
6f062edf (reyoung 2011-05-06 22:08:00 +0800 44)      * @return 单位 byte per second
6f062edf (reyoung 2011-05-06 22:08:00 +0800 45)      */
99723502 (reyoung 2011-05-06 21:57:34 +0800 46)     public double getUploadSpeed();
6f062edf (reyoung 2011-05-06 22:08:00 +0800 47) 
6f062edf (reyoung 2011-05-06 22:08:00 +0800 48)     /**
6f062edf (reyoung 2011-05-06 22:08:00 +0800 49)      * 获得下载速度
6f062edf (reyoung 2011-05-06 22:08:00 +0800 50)      * @return 单位 byte per second
6f062edf (reyoung 2011-05-06 22:08:00 +0800 51)      */
99723502 (reyoung 2011-05-06 21:57:34 +0800 52)     public double getDownloadSpeed();
099251f2 (reyoung 2011-05-06 21:04:39 +0800 53) 
6f062edf (reyoung 2011-05-06 22:08:00 +0800 54)     /**
6f062edf (reyoung 2011-05-06 22:08:00 +0800 55)      * 获得刷新时间
6f062edf (reyoung 2011-05-06 22:08:00 +0800 56)      * @return 单位 秒
6f062edf (reyoung 2011-05-06 22:08:00 +0800 57)      */
6f062edf (reyoung 2011-05-06 22:08:00 +0800 58)     public double getIntervalTime();
099251f2 (reyoung 2011-05-06 21:04:39 +0800 59) 
099251f2 (reyoung 2011-05-06 21:04:39 +0800 60)     public List<Network.IPacket > getRawPackets();
099251f2 (reyoung 2011-05-06 21:04:39 +0800 61) }
099251f2 (reyoung 2011-05-06 21:04:39 +0800  1) /*
099251f2 (reyoung 2011-05-06 21:04:39 +0800  2)  * This file is written by reyoung, reyoung@126.com.
099251f2 (reyoung 2011-05-06 21:04:39 +0800  3)  */
099251f2 (reyoung 2011-05-06 21:04:39 +0800  4) 
099251f2 (reyoung 2011-05-06 21:04:39 +0800  5) package Logic.PacketPool;
099251f2 (reyoung 2011-05-06 21:04:39 +0800  6) 
099251f2 (reyoung 2011-05-06 21:04:39 +0800  7) /**
099251f2 (reyoung 2011-05-06 21:04:39 +0800  8)  *
099251f2 (reyoung 2011-05-06 21:04:39 +0800  9)  * @author Reyoung
099251f2 (reyoung 2011-05-06 21:04:39 +0800 10)  */
099251f2 (reyoung 2011-05-06 21:04:39 +0800 11) public interface IPacketPoolEventListener {
099251f2 (reyoung 2011-05-06 21:04:39 +0800 12)     /**
099251f2 (reyoung 2011-05-06 21:04:39 +0800 13)      * 当当前PacketPool刷新时调用
099251f2 (reyoung 2011-05-06 21:04:39 +0800 14)      * @param e Event
099251f2 (reyoung 2011-05-06 21:04:39 +0800 15)      */
099251f2 (reyoung 2011-05-06 21:04:39 +0800 16)     public void onPoolRefresh(IPacketPoolEvent e);
099251f2 (reyoung 2011-05-06 21:04:39 +0800 17) 
099251f2 (reyoung 2011-05-06 21:04:39 +0800 18)     /**
099251f2 (reyoung 2011-05-06 21:04:39 +0800 19)      * 是否需要响应刷新事件
099251f2 (reyoung 2011-05-06 21:04:39 +0800 20)      * @return
099251f2 (reyoung 2011-05-06 21:04:39 +0800 21)      */
099251f2 (reyoung 2011-05-06 21:04:39 +0800 22)     public boolean isEnable();
099251f2 (reyoung 2011-05-06 21:04:39 +0800 23) 
099251f2 (reyoung 2011-05-06 21:04:39 +0800 24)     /**
099251f2 (reyoung 2011-05-06 21:04:39 +0800 25)      * 是否有效
099251f2 (reyoung 2011-05-06 21:04:39 +0800 26)      * 如果无效，在下次刷新时，会被删除
099251f2 (reyoung 2011-05-06 21:04:39 +0800 27)      * @return
099251f2 (reyoung 2011-05-06 21:04:39 +0800 28)      */
05ab98ed (reyoung 2011-05-07 16:31:23 +0800 29)     public boolean isConcern();
099251f2 (reyoung 2011-05-06 21:04:39 +0800 30) }
099251f2 (reyoung 2011-05-06 21:04:39 +0800  1) /*
099251f2 (reyoung 2011-05-06 21:04:39 +0800  2)  * This file is written by reyoung, reyoung@126.com.
099251f2 (reyoung 2011-05-06 21:04:39 +0800  3)  */
099251f2 (reyoung 2011-05-06 21:04:39 +0800  4) 
099251f2 (reyoung 2011-05-06 21:04:39 +0800  5) package Logic.PacketPool;
099251f2 (reyoung 2011-05-06 21:04:39 +0800  6) 
099251f2 (reyoung 2011-05-06 21:04:39 +0800  7) import Network.IPacket;
099251f2 (reyoung 2011-05-06 21:04:39 +0800  8) import java.util.ArrayList;
099251f2 (reyoung 2011-05-06 21:04:39 +0800  9) import java.util.Timer;
099251f2 (reyoung 2011-05-06 21:04:39 +0800 10) import java.util.TimerTask;
099251f2 (reyoung 2011-05-06 21:04:39 +0800 11) /**
099251f2 (reyoung 2011-05-06 21:04:39 +0800 12)  *
099251f2 (reyoung 2011-05-06 21:04:39 +0800 13)  * @author Reyoung
099251f2 (reyoung 2011-05-06 21:04:39 +0800 14)  */
099251f2 (reyoung 2011-05-06 21:04:39 +0800 15) public class PacketPool extends TimerTask implements Network.IPacketListener,IPacketPool{
099251f2 (reyoung 2011-05-06 21:04:39 +0800 16)     private PacketPool(){
099251f2 (reyoung 2011-05-06 21:04:39 +0800 17)         this.m_timer = new Timer();
099251f2 (reyoung 2011-05-06 21:04:39 +0800 18)         m_interval = 1000;
099251f2 (reyoung 2011-05-06 21:04:39 +0800 19)         m_listeners = new ArrayList<IPacketPoolEventListener>();
099251f2 (reyoung 2011-05-06 21:04:39 +0800 20)         m_packets = new ArrayList<IPacket>();
f3168ca5 (reyoung 2011-05-07 11:36:44 +0800 21) //        forceRefresh();
f3168ca5 (reyoung 2011-05-07 11:36:44 +0800 22)         this.m_timer.schedule(this,0,this.m_interval);
099251f2 (reyoung 2011-05-06 21:04:39 +0800 23)     }
099251f2 (reyoung 2011-05-06 21:04:39 +0800 24)     private static IPacketPool instance = null;
24f49139 (reyoung 2011-05-07 11:47:02 +0800 25)     public static IPacketPool Instance(){
099251f2 (reyoung 2011-05-06 21:04:39 +0800 26)         if(instance==null){
099251f2 (reyoung 2011-05-06 21:04:39 +0800 27)             PacketPool temp = new PacketPool();
099251f2 (reyoung 2011-05-06 21:04:39 +0800 28)             Network.Network.Instance().addPacketListener(temp);
099251f2 (reyoung 2011-05-06 21:04:39 +0800 29)             instance = temp;
099251f2 (reyoung 2011-05-06 21:04:39 +0800 30)         }
099251f2 (reyoung 2011-05-06 21:04:39 +0800 31)         return instance;
099251f2 (reyoung 2011-05-06 21:04:39 +0800 32)     }
099251f2 (reyoung 2011-05-06 21:04:39 +0800 33)     public void addPacketPoolListener(IPacketPoolEventListener lis ) {
099251f2 (reyoung 2011-05-06 21:04:39 +0800 34)         this.m_listeners.add(lis);
099251f2 (reyoung 2011-05-06 21:04:39 +0800 35)     }
099251f2 (reyoung 2011-05-06 21:04:39 +0800 36)     
099251f2 (reyoung 2011-05-06 21:04:39 +0800 37)     public void setTimerInterval(int tim) {
099251f2 (reyoung 2011-05-06 21:04:39 +0800 38)         this.m_interval = tim;
f3168ca5 (reyoung 2011-05-07 11:36:44 +0800 39)         this.m_timer.cancel();
f3168ca5 (reyoung 2011-05-07 11:36:44 +0800 40)         this.m_timer.schedule(this,0,this.m_interval);
099251f2 (reyoung 2011-05-06 21:04:39 +0800 41)     }
099251f2 (reyoung 2011-05-06 21:04:39 +0800 42)     public void onPacketRecv(IPacket p) {
f3168ca5 (reyoung 2011-05-07 11:36:44 +0800 43)         synchronized(m_packets){
f3168ca5 (reyoung 2011-05-07 11:36:44 +0800 44)             m_packets.add(p);
f3168ca5 (reyoung 2011-05-07 11:36:44 +0800 45)         }
099251f2 (reyoung 2011-05-06 21:04:39 +0800 46)     }
099251f2 (reyoung 2011-05-06 21:04:39 +0800 47) 
099251f2 (reyoung 2011-05-06 21:04:39 +0800 48)     public final void forceRefresh() {
099251f2 (reyoung 2011-05-06 21:04:39 +0800 49)         PacketPoolEvent event = new PacketPoolEvent(this.m_packets,this.m_interval);
099251f2 (reyoung 2011-05-06 21:04:39 +0800 50)         for(int i=0;i<m_listeners.size();++i){
099251f2 (reyoung 2011-05-06 21:04:39 +0800 51)             IPacketPoolEventListener temp = m_listeners.get(i);
05ab98ed (reyoung 2011-05-07 16:31:23 +0800 52)             if(!temp.isConcern()){
099251f2 (reyoung 2011-05-06 21:04:39 +0800 53)                 this.m_listeners.remove(i);
099251f2 (reyoung 2011-05-06 21:04:39 +0800 54)                 --i;
099251f2 (reyoung 2011-05-06 21:04:39 +0800 55)             }
099251f2 (reyoung 2011-05-06 21:04:39 +0800 56)             if(temp.isEnable()){
099251f2 (reyoung 2011-05-06 21:04:39 +0800 57)                 temp.onPoolRefresh(event);
099251f2 (reyoung 2011-05-06 21:04:39 +0800 58)             }
099251f2 (reyoung 2011-05-06 21:04:39 +0800 59)         }
099251f2 (reyoung 2011-05-06 21:04:39 +0800 60)         this.m_packets.clear();
099251f2 (reyoung 2011-05-06 21:04:39 +0800 61)     }
099251f2 (reyoung 2011-05-06 21:04:39 +0800 62) 
099251f2 (reyoung 2011-05-06 21:04:39 +0800 63)     @Override
099251f2 (reyoung 2011-05-06 21:04:39 +0800 64)     public void run() {
f3168ca5 (reyoung 2011-05-07 11:36:44 +0800 65)         synchronized(m_packets){
f3168ca5 (reyoung 2011-05-07 11:36:44 +0800 66)             this.forceRefresh();
f3168ca5 (reyoung 2011-05-07 11:36:44 +0800 67)         }
099251f2 (reyoung 2011-05-06 21:04:39 +0800 68)     }
099251f2 (reyoung 2011-05-06 21:04:39 +0800 69) 
099251f2 (reyoung 2011-05-06 21:04:39 +0800 70)     private ArrayList<IPacketPoolEventListener> m_listeners;
099251f2 (reyoung 2011-05-06 21:04:39 +0800 71)     private int                                 m_interval;
099251f2 (reyoung 2011-05-06 21:04:39 +0800 72)     private Timer                               m_timer;
f3168ca5 (reyoung 2011-05-07 11:36:44 +0800 73)     final private ArrayList<IPacket>                  m_packets;
099251f2 (reyoung 2011-05-06 21:04:39 +0800 74) 
099251f2 (reyoung 2011-05-06 21:04:39 +0800 75) 
099251f2 (reyoung 2011-05-06 21:04:39 +0800 76) 
099251f2 (reyoung 2011-05-06 21:04:39 +0800 77) 
099251f2 (reyoung 2011-05-06 21:04:39 +0800 78) }
099251f2 (reyoung 2011-05-06 21:04:39 +0800  1) /*
099251f2 (reyoung 2011-05-06 21:04:39 +0800  2)  * This file is written by reyoung, reyoung@126.com.
099251f2 (reyoung 2011-05-06 21:04:39 +0800  3)  */
099251f2 (reyoung 2011-05-06 21:04:39 +0800  4) 
099251f2 (reyoung 2011-05-06 21:04:39 +0800  5) package Logic.PacketPool;
099251f2 (reyoung 2011-05-06 21:04:39 +0800  6) 
7e8ec036 (reyoung 2011-05-06 21:45:30 +0800  7) import Logic.Filters.CernetPacketFilter;
7e8ec036 (reyoung 2011-05-06 21:45:30 +0800  8) import Logic.Filters.IPacketFilter;
099251f2 (reyoung 2011-05-06 21:04:39 +0800  9) import Network.IPacket;
099251f2 (reyoung 2011-05-06 21:04:39 +0800 10) import java.util.List;
7e8ec036 (reyoung 2011-05-06 21:45:30 +0800 11) import java.util.ListIterator;
099251f2 (reyoung 2011-05-06 21:04:39 +0800 12) 
099251f2 (reyoung 2011-05-06 21:04:39 +0800 13) /**
099251f2 (reyoung 2011-05-06 21:04:39 +0800 14)  *
099251f2 (reyoung 2011-05-06 21:04:39 +0800 15)  * @author Reyoung
099251f2 (reyoung 2011-05-06 21:04:39 +0800 16)  */
099251f2 (reyoung 2011-05-06 21:04:39 +0800 17) public class PacketPoolEvent implements IPacketPoolEvent {
099251f2 (reyoung 2011-05-06 21:04:39 +0800 18) 
099251f2 (reyoung 2011-05-06 21:04:39 +0800 19)     public PacketPoolEvent(List<IPacket > packet,int interval) {
099251f2 (reyoung 2011-05-06 21:04:39 +0800 20)         this.m_packets = packet;
6f062edf (reyoung 2011-05-06 22:08:00 +0800 21)         this.m_interval = (double)(interval)/1000.0f;
b2faff64 (reyoung 2011-05-06 21:34:16 +0800 22)         process();
099251f2 (reyoung 2011-05-06 21:04:39 +0800 23)     }
099251f2 (reyoung 2011-05-06 21:04:39 +0800 24) 
099251f2 (reyoung 2011-05-06 21:04:39 +0800 25) 
6f062edf (reyoung 2011-05-06 22:08:00 +0800 26)     public double getIntervalTime() {
b2faff64 (reyoung 2011-05-06 21:34:16 +0800 27)         return this.m_interval;
b2faff64 (reyoung 2011-05-06 21:34:16 +0800 28)     }
b2faff64 (reyoung 2011-05-06 21:34:16 +0800 29) 
b2faff64 (reyoung 2011-05-06 21:34:16 +0800 30)     private void process(){
7e8ec036 (reyoung 2011-05-06 21:45:30 +0800 31)         ListIterator<IPacket > it = m_packets.listIterator();
7e8ec036 (reyoung 2011-05-06 21:45:30 +0800 32)         while(it.hasNext()){
7e8ec036 (reyoung 2011-05-06 21:45:30 +0800 33)             IPacket p = it.next();
7e8ec036 (reyoung 2011-05-06 21:45:30 +0800 34)             IPacketFilter cernet = CernetPacketFilter.Instance();
1bf6fe7f (reyoung 2011-05-07 14:26:11 +0800 35)             if(cernet==null){
1bf6fe7f (reyoung 2011-05-07 14:26:11 +0800 36)                 CernetPacketFilter.Initialize("Cernet");
1bf6fe7f (reyoung 2011-05-07 14:26:11 +0800 37)                 cernet = CernetPacketFilter.Instance();
1bf6fe7f (reyoung 2011-05-07 14:26:11 +0800 38)             }
99723502 (reyoung 2011-05-06 21:57:34 +0800 39)             boolean isInner = cernet.check(p);
99723502 (reyoung 2011-05-06 21:57:34 +0800 40)             if(isInner){
99723502 (reyoung 2011-05-06 21:57:34 +0800 41)                 if(p.isUpload())
99723502 (reyoung 2011-05-06 21:57:34 +0800 42)                     m_IU += p.getPacketLength();
99723502 (reyoung 2011-05-06 21:57:34 +0800 43)                 else
99723502 (reyoung 2011-05-06 21:57:34 +0800 44)                     m_ID += p.getPacketLength();
99723502 (reyoung 2011-05-06 21:57:34 +0800 45)             }else{
99723502 (reyoung 2011-05-06 21:57:34 +0800 46)                 if(p.isUpload())
99723502 (reyoung 2011-05-06 21:57:34 +0800 47)                     m_OU += p.getPacketLength();
99723502 (reyoung 2011-05-06 21:57:34 +0800 48)                 else
99723502 (reyoung 2011-05-06 21:57:34 +0800 49)                     m_OD += p.getPacketLength();
99723502 (reyoung 2011-05-06 21:57:34 +0800 50)             }
7e8ec036 (reyoung 2011-05-06 21:45:30 +0800 51)         }
099251f2 (reyoung 2011-05-06 21:04:39 +0800 52)     }
099251f2 (reyoung 2011-05-06 21:04:39 +0800 53)     
099251f2 (reyoung 2011-05-06 21:04:39 +0800 54)     private List<IPacket> m_packets;
6f062edf (reyoung 2011-05-06 22:08:00 +0800 55)     private double           m_interval;
99723502 (reyoung 2011-05-06 21:57:34 +0800 56)     private int           m_IU;
99723502 (reyoung 2011-05-06 21:57:34 +0800 57)     private int           m_ID;
99723502 (reyoung 2011-05-06 21:57:34 +0800 58)     private int           m_OU;
99723502 (reyoung 2011-05-06 21:57:34 +0800 59)     private int           m_OD;
99723502 (reyoung 2011-05-06 21:57:34 +0800 60)     public double getInnerUploadSpeed() {
99723502 (reyoung 2011-05-06 21:57:34 +0800 61)         return (double)m_IU/(double) m_interval;
99723502 (reyoung 2011-05-06 21:57:34 +0800 62)     }
99723502 (reyoung 2011-05-06 21:57:34 +0800 63) 
99723502 (reyoung 2011-05-06 21:57:34 +0800 64)     public double getOutterUploadSpeed() {
99723502 (reyoung 2011-05-06 21:57:34 +0800 65)         return (double)m_OU/(double) m_interval;
99723502 (reyoung 2011-05-06 21:57:34 +0800 66)     }
99723502 (reyoung 2011-05-06 21:57:34 +0800 67) 
99723502 (reyoung 2011-05-06 21:57:34 +0800 68)     public double getInnerDownloadSpeed() {
99723502 (reyoung 2011-05-06 21:57:34 +0800 69)         return (double)m_ID/(double) m_interval;
99723502 (reyoung 2011-05-06 21:57:34 +0800 70)     }
99723502 (reyoung 2011-05-06 21:57:34 +0800 71) 
99723502 (reyoung 2011-05-06 21:57:34 +0800 72)     public double getOutterDownloadSpeed() {
99723502 (reyoung 2011-05-06 21:57:34 +0800 73)         return (double)m_OD/(double) m_interval;
99723502 (reyoung 2011-05-06 21:57:34 +0800 74)     }
99723502 (reyoung 2011-05-06 21:57:34 +0800 75) 
99723502 (reyoung 2011-05-06 21:57:34 +0800 76)     public List<IPacket> getRawPackets() {
99723502 (reyoung 2011-05-06 21:57:34 +0800 77)         return this.m_packets;
99723502 (reyoung 2011-05-06 21:57:34 +0800 78)     }
99723502 (reyoung 2011-05-06 21:57:34 +0800 79) 
99723502 (reyoung 2011-05-06 21:57:34 +0800 80)     public double getUploadSpeed() {
99723502 (reyoung 2011-05-06 21:57:34 +0800 81)         return this.getInnerUploadSpeed()+ this.getOutterUploadSpeed();
99723502 (reyoung 2011-05-06 21:57:34 +0800 82)     }
099251f2 (reyoung 2011-05-06 21:04:39 +0800 83) 
99723502 (reyoung 2011-05-06 21:57:34 +0800 84)     public double getDownloadSpeed() {
99723502 (reyoung 2011-05-06 21:57:34 +0800 85)         return this.getOutterDownloadSpeed()+this.getInnerDownloadSpeed();
99723502 (reyoung 2011-05-06 21:57:34 +0800 86)     }
99723502 (reyoung 2011-05-06 21:57:34 +0800 87)     
099251f2 (reyoung 2011-05-06 21:04:39 +0800 88) }
f3168ca5 (reyoung 2011-05-07 11:36:44 +0800  1) /*
f3168ca5 (reyoung 2011-05-07 11:36:44 +0800  2)  * This file is written by reyoung, reyoung@126.com.
f3168ca5 (reyoung 2011-05-07 11:36:44 +0800  3)  */
f3168ca5 (reyoung 2011-05-07 11:36:44 +0800  4) 
f3168ca5 (reyoung 2011-05-07 11:36:44 +0800  5) package Logic.PacketPool;
f3168ca5 (reyoung 2011-05-07 11:36:44 +0800  6) 
f3168ca5 (reyoung 2011-05-07 11:36:44 +0800  7) /**
f3168ca5 (reyoung 2011-05-07 11:36:44 +0800  8)  *
f3168ca5 (reyoung 2011-05-07 11:36:44 +0800  9)  * @author Reyoung
f3168ca5 (reyoung 2011-05-07 11:36:44 +0800 10)  */
f3168ca5 (reyoung 2011-05-07 11:36:44 +0800 11) public class PacketPoolEventListenerStub implements IPacketPoolEventListener{
f3168ca5 (reyoung 2011-05-07 11:36:44 +0800 12) 
f3168ca5 (reyoung 2011-05-07 11:36:44 +0800 13)     public void onPoolRefresh(IPacketPoolEvent e) {
f3168ca5 (reyoung 2011-05-07 11:36:44 +0800 14)         System.out.printf("Current Downspeed = %f\n",e.getDownloadSpeed()); 
f3168ca5 (reyoung 2011-05-07 11:36:44 +0800 15)     }
f3168ca5 (reyoung 2011-05-07 11:36:44 +0800 16) 
f3168ca5 (reyoung 2011-05-07 11:36:44 +0800 17)     public boolean isEnable() {
f3168ca5 (reyoung 2011-05-07 11:36:44 +0800 18)         return true;
f3168ca5 (reyoung 2011-05-07 11:36:44 +0800 19)     }
f3168ca5 (reyoung 2011-05-07 11:36:44 +0800 20) 
05ab98ed (reyoung 2011-05-07 16:31:23 +0800 21)     public boolean isConcern() {
f3168ca5 (reyoung 2011-05-07 11:36:44 +0800 22)         return true;
f3168ca5 (reyoung 2011-05-07 11:36:44 +0800 23)     }
f3168ca5 (reyoung 2011-05-07 11:36:44 +0800 24) 
f3168ca5 (reyoung 2011-05-07 11:36:44 +0800 25) }
0f78c8a6 (reyoung 2011-05-06 15:46:06 +0800  1) /*
0f78c8a6 (reyoung 2011-05-06 15:46:06 +0800  2)  * This file is written by reyoung, reyoung@126.com.
0f78c8a6 (reyoung 2011-05-06 15:46:06 +0800  3)  */
0f78c8a6 (reyoung 2011-05-06 15:46:06 +0800  4) package Network;
0f78c8a6 (reyoung 2011-05-06 15:46:06 +0800  5) 
0f78c8a6 (reyoung 2011-05-06 15:46:06 +0800  6) /**
0f78c8a6 (reyoung 2011-05-06 15:46:06 +0800  7)  *
0f78c8a6 (reyoung 2011-05-06 15:46:06 +0800  8)  * @author Reyoung
0f78c8a6 (reyoung 2011-05-06 15:46:06 +0800  9)  */
0f78c8a6 (reyoung 2011-05-06 15:46:06 +0800 10) public abstract class AbstractPacket implements IPacket {
0f78c8a6 (reyoung 2011-05-06 15:46:06 +0800 11)     public String getSourceAddressString(){
0f78c8a6 (reyoung 2011-05-06 15:46:06 +0800 12)         return Ipv4Int2Str(this.getSourceAddress());
0f78c8a6 (reyoung 2011-05-06 15:46:06 +0800 13)     }
0f78c8a6 (reyoung 2011-05-06 15:46:06 +0800 14)     public String getDestAddressString(){
0f78c8a6 (reyoung 2011-05-06 15:46:06 +0800 15)         return Ipv4Int2Str(getDestAddress());
0f78c8a6 (reyoung 2011-05-06 15:46:06 +0800 16)     }
0f78c8a6 (reyoung 2011-05-06 15:46:06 +0800 17)     private static String Ipv4Int2Str(int ipv4) {
0f78c8a6 (reyoung 2011-05-06 15:46:06 +0800 18)         StringBuilder sb = new StringBuilder();
0f78c8a6 (reyoung 2011-05-06 15:46:06 +0800 19)         sb.append(((ipv4 & 0xff000000) >> 24) & 0x000000ff);
0f78c8a6 (reyoung 2011-05-06 15:46:06 +0800 20)         sb.append('.');
0f78c8a6 (reyoung 2011-05-06 15:46:06 +0800 21)         sb.append((ipv4 & 0x00ff0000) >> 16);
0f78c8a6 (reyoung 2011-05-06 15:46:06 +0800 22)         sb.append('.');
0f78c8a6 (reyoung 2011-05-06 15:46:06 +0800 23)         sb.append((ipv4 & 0x0000ff00) >> 8);
0f78c8a6 (reyoung 2011-05-06 15:46:06 +0800 24)         sb.append('.');
0f78c8a6 (reyoung 2011-05-06 15:46:06 +0800 25)         sb.append((ipv4 & 0x000000ff));
0f78c8a6 (reyoung 2011-05-06 15:46:06 +0800 26)         return sb.toString();
0f78c8a6 (reyoung 2011-05-06 15:46:06 +0800 27)     }
0f78c8a6 (reyoung 2011-05-06 15:46:06 +0800 28) }
188b1bd4 (reyoung 2011-05-05 19:48:03 +0800  1) /*
188b1bd4 (reyoung 2011-05-05 19:48:03 +0800  2)  * This file is written by reyoung, reyoung@126.com.
188b1bd4 (reyoung 2011-05-05 19:48:03 +0800  3)  */
188b1bd4 (reyoung 2011-05-05 19:48:03 +0800  4) 
188b1bd4 (reyoung 2011-05-05 19:48:03 +0800  5) package Network;
188b1bd4 (reyoung 2011-05-05 19:48:03 +0800  6) 
188b1bd4 (reyoung 2011-05-05 19:48:03 +0800  7) import java.util.List;
188b1bd4 (reyoung 2011-05-05 19:48:03 +0800  8) import org.jnetpcap.PcapIf;
188b1bd4 (reyoung 2011-05-05 19:48:03 +0800  9) 
188b1bd4 (reyoung 2011-05-05 19:48:03 +0800 10) /**
188b1bd4 (reyoung 2011-05-05 19:48:03 +0800 11)  *
188b1bd4 (reyoung 2011-05-05 19:48:03 +0800 12)  * @author Reyoung
188b1bd4 (reyoung 2011-05-05 19:48:03 +0800 13)  */
188b1bd4 (reyoung 2011-05-05 19:48:03 +0800 14) public interface INetwork {
01a1490b (reyoung 2011-05-05 20:47:17 +0800 15)     /**
01a1490b (reyoung 2011-05-05 20:47:17 +0800 16)      * 返回当前计算机的网卡数量
01a1490b (reyoung 2011-05-05 20:47:17 +0800 17)      * @return
01a1490b (reyoung 2011-05-05 20:47:17 +0800 18)      */
188b1bd4 (reyoung 2011-05-05 19:48:03 +0800 19)     public int deviceCount();
01a1490b (reyoung 2011-05-05 20:47:17 +0800 20) 
01a1490b (reyoung 2011-05-05 20:47:17 +0800 21)     /**
01a1490b (reyoung 2011-05-05 20:47:17 +0800 22)      * 返回在第i点的网卡
01a1490b (reyoung 2011-05-05 20:47:17 +0800 23)      * @param i index
01a1490b (reyoung 2011-05-05 20:47:17 +0800 24)      * @return PcapIf类，具有网卡名称，描述等
01a1490b (reyoung 2011-05-05 20:47:17 +0800 25)      */
188b1bd4 (reyoung 2011-05-05 19:48:03 +0800 26)     public PcapIf getDeviceAt(int i);
01a1490b (reyoung 2011-05-05 20:47:17 +0800 27) 
01a1490b (reyoung 2011-05-05 20:47:17 +0800 28)     /**
01a1490b (reyoung 2011-05-05 20:47:17 +0800 29)      * 添加订阅Packet消息的类
01a1490b (reyoung 2011-05-05 20:47:17 +0800 30)      * @param lis   订阅Packet的类的接口
01a1490b (reyoung 2011-05-05 20:47:17 +0800 31)      */
188b1bd4 (reyoung 2011-05-05 19:48:03 +0800 32)     public void addPacketListener(IPacketListener lis);
01a1490b (reyoung 2011-05-05 20:47:17 +0800 33) 
01a1490b (reyoung 2011-05-05 20:47:17 +0800 34)     /**
01a1490b (reyoung 2011-05-05 20:47:17 +0800 35)      * 返回所有订阅Packet的类。
01a1490b (reyoung 2011-05-05 20:47:17 +0800 36)      * @return
01a1490b (reyoung 2011-05-05 20:47:17 +0800 37)      */
188b1bd4 (reyoung 2011-05-05 19:48:03 +0800 38)     public List<IPacketListener> getPacketListeners();
085c9f9d (reyoung 2011-05-06 15:35:15 +0800 39) 
085c9f9d (reyoung 2011-05-06 15:35:15 +0800 40)     /**
085c9f9d (reyoung 2011-05-06 15:35:15 +0800 41)      * 开始所有的监听进程。每个网卡独立一个监听进程。
085c9f9d (reyoung 2011-05-06 15:35:15 +0800 42)      */
085c9f9d (reyoung 2011-05-06 15:35:15 +0800 43)     public void startListenThreads();
085c9f9d (reyoung 2011-05-06 15:35:15 +0800 44) 
085c9f9d (reyoung 2011-05-06 15:35:15 +0800 45)     /**
085c9f9d (reyoung 2011-05-06 15:35:15 +0800 46)      * 
085c9f9d (reyoung 2011-05-06 15:35:15 +0800 47)      */
085c9f9d (reyoung 2011-05-06 15:35:15 +0800 48)     public void joinAllListenThreads();
188b1bd4 (reyoung 2011-05-05 19:48:03 +0800 49) }
0edcd5a1 (reyoung 2011-05-05 14:27:12 +0800  1) /*
0edcd5a1 (reyoung 2011-05-05 14:27:12 +0800  2)  * This file is written by reyoung, reyoung@126.com.
0edcd5a1 (reyoung 2011-05-05 14:27:12 +0800  3)  */
0edcd5a1 (reyoung 2011-05-05 14:27:12 +0800  4) package Network;
085c9f9d (reyoung 2011-05-06 15:35:15 +0800  5) 
0edcd5a1 (reyoung 2011-05-05 14:27:12 +0800  6) import java.util.Date;
085c9f9d (reyoung 2011-05-06 15:35:15 +0800  7) 
0edcd5a1 (reyoung 2011-05-05 14:27:12 +0800  8) /**
0edcd5a1 (reyoung 2011-05-05 14:27:12 +0800  9)  *
0edcd5a1 (reyoung 2011-05-05 14:27:12 +0800 10)  * @author Reyoung
0edcd5a1 (reyoung 2011-05-05 14:27:12 +0800 11)  */
0edcd5a1 (reyoung 2011-05-05 14:27:12 +0800 12) public interface IPacket {
085c9f9d (reyoung 2011-05-06 15:35:15 +0800 13) 
65b592be (reyoung 2011-05-06 20:23:47 +0800 14)     final static int PacketFlag_TCP = 1;
65b592be (reyoung 2011-05-06 20:23:47 +0800 15)     final static int PacketFlag_UDP = 2;
65b592be (reyoung 2011-05-06 20:23:47 +0800 16)     final static int PacketFlag_HTTP = 4;
65b592be (reyoung 2011-05-06 20:23:47 +0800 17)     final static int PacketFlag_Ethernet = 8;
6bc9b46a (reyoung 2011-05-06 19:44:08 +0800 18) 
6bc9b46a (reyoung 2011-05-06 19:44:08 +0800 19)     public int getPacketFlag();
6bc9b46a (reyoung 2011-05-06 19:44:08 +0800 20) 
085c9f9d (reyoung 2011-05-06 15:35:15 +0800 21)     /**
085c9f9d (reyoung 2011-05-06 15:35:15 +0800 22)      * 返回包的源地址
085c9f9d (reyoung 2011-05-06 15:35:15 +0800 23)      * @return  IPv4地址，int型
085c9f9d (reyoung 2011-05-06 15:35:15 +0800 24)      * @note 需要被保存
085c9f9d (reyoung 2011-05-06 15:35:15 +0800 25)      */
780335c1 (reyoung 2011-05-05 18:22:30 +0800 26)     public int getSourceAddress();
085c9f9d (reyoung 2011-05-06 15:35:15 +0800 27) 
085c9f9d (reyoung 2011-05-06 15:35:15 +0800 28)     /**
085c9f9d (reyoung 2011-05-06 15:35:15 +0800 29)      * 返回包的目的地址
085c9f9d (reyoung 2011-05-06 15:35:15 +0800 30)      * @return IPv4地址，int型
085c9f9d (reyoung 2011-05-06 15:35:15 +0800 31)      * @note 需要被保存
085c9f9d (reyoung 2011-05-06 15:35:15 +0800 32)      */
0ca3e815 (reyoung 2011-05-06 14:50:05 +0800 33)     public int getDestAddress();
085c9f9d (reyoung 2011-05-06 15:35:15 +0800 34) 
085c9f9d (reyoung 2011-05-06 15:35:15 +0800 35)     /**
085c9f9d (reyoung 2011-05-06 15:35:15 +0800 36)      * 返回源端口
085c9f9d (reyoung 2011-05-06 15:35:15 +0800 37)      * @return
085c9f9d (reyoung 2011-05-06 15:35:15 +0800 38)      * @note 需要被保存
085c9f9d (reyoung 2011-05-06 15:35:15 +0800 39)      */
780335c1 (reyoung 2011-05-05 18:22:30 +0800 40)     public int getSourcePort();
085c9f9d (reyoung 2011-05-06 15:35:15 +0800 41) 
085c9f9d (reyoung 2011-05-06 15:35:15 +0800 42)     /**
085c9f9d (reyoung 2011-05-06 15:35:15 +0800 43)      * 返回目的端口
085c9f9d (reyoung 2011-05-06 15:35:15 +0800 44)      * @return
085c9f9d (reyoung 2011-05-06 15:35:15 +0800 45)      * @note 需要被保存
085c9f9d (reyoung 2011-05-06 15:35:15 +0800 46)      */
0ca3e815 (reyoung 2011-05-06 14:50:05 +0800 47)     public int getDestPort();
780335c1 (reyoung 2011-05-05 18:22:30 +0800 48) 
085c9f9d (reyoung 2011-05-06 15:35:15 +0800 49)     /**
085c9f9d (reyoung 2011-05-06 15:35:15 +0800 50)      * 返回包长度
085c9f9d (reyoung 2011-05-06 15:35:15 +0800 51)      * @return
085c9f9d (reyoung 2011-05-06 15:35:15 +0800 52)      * @note 需要被保存
085c9f9d (reyoung 2011-05-06 15:35:15 +0800 53)      */
0edcd5a1 (reyoung 2011-05-05 14:27:12 +0800 54)     public int getPacketLength();
085c9f9d (reyoung 2011-05-06 15:35:15 +0800 55) 
085c9f9d (reyoung 2011-05-06 15:35:15 +0800 56)     /**
085c9f9d (reyoung 2011-05-06 15:35:15 +0800 57)      * 返回包接受时间
085c9f9d (reyoung 2011-05-06 15:35:15 +0800 58)      * @note 需要被保存
085c9f9d (reyoung 2011-05-06 15:35:15 +0800 59)      * @return
085c9f9d (reyoung 2011-05-06 15:35:15 +0800 60)      */
0edcd5a1 (reyoung 2011-05-05 14:27:12 +0800 61)     public Date getPacketRecvTime();
0ca3e815 (reyoung 2011-05-06 14:50:05 +0800 62) 
085c9f9d (reyoung 2011-05-06 15:35:15 +0800 63)     /**
085c9f9d (reyoung 2011-05-06 15:35:15 +0800 64)      * 返回是否是上传包，需要被保存。
085c9f9d (reyoung 2011-05-06 15:35:15 +0800 65)      * @note 需要被保存
085c9f9d (reyoung 2011-05-06 15:35:15 +0800 66)      * @return
085c9f9d (reyoung 2011-05-06 15:35:15 +0800 67)      */
0ca3e815 (reyoung 2011-05-06 14:50:05 +0800 68)     public boolean isUpload();
085c9f9d (reyoung 2011-05-06 15:35:15 +0800 69) 
085c9f9d (reyoung 2011-05-06 15:35:15 +0800 70)     /**
085c9f9d (reyoung 2011-05-06 15:35:15 +0800 71)      * 返回源地址字符串形式
085c9f9d (reyoung 2011-05-06 15:35:15 +0800 72)      * @note 不需要被保存
085c9f9d (reyoung 2011-05-06 15:35:15 +0800 73)      * @return
085c9f9d (reyoung 2011-05-06 15:35:15 +0800 74)      */
085c9f9d (reyoung 2011-05-06 15:35:15 +0800 75)     public String getSourceAddressString();
085c9f9d (reyoung 2011-05-06 15:35:15 +0800 76) 
085c9f9d (reyoung 2011-05-06 15:35:15 +0800 77)     /**
085c9f9d (reyoung 2011-05-06 15:35:15 +0800 78)      * 返回目的地址字符串形式
085c9f9d (reyoung 2011-05-06 15:35:15 +0800 79)      * @note 不需要被保存
085c9f9d (reyoung 2011-05-06 15:35:15 +0800 80)      * @return
085c9f9d (reyoung 2011-05-06 15:35:15 +0800 81)      */
085c9f9d (reyoung 2011-05-06 15:35:15 +0800 82)     public String getDestAddressString();
0edcd5a1 (reyoung 2011-05-05 14:27:12 +0800 83) }
188b1bd4 (reyoung 2011-05-05 19:48:03 +0800  1) /*
188b1bd4 (reyoung 2011-05-05 19:48:03 +0800  2)  * This file is written by reyoung, reyoung@126.com.
188b1bd4 (reyoung 2011-05-05 19:48:03 +0800  3)  */
188b1bd4 (reyoung 2011-05-05 19:48:03 +0800  4) 
188b1bd4 (reyoung 2011-05-05 19:48:03 +0800  5) package Network;
188b1bd4 (reyoung 2011-05-05 19:48:03 +0800  6) 
188b1bd4 (reyoung 2011-05-05 19:48:03 +0800  7) /**
188b1bd4 (reyoung 2011-05-05 19:48:03 +0800  8)  *
188b1bd4 (reyoung 2011-05-05 19:48:03 +0800  9)  * @author Reyoung
188b1bd4 (reyoung 2011-05-05 19:48:03 +0800 10)  */
188b1bd4 (reyoung 2011-05-05 19:48:03 +0800 11) public interface IPacketListener {
188b1bd4 (reyoung 2011-05-05 19:48:03 +0800 12)     public void onPacketRecv(IPacket p);
188b1bd4 (reyoung 2011-05-05 19:48:03 +0800 13) }
f9ce581d (reyoung 2011-05-05 20:38:28 +0800   1) /*
f9ce581d (reyoung 2011-05-05 20:38:28 +0800   2)  * This file is written by reyoung, reyoung@126.com.
f9ce581d (reyoung 2011-05-05 20:38:28 +0800   3)  */
f9ce581d (reyoung 2011-05-05 20:38:28 +0800   4) package Network;
f9ce581d (reyoung 2011-05-05 20:38:28 +0800   5) 
01a1490b (reyoung 2011-05-05 20:47:17 +0800   6) import java.util.Date;
0ca3e815 (reyoung 2011-05-06 14:50:05 +0800   7) import java.util.List;
0ca3e815 (reyoung 2011-05-06 14:50:05 +0800   8) import java.util.ListIterator;
3c6203a0 (reyoung 2011-05-20 16:23:34 +0800   9) import org.jnetpcap.JBufferHandler;
01a1490b (reyoung 2011-05-05 20:47:17 +0800  10) import org.jnetpcap.Pcap;
0ca3e815 (reyoung 2011-05-06 14:50:05 +0800  11) import org.jnetpcap.PcapAddr;
f9ce581d (reyoung 2011-05-05 20:38:28 +0800  12) import org.jnetpcap.PcapIf;
0ca3e815 (reyoung 2011-05-06 14:50:05 +0800  13) import org.jnetpcap.PcapSockAddr;
3c6203a0 (reyoung 2011-05-20 16:23:34 +0800  14) import org.jnetpcap.PcapStat;
3c6203a0 (reyoung 2011-05-20 16:23:34 +0800  15) import org.jnetpcap.nio.JBuffer;
01a1490b (reyoung 2011-05-05 20:47:17 +0800  16) import org.jnetpcap.packet.PcapPacket;
01a1490b (reyoung 2011-05-05 20:47:17 +0800  17) import org.jnetpcap.packet.PcapPacketHandler;
65b592be (reyoung 2011-05-06 20:23:47 +0800  18) import org.jnetpcap.protocol.lan.Ethernet;
01a1490b (reyoung 2011-05-05 20:47:17 +0800  19) import org.jnetpcap.protocol.network.Ip4;
65b592be (reyoung 2011-05-06 20:23:47 +0800  20) import org.jnetpcap.protocol.tcpip.Http;
01a1490b (reyoung 2011-05-05 20:47:17 +0800  21) import org.jnetpcap.protocol.tcpip.Tcp;
01a1490b (reyoung 2011-05-05 20:47:17 +0800  22) import org.jnetpcap.protocol.tcpip.Udp;
f9ce581d (reyoung 2011-05-05 20:38:28 +0800  23) 
f9ce581d (reyoung 2011-05-05 20:38:28 +0800  24) /**
f9ce581d (reyoung 2011-05-05 20:38:28 +0800  25)  *
f9ce581d (reyoung 2011-05-05 20:38:28 +0800  26)  * @author Reyoung
f9ce581d (reyoung 2011-05-05 20:38:28 +0800  27)  */
01a1490b (reyoung 2011-05-05 20:47:17 +0800  28) public class ListenThread extends Thread {
01a1490b (reyoung 2011-05-05 20:47:17 +0800  29) 
01a1490b (reyoung 2011-05-05 20:47:17 +0800  30)     public ListenThread(PcapIf dev, INetwork nw) {
3c6203a0 (reyoung 2011-05-20 16:23:34 +0800  31) 
01a1490b (reyoung 2011-05-05 20:47:17 +0800  32)         assert (dev != null);
01a1490b (reyoung 2011-05-05 20:47:17 +0800  33)         assert (nw != null);
f9ce581d (reyoung 2011-05-05 20:38:28 +0800  34)         m_dev = dev;
f9ce581d (reyoung 2011-05-05 20:38:28 +0800  35)         m_network = nw;
f9ce581d (reyoung 2011-05-05 20:38:28 +0800  36)     }
01a1490b (reyoung 2011-05-05 20:47:17 +0800  37) 
f9ce581d (reyoung 2011-05-05 20:38:28 +0800  38)     @Override
01a1490b (reyoung 2011-05-05 20:47:17 +0800  39)     public void run() {
01a1490b (reyoung 2011-05-05 20:47:17 +0800  40)         StringBuilder errorbuffer = new StringBuilder();
01a1490b (reyoung 2011-05-05 20:47:17 +0800  41)         Pcap cap = Pcap.openLive(m_dev.getName(),
3c6203a0 (reyoung 2011-05-20 16:23:34 +0800  42)                 1024*64,
01a1490b (reyoung 2011-05-05 20:47:17 +0800  43)                 Pcap.MODE_PROMISCUOUS,
01a1490b (reyoung 2011-05-05 20:47:17 +0800  44)                 1000 * 30,
01a1490b (reyoung 2011-05-05 20:47:17 +0800  45)                 errorbuffer);
01a1490b (reyoung 2011-05-05 20:47:17 +0800  46)         assert (cap != null);
3c6203a0 (reyoung 2011-05-20 16:23:34 +0800  47)         
01a1490b (reyoung 2011-05-05 20:47:17 +0800  48)         PcapPacketHandler<String> jpacketHandler = new PcapPacketHandler<String>() {
05ab98ed (reyoung 2011-05-07 16:31:23 +0800  49) 
01a1490b (reyoung 2011-05-05 20:47:17 +0800  50)             public void nextPacket(PcapPacket packet, String user) {
3c6203a0 (reyoung 2011-05-20 16:23:34 +0800  51)                 int i = 0;
3c6203a0 (reyoung 2011-05-20 16:23:34 +0800  52)                 while (true) {
3c6203a0 (reyoung 2011-05-20 16:23:34 +0800  53)                     Ip4 ip = new Ip4();
3c6203a0 (reyoung 2011-05-20 16:23:34 +0800  54)                     long t = packet.getCaptureHeader().timestampInMillis();
3c6203a0 (reyoung 2011-05-20 16:23:34 +0800  55)                     Tcp tcp = new Tcp();
3c6203a0 (reyoung 2011-05-20 16:23:34 +0800  56)                     Udp udp = new Udp();
3c6203a0 (reyoung 2011-05-20 16:23:34 +0800  57)                     int s = 0;
3c6203a0 (reyoung 2011-05-20 16:23:34 +0800  58)                     int d = 0;
3c6203a0 (reyoung 2011-05-20 16:23:34 +0800  59)                     int sp = 0;
3c6203a0 (reyoung 2011-05-20 16:23:34 +0800  60)                     int tp = 0;
3c6203a0 (reyoung 2011-05-20 16:23:34 +0800  61)                     int okcount = 0;
3c6203a0 (reyoung 2011-05-20 16:23:34 +0800  62)                     int flag = 0;
3c6203a0 (reyoung 2011-05-20 16:23:34 +0800  63)                     Date arriveTime = new Date(t);
3c6203a0 (reyoung 2011-05-20 16:23:34 +0800  64)                     if (packet.hasHeader(ip, i)) {
3c6203a0 (reyoung 2011-05-20 16:23:34 +0800  65)                         s = ip.sourceToInt();
3c6203a0 (reyoung 2011-05-20 16:23:34 +0800  66)                         d = ip.destinationToInt();
3c6203a0 (reyoung 2011-05-20 16:23:34 +0800  67)                         ++okcount;
3c6203a0 (reyoung 2011-05-20 16:23:34 +0800  68)                     }
3c6203a0 (reyoung 2011-05-20 16:23:34 +0800  69)                     if (packet.hasHeader(tcp,i)) {
3c6203a0 (reyoung 2011-05-20 16:23:34 +0800  70)                         sp = tcp.source();
3c6203a0 (reyoung 2011-05-20 16:23:34 +0800  71)                         tp = tcp.destination();
3c6203a0 (reyoung 2011-05-20 16:23:34 +0800  72)                         flag |= IPacket.PacketFlag_TCP;
3c6203a0 (reyoung 2011-05-20 16:23:34 +0800  73)                         ++okcount;
3c6203a0 (reyoung 2011-05-20 16:23:34 +0800  74)                     }else if (packet.hasHeader(udp,i)) {
3c6203a0 (reyoung 2011-05-20 16:23:34 +0800  75)                         sp = udp.source();
3c6203a0 (reyoung 2011-05-20 16:23:34 +0800  76)                         tp = udp.destination();
3c6203a0 (reyoung 2011-05-20 16:23:34 +0800  77)                         flag |= IPacket.PacketFlag_UDP;
3c6203a0 (reyoung 2011-05-20 16:23:34 +0800  78)                         ++okcount;
3c6203a0 (reyoung 2011-05-20 16:23:34 +0800  79)                     }
3c6203a0 (reyoung 2011-05-20 16:23:34 +0800  80)                     if (packet.hasHeader(Http.ID,i)) {
3c6203a0 (reyoung 2011-05-20 16:23:34 +0800  81)                         flag |= IPacket.PacketFlag_HTTP;
3c6203a0 (reyoung 2011-05-20 16:23:34 +0800  82)                     }
3c6203a0 (reyoung 2011-05-20 16:23:34 +0800  83)                     if (packet.hasHeader(Ethernet.ID,i)) {
3c6203a0 (reyoung 2011-05-20 16:23:34 +0800  84)                         flag |= IPacket.PacketFlag_Ethernet;
3c6203a0 (reyoung 2011-05-20 16:23:34 +0800  85)                     }
3c6203a0 (reyoung 2011-05-20 16:23:34 +0800  86)                     if (okcount != 2) {
3c6203a0 (reyoung 2011-05-20 16:23:34 +0800  87)                         break;
3c6203a0 (reyoung 2011-05-20 16:23:34 +0800  88)                     } else {
3c6203a0 (reyoung 2011-05-20 16:23:34 +0800  89)                         Packet p = new Packet();
facedd7e (reyoung 2011-05-20 16:51:01 +0800  90)                         p.DIP = d;
facedd7e (reyoung 2011-05-20 16:51:01 +0800  91)                         p.SIP = s;
3c6203a0 (reyoung 2011-05-20 16:23:34 +0800  92)                         p.DPort = sp;
3c6203a0 (reyoung 2011-05-20 16:23:34 +0800  93)                         p.SPort = tp;
3c6203a0 (reyoung 2011-05-20 16:23:34 +0800  94)                         p.PackLen = packet.getCaptureHeader().caplen();
3c6203a0 (reyoung 2011-05-20 16:23:34 +0800  95)                         p.RecvTime = arriveTime;
3c6203a0 (reyoung 2011-05-20 16:23:34 +0800  96)                         if (s == GetDeviceIpInt(m_dev) || d == GetDeviceIpInt(m_dev)) {
facedd7e (reyoung 2011-05-20 16:51:01 +0800  97)                             p.IsUpdate = (GetDeviceIpInt(m_dev) == s); //! TODO upload download refine.
3c6203a0 (reyoung 2011-05-20 16:23:34 +0800  98)                             p.PacketFlag = flag;
3c6203a0 (reyoung 2011-05-20 16:23:34 +0800  99)                             synchronized (ListenThread.this) {
3c6203a0 (reyoung 2011-05-20 16:23:34 +0800 100)                                 List<IPacketListener> listeners = m_network.getPacketListeners();
3c6203a0 (reyoung 2011-05-20 16:23:34 +0800 101)                                 ListIterator<IPacketListener> it = listeners.listIterator();
3c6203a0 (reyoung 2011-05-20 16:23:34 +0800 102)                                 while (it.hasNext()) {
3c6203a0 (reyoung 2011-05-20 16:23:34 +0800 103)                                     it.next().onPacketRecv(p);
3c6203a0 (reyoung 2011-05-20 16:23:34 +0800 104)                                 }
05ab98ed (reyoung 2011-05-07 16:31:23 +0800 105)                             }
05ab98ed (reyoung 2011-05-07 16:31:23 +0800 106)                         }
0ca3e815 (reyoung 2011-05-06 14:50:05 +0800 107)                     }
3c6203a0 (reyoung 2011-05-20 16:23:34 +0800 108)                     ++i;
01a1490b (reyoung 2011-05-05 20:47:17 +0800 109)                 }
01a1490b (reyoung 2011-05-05 20:47:17 +0800 110)             }
01a1490b (reyoung 2011-05-05 20:47:17 +0800 111)         };
05ab98ed (reyoung 2011-05-07 16:31:23 +0800 112)         while (true) {
b1d4d018 (reyoung 2011-05-20 18:11:47 +0800 113)             cap.loop(10, jpacketHandler, m_dev.getDescription());
085c9f9d (reyoung 2011-05-06 15:35:15 +0800 114)         }
f9ce581d (reyoung 2011-05-05 20:38:28 +0800 115)     }
0ca3e815 (reyoung 2011-05-06 14:50:05 +0800 116) 
0ca3e815 (reyoung 2011-05-06 14:50:05 +0800 117)     static private int GetDeviceIpInt(PcapIf dev) {
0ca3e815 (reyoung 2011-05-06 14:50:05 +0800 118)         List<PcapAddr> addrs = dev.getAddresses();
0ca3e815 (reyoung 2011-05-06 14:50:05 +0800 119)         ListIterator<PcapAddr> it = addrs.listIterator();
0ca3e815 (reyoung 2011-05-06 14:50:05 +0800 120)         PcapAddr ipv4 = null;
0ca3e815 (reyoung 2011-05-06 14:50:05 +0800 121)         while (it.hasNext()) {
0ca3e815 (reyoung 2011-05-06 14:50:05 +0800 122)             PcapAddr temp = it.next();
0ca3e815 (reyoung 2011-05-06 14:50:05 +0800 123)             if (temp.getAddr().getFamily() == PcapSockAddr.AF_INET) {
0ca3e815 (reyoung 2011-05-06 14:50:05 +0800 124)                 ipv4 = temp;
0ca3e815 (reyoung 2011-05-06 14:50:05 +0800 125)             }
0ca3e815 (reyoung 2011-05-06 14:50:05 +0800 126)         }
0ca3e815 (reyoung 2011-05-06 14:50:05 +0800 127)         if (ipv4 == null) {
0ca3e815 (reyoung 2011-05-06 14:50:05 +0800 128)             return -1;
0ca3e815 (reyoung 2011-05-06 14:50:05 +0800 129)         } else {
0ca3e815 (reyoung 2011-05-06 14:50:05 +0800 130)             byte[] ipv4byte = ipv4.getAddr().getData();
0ca3e815 (reyoung 2011-05-06 14:50:05 +0800 131)             assert (ipv4byte.length == 4);
0ca3e815 (reyoung 2011-05-06 14:50:05 +0800 132)             int retv = 0;
0ca3e815 (reyoung 2011-05-06 14:50:05 +0800 133)             retv = ((ipv4byte[0] << 24) & 0xff000000)
0ca3e815 (reyoung 2011-05-06 14:50:05 +0800 134)                     | ((ipv4byte[1] << 16) & 0x00ff0000)
0ca3e815 (reyoung 2011-05-06 14:50:05 +0800 135)                     | ((ipv4byte[2] << 8) & 0x0000ff00)
0ca3e815 (reyoung 2011-05-06 14:50:05 +0800 136)                     | (ipv4byte[3] & 0x000000ff);
0ca3e815 (reyoung 2011-05-06 14:50:05 +0800 137)             return retv;
0ca3e815 (reyoung 2011-05-06 14:50:05 +0800 138)         }
0ca3e815 (reyoung 2011-05-06 14:50:05 +0800 139)     }
f9ce581d (reyoung 2011-05-05 20:38:28 +0800 140)     private PcapIf m_dev;
f9ce581d (reyoung 2011-05-05 20:38:28 +0800 141)     private INetwork m_network;
f9ce581d (reyoung 2011-05-05 20:38:28 +0800 142) }
f9ce581d (reyoung 2011-05-05 20:38:28 +0800  1) /*
f9ce581d (reyoung 2011-05-05 20:38:28 +0800  2)  * This file is written by reyoung, reyoung@126.com.
f9ce581d (reyoung 2011-05-05 20:38:28 +0800  3)  */
f9ce581d (reyoung 2011-05-05 20:38:28 +0800  4) package Network;
f9ce581d (reyoung 2011-05-05 20:38:28 +0800  5) 
f9ce581d (reyoung 2011-05-05 20:38:28 +0800  6) import java.util.ArrayList;
f9ce581d (reyoung 2011-05-05 20:38:28 +0800  7) import java.util.List;
085c9f9d (reyoung 2011-05-06 15:35:15 +0800  8) import java.util.logging.Level;
085c9f9d (reyoung 2011-05-06 15:35:15 +0800  9) import java.util.logging.Logger;
f9ce581d (reyoung 2011-05-05 20:38:28 +0800 10) import org.jnetpcap.Pcap;
f9ce581d (reyoung 2011-05-05 20:38:28 +0800 11) import org.jnetpcap.PcapIf;
f9ce581d (reyoung 2011-05-05 20:38:28 +0800 12) 
f9ce581d (reyoung 2011-05-05 20:38:28 +0800 13) /**
f9ce581d (reyoung 2011-05-05 20:38:28 +0800 14)  *
f9ce581d (reyoung 2011-05-05 20:38:28 +0800 15)  * @author Reyoung
f9ce581d (reyoung 2011-05-05 20:38:28 +0800 16)  */
085c9f9d (reyoung 2011-05-06 15:35:15 +0800 17) public class Network implements INetwork {
085c9f9d (reyoung 2011-05-06 15:35:15 +0800 18) 
085c9f9d (reyoung 2011-05-06 15:35:15 +0800 19)     private Network() {
f9ce581d (reyoung 2011-05-05 20:38:28 +0800 20)         m_listeners = new ArrayList<IPacketListener>();
f9ce581d (reyoung 2011-05-05 20:38:28 +0800 21)         m_devices = new ArrayList<PcapIf>();
f9ce581d (reyoung 2011-05-05 20:38:28 +0800 22)         StringBuilder buf = new StringBuilder();
085c9f9d (reyoung 2011-05-06 15:35:15 +0800 23)         m_listenThread = new ArrayList<ListenThread>();
f9ce581d (reyoung 2011-05-05 20:38:28 +0800 24)         int ok = Pcap.findAllDevs(m_devices, buf);
085c9f9d (reyoung 2011-05-06 15:35:15 +0800 25)         assert (ok != Pcap.OK && m_devices.isEmpty());
085c9f9d (reyoung 2011-05-06 15:35:15 +0800 26)         initThreads();
f9ce581d (reyoung 2011-05-05 20:38:28 +0800 27)     }
085c9f9d (reyoung 2011-05-06 15:35:15 +0800 28) 
085c9f9d (reyoung 2011-05-06 15:35:15 +0800 29)     static public Network Instance() {
f9ce581d (reyoung 2011-05-05 20:38:28 +0800 30)         return m_network;
f9ce581d (reyoung 2011-05-05 20:38:28 +0800 31)     }
085c9f9d (reyoung 2011-05-06 15:35:15 +0800 32) 
f9ce581d (reyoung 2011-05-05 20:38:28 +0800 33)     public int deviceCount() {
f9ce581d (reyoung 2011-05-05 20:38:28 +0800 34)         return m_devices.size();
f9ce581d (reyoung 2011-05-05 20:38:28 +0800 35)     }
085c9f9d (reyoung 2011-05-06 15:35:15 +0800 36) 
f9ce581d (reyoung 2011-05-05 20:38:28 +0800 37)     public PcapIf getDeviceAt(int i) {
f9ce581d (reyoung 2011-05-05 20:38:28 +0800 38)         return m_devices.get(i);
f9ce581d (reyoung 2011-05-05 20:38:28 +0800 39)     }
085c9f9d (reyoung 2011-05-06 15:35:15 +0800 40) 
f9ce581d (reyoung 2011-05-05 20:38:28 +0800 41)     public void addPacketListener(IPacketListener lis) {
f9ce581d (reyoung 2011-05-05 20:38:28 +0800 42)         m_listeners.add(lis);
f9ce581d (reyoung 2011-05-05 20:38:28 +0800 43)     }
085c9f9d (reyoung 2011-05-06 15:35:15 +0800 44) 
f9ce581d (reyoung 2011-05-05 20:38:28 +0800 45)     public List<IPacketListener> getPacketListeners() {
f9ce581d (reyoung 2011-05-05 20:38:28 +0800 46)         return m_listeners;
f9ce581d (reyoung 2011-05-05 20:38:28 +0800 47)     }
085c9f9d (reyoung 2011-05-06 15:35:15 +0800 48) 
085c9f9d (reyoung 2011-05-06 15:35:15 +0800 49)     private void initThreads() {
085c9f9d (reyoung 2011-05-06 15:35:15 +0800 50)         for (int i = 0; i < m_devices.size(); ++i) {
085c9f9d (reyoung 2011-05-06 15:35:15 +0800 51)             ListenThread temp = new ListenThread(m_devices.get(i), this);
085c9f9d (reyoung 2011-05-06 15:35:15 +0800 52)             m_listenThread.add(temp);
085c9f9d (reyoung 2011-05-06 15:35:15 +0800 53)         }
085c9f9d (reyoung 2011-05-06 15:35:15 +0800 54)     }
085c9f9d (reyoung 2011-05-06 15:35:15 +0800 55) 
085c9f9d (reyoung 2011-05-06 15:35:15 +0800 56)     public void startListenThreads() {
085c9f9d (reyoung 2011-05-06 15:35:15 +0800 57)         assert(m_listenThread.isEmpty());
085c9f9d (reyoung 2011-05-06 15:35:15 +0800 58)         for(int i=0;i<this.m_listenThread.size();++i){
085c9f9d (reyoung 2011-05-06 15:35:15 +0800 59)             m_listenThread.get(i).start();
085c9f9d (reyoung 2011-05-06 15:35:15 +0800 60)         }
085c9f9d (reyoung 2011-05-06 15:35:15 +0800 61)     }
085c9f9d (reyoung 2011-05-06 15:35:15 +0800 62) 
085c9f9d (reyoung 2011-05-06 15:35:15 +0800 63)     static {
f9ce581d (reyoung 2011-05-05 20:38:28 +0800 64)         m_network = new Network();
f9ce581d (reyoung 2011-05-05 20:38:28 +0800 65)     }
085c9f9d (reyoung 2011-05-06 15:35:15 +0800 66)     private ArrayList<PcapIf> m_devices;
f9ce581d (reyoung 2011-05-05 20:38:28 +0800 67)     private List<IPacketListener> m_listeners;
085c9f9d (reyoung 2011-05-06 15:35:15 +0800 68)     private List<ListenThread> m_listenThread;
085c9f9d (reyoung 2011-05-06 15:35:15 +0800 69)     static private Network m_network;
085c9f9d (reyoung 2011-05-06 15:35:15 +0800 70) 
085c9f9d (reyoung 2011-05-06 15:35:15 +0800 71)     public void joinAllListenThreads() {
085c9f9d (reyoung 2011-05-06 15:35:15 +0800 72)         assert(m_listenThread.isEmpty());
085c9f9d (reyoung 2011-05-06 15:35:15 +0800 73)         for(int i=0;i<this.m_listenThread.size();++i){
085c9f9d (reyoung 2011-05-06 15:35:15 +0800 74)             try {
085c9f9d (reyoung 2011-05-06 15:35:15 +0800 75)                 m_listenThread.get(i).join();
085c9f9d (reyoung 2011-05-06 15:35:15 +0800 76)             } catch (InterruptedException ex) {
085c9f9d (reyoung 2011-05-06 15:35:15 +0800 77)                 Logger.getLogger(Network.class.getName()).log(Level.SEVERE, null, ex);
085c9f9d (reyoung 2011-05-06 15:35:15 +0800 78)             }
085c9f9d (reyoung 2011-05-06 15:35:15 +0800 79)         }
085c9f9d (reyoung 2011-05-06 15:35:15 +0800 80)     }
f9ce581d (reyoung 2011-05-05 20:38:28 +0800 81) }
0ca3e815 (reyoung 2011-05-06 14:50:05 +0800  1) /*
0ca3e815 (reyoung 2011-05-06 14:50:05 +0800  2)  * This file is written by reyoung, reyoung@126.com.
0ca3e815 (reyoung 2011-05-06 14:50:05 +0800  3)  */
0ca3e815 (reyoung 2011-05-06 14:50:05 +0800  4) 
0ca3e815 (reyoung 2011-05-06 14:50:05 +0800  5) package Network;
0ca3e815 (reyoung 2011-05-06 14:50:05 +0800  6) 
0ca3e815 (reyoung 2011-05-06 14:50:05 +0800  7) import java.util.Date;
0ca3e815 (reyoung 2011-05-06 14:50:05 +0800  8) 
0ca3e815 (reyoung 2011-05-06 14:50:05 +0800  9) /**
0ca3e815 (reyoung 2011-05-06 14:50:05 +0800 10)  *
0ca3e815 (reyoung 2011-05-06 14:50:05 +0800 11)  * @author Reyoung
0ca3e815 (reyoung 2011-05-06 14:50:05 +0800 12)  */
0f78c8a6 (reyoung 2011-05-06 15:46:06 +0800 13) public class Packet extends AbstractPacket{
0ca3e815 (reyoung 2011-05-06 14:50:05 +0800 14)     public int SIP;
0ca3e815 (reyoung 2011-05-06 14:50:05 +0800 15)     public int DIP;
0ca3e815 (reyoung 2011-05-06 14:50:05 +0800 16)     public int SPort;
0ca3e815 (reyoung 2011-05-06 14:50:05 +0800 17)     public int DPort;
0ca3e815 (reyoung 2011-05-06 14:50:05 +0800 18)     public Date RecvTime;
0ca3e815 (reyoung 2011-05-06 14:50:05 +0800 19)     public boolean IsUpdate;
0ca3e815 (reyoung 2011-05-06 14:50:05 +0800 20)     public int PackLen;
6bc9b46a (reyoung 2011-05-06 19:44:08 +0800 21)     public int PacketFlag;
0ca3e815 (reyoung 2011-05-06 14:50:05 +0800 22)     public Packet(){
0ca3e815 (reyoung 2011-05-06 14:50:05 +0800 23)         RecvTime = null;
0ca3e815 (reyoung 2011-05-06 14:50:05 +0800 24)     }
0ca3e815 (reyoung 2011-05-06 14:50:05 +0800 25) 
0ca3e815 (reyoung 2011-05-06 14:50:05 +0800 26) 
0ca3e815 (reyoung 2011-05-06 14:50:05 +0800 27)     public int getSourceAddress() {
0ca3e815 (reyoung 2011-05-06 14:50:05 +0800 28)         return SIP;
0ca3e815 (reyoung 2011-05-06 14:50:05 +0800 29)     }
0ca3e815 (reyoung 2011-05-06 14:50:05 +0800 30) 
0ca3e815 (reyoung 2011-05-06 14:50:05 +0800 31)     public int getDestAddress() {
0ca3e815 (reyoung 2011-05-06 14:50:05 +0800 32)         return DIP;
0ca3e815 (reyoung 2011-05-06 14:50:05 +0800 33)     }
0ca3e815 (reyoung 2011-05-06 14:50:05 +0800 34) 
0ca3e815 (reyoung 2011-05-06 14:50:05 +0800 35)     public int getSourcePort() {
0ca3e815 (reyoung 2011-05-06 14:50:05 +0800 36)         return SPort;
0ca3e815 (reyoung 2011-05-06 14:50:05 +0800 37)     }
0ca3e815 (reyoung 2011-05-06 14:50:05 +0800 38) 
0ca3e815 (reyoung 2011-05-06 14:50:05 +0800 39)     public int getDestPort() {
0ca3e815 (reyoung 2011-05-06 14:50:05 +0800 40)         return DPort;
0ca3e815 (reyoung 2011-05-06 14:50:05 +0800 41)     }
0ca3e815 (reyoung 2011-05-06 14:50:05 +0800 42) 
0ca3e815 (reyoung 2011-05-06 14:50:05 +0800 43)     public int getPacketLength() {
0ca3e815 (reyoung 2011-05-06 14:50:05 +0800 44)         return PackLen;
0ca3e815 (reyoung 2011-05-06 14:50:05 +0800 45)     }
0ca3e815 (reyoung 2011-05-06 14:50:05 +0800 46) 
0ca3e815 (reyoung 2011-05-06 14:50:05 +0800 47)     public Date getPacketRecvTime() {
0ca3e815 (reyoung 2011-05-06 14:50:05 +0800 48)         return RecvTime;
0ca3e815 (reyoung 2011-05-06 14:50:05 +0800 49)     }
0ca3e815 (reyoung 2011-05-06 14:50:05 +0800 50) 
0ca3e815 (reyoung 2011-05-06 14:50:05 +0800 51)     public boolean isUpload() {
0ca3e815 (reyoung 2011-05-06 14:50:05 +0800 52)         return IsUpdate;
0ca3e815 (reyoung 2011-05-06 14:50:05 +0800 53)     }
0ca3e815 (reyoung 2011-05-06 14:50:05 +0800 54) 
6bc9b46a (reyoung 2011-05-06 19:44:08 +0800 55)     public int getPacketFlag() {
6bc9b46a (reyoung 2011-05-06 19:44:08 +0800 56)         return PacketFlag;
6bc9b46a (reyoung 2011-05-06 19:44:08 +0800 57)     }
6bc9b46a (reyoung 2011-05-06 19:44:08 +0800 58) 
0ca3e815 (reyoung 2011-05-06 14:50:05 +0800 59) }
416b6f67 (reyoung 2011-05-06 15:52:32 +0800  1) /*
416b6f67 (reyoung 2011-05-06 15:52:32 +0800  2)  * This file is written by reyoung, reyoung@126.com.
416b6f67 (reyoung 2011-05-06 15:52:32 +0800  3)  */
416b6f67 (reyoung 2011-05-06 15:52:32 +0800  4) 
416b6f67 (reyoung 2011-05-06 15:52:32 +0800  5) package Network;
416b6f67 (reyoung 2011-05-06 15:52:32 +0800  6) 
416b6f67 (reyoung 2011-05-06 15:52:32 +0800  7) /**
416b6f67 (reyoung 2011-05-06 15:52:32 +0800  8)  *
416b6f67 (reyoung 2011-05-06 15:52:32 +0800  9)  * @author Reyoung
416b6f67 (reyoung 2011-05-06 15:52:32 +0800 10)  */
416b6f67 (reyoung 2011-05-06 15:52:32 +0800 11) public class PacketListenerStub implements IPacketListener{
416b6f67 (reyoung 2011-05-06 15:52:32 +0800 12) 
416b6f67 (reyoung 2011-05-06 15:52:32 +0800 13)     public void onPacketRecv(IPacket p) {
b2faff64 (reyoung 2011-05-06 21:34:16 +0800 14)         StringBuilder sb = new StringBuilder();
b2faff64 (reyoung 2011-05-06 21:34:16 +0800 15)         
b2faff64 (reyoung 2011-05-06 21:34:16 +0800 16)         sb.append("m_packets.add(CreatePacket(new Date(");
b2faff64 (reyoung 2011-05-06 21:34:16 +0800 17)         sb.append("System.currentTimeMillis()");
b2faff64 (reyoung 2011-05-06 21:34:16 +0800 18)         sb.append("),");
b2faff64 (reyoung 2011-05-06 21:34:16 +0800 19)         sb.append(p.getSourceAddress()).append(',');
b2faff64 (reyoung 2011-05-06 21:34:16 +0800 20)         sb.append(p.getSourcePort()).append(',');
b2faff64 (reyoung 2011-05-06 21:34:16 +0800 21)         sb.append(p.getDestAddress()).append(',');
b2faff64 (reyoung 2011-05-06 21:34:16 +0800 22)         sb.append(p.getDestPort()).append(',');
b2faff64 (reyoung 2011-05-06 21:34:16 +0800 23)         sb.append(p.getPacketFlag()).append(',');
b2faff64 (reyoung 2011-05-06 21:34:16 +0800 24)         sb.append(p.getPacketLength()).append(',');
b2faff64 (reyoung 2011-05-06 21:34:16 +0800 25)         sb.append(p.isUpload()).append("));\n");
b2faff64 (reyoung 2011-05-06 21:34:16 +0800 26)         System.out.print(sb.toString());
416b6f67 (reyoung 2011-05-06 15:52:32 +0800 27)     }
416b6f67 (reyoung 2011-05-06 15:52:32 +0800 28)     
416b6f67 (reyoung 2011-05-06 15:52:32 +0800 29) }
ed47ba43 JFlowMonitor/test/Network/PacketStub.java (reyoung 2011-05-05 14:32:03 +0800  1) /*
ed47ba43 JFlowMonitor/test/Network/PacketStub.java (reyoung 2011-05-05 14:32:03 +0800  2)  * This file is written by reyoung, reyoung@126.com.
ed47ba43 JFlowMonitor/test/Network/PacketStub.java (reyoung 2011-05-05 14:32:03 +0800  3)  */
ed47ba43 JFlowMonitor/test/Network/PacketStub.java (reyoung 2011-05-05 14:32:03 +0800  4) 
ed47ba43 JFlowMonitor/test/Network/PacketStub.java (reyoung 2011-05-05 14:32:03 +0800  5) package Network;
ed47ba43 JFlowMonitor/test/Network/PacketStub.java (reyoung 2011-05-05 14:32:03 +0800  6) 
ed47ba43 JFlowMonitor/test/Network/PacketStub.java (reyoung 2011-05-05 14:32:03 +0800  7) import java.util.Date;
ed47ba43 JFlowMonitor/test/Network/PacketStub.java (reyoung 2011-05-05 14:32:03 +0800  8) 
ed47ba43 JFlowMonitor/test/Network/PacketStub.java (reyoung 2011-05-05 14:32:03 +0800  9) /**
ed47ba43 JFlowMonitor/test/Network/PacketStub.java (reyoung 2011-05-05 14:32:03 +0800 10)  *
ed47ba43 JFlowMonitor/test/Network/PacketStub.java (reyoung 2011-05-05 14:32:03 +0800 11)  * @author Reyoung
ed47ba43 JFlowMonitor/test/Network/PacketStub.java (reyoung 2011-05-05 14:32:03 +0800 12)  */
0f78c8a6 JFlowMonitor/src/Network/PacketStub.java  (reyoung 2011-05-06 15:46:06 +0800 13) public class PacketStub extends AbstractPacket {
ed47ba43 JFlowMonitor/test/Network/PacketStub.java (reyoung 2011-05-05 14:32:03 +0800 14) 
ed47ba43 JFlowMonitor/test/Network/PacketStub.java (reyoung 2011-05-05 14:32:03 +0800 15)     public int getPacketLength() {
ed47ba43 JFlowMonitor/test/Network/PacketStub.java (reyoung 2011-05-05 14:32:03 +0800 16)         return 1284;
ed47ba43 JFlowMonitor/test/Network/PacketStub.java (reyoung 2011-05-05 14:32:03 +0800 17)     }
ed47ba43 JFlowMonitor/test/Network/PacketStub.java (reyoung 2011-05-05 14:32:03 +0800 18) 
ed47ba43 JFlowMonitor/test/Network/PacketStub.java (reyoung 2011-05-05 14:32:03 +0800 19)     public Date getPacketRecvTime() {
ed47ba43 JFlowMonitor/test/Network/PacketStub.java (reyoung 2011-05-05 14:32:03 +0800 20)         return new Date(System.currentTimeMillis());
ed47ba43 JFlowMonitor/test/Network/PacketStub.java (reyoung 2011-05-05 14:32:03 +0800 21)     }
ed47ba43 JFlowMonitor/test/Network/PacketStub.java (reyoung 2011-05-05 14:32:03 +0800 22) 
780335c1 JFlowMonitor/src/Network/PacketStub.java  (reyoung 2011-05-05 18:22:30 +0800 23)     public int getSourceAddress() {
780335c1 JFlowMonitor/src/Network/PacketStub.java  (reyoung 2011-05-05 18:22:30 +0800 24)         return 0xde1e19a9;
780335c1 JFlowMonitor/src/Network/PacketStub.java  (reyoung 2011-05-05 18:22:30 +0800 25)     }
780335c1 JFlowMonitor/src/Network/PacketStub.java  (reyoung 2011-05-05 18:22:30 +0800 26) 
0ca3e815 JFlowMonitor/src/Network/PacketStub.java  (reyoung 2011-05-06 14:50:05 +0800 27)     public int getDestAddress() {
f3a1b6c6 JFlowMonitor/src/Network/PacketStub.java  (aHa     2011-05-07 14:05:38 +0800 28)         return 0x73180f02;
780335c1 JFlowMonitor/src/Network/PacketStub.java  (reyoung 2011-05-05 18:22:30 +0800 29)     }
780335c1 JFlowMonitor/src/Network/PacketStub.java  (reyoung 2011-05-05 18:22:30 +0800 30) 
780335c1 JFlowMonitor/src/Network/PacketStub.java  (reyoung 2011-05-05 18:22:30 +0800 31)     public int getSourcePort() {
780335c1 JFlowMonitor/src/Network/PacketStub.java  (reyoung 2011-05-05 18:22:30 +0800 32)         return 3149;
780335c1 JFlowMonitor/src/Network/PacketStub.java  (reyoung 2011-05-05 18:22:30 +0800 33)     }
780335c1 JFlowMonitor/src/Network/PacketStub.java  (reyoung 2011-05-05 18:22:30 +0800 34) 
0ca3e815 JFlowMonitor/src/Network/PacketStub.java  (reyoung 2011-05-06 14:50:05 +0800 35)     public int getDestPort() {
780335c1 JFlowMonitor/src/Network/PacketStub.java  (reyoung 2011-05-05 18:22:30 +0800 36)         return 23;
780335c1 JFlowMonitor/src/Network/PacketStub.java  (reyoung 2011-05-05 18:22:30 +0800 37)     }
780335c1 JFlowMonitor/src/Network/PacketStub.java  (reyoung 2011-05-05 18:22:30 +0800 38) 
0ca3e815 JFlowMonitor/src/Network/PacketStub.java  (reyoung 2011-05-06 14:50:05 +0800 39)     public boolean isUpload() {
0ca3e815 JFlowMonitor/src/Network/PacketStub.java  (reyoung 2011-05-06 14:50:05 +0800 40)         return false;
0ca3e815 JFlowMonitor/src/Network/PacketStub.java  (reyoung 2011-05-06 14:50:05 +0800 41)     }
6bc9b46a JFlowMonitor/src/Network/PacketStub.java  (reyoung 2011-05-06 19:44:08 +0800 42) 
6bc9b46a JFlowMonitor/src/Network/PacketStub.java  (reyoung 2011-05-06 19:44:08 +0800 43)     public int getPacketFlag() {
245b7d02 JFlowMonitor/src/Network/PacketStub.java  (Kuziki  2011-05-06 23:15:29 +0800 44)         return 1;
6bc9b46a JFlowMonitor/src/Network/PacketStub.java  (reyoung 2011-05-06 19:44:08 +0800 45)     }
416b6f67 JFlowMonitor/src/Network/PacketStub.java  (reyoung 2011-05-06 15:52:32 +0800 46)     
ed47ba43 JFlowMonitor/test/Network/PacketStub.java (reyoung 2011-05-05 14:32:03 +0800 47) }
0edcd5a1 (reyoung 2011-05-05 14:27:12 +0800  1) /*
0edcd5a1 (reyoung 2011-05-05 14:27:12 +0800  2)  * This file is written by reyoung, reyoung@126.com.
0edcd5a1 (reyoung 2011-05-05 14:27:12 +0800  3)  */
0edcd5a1 (reyoung 2011-05-05 14:27:12 +0800  4) 
0edcd5a1 (reyoung 2011-05-05 14:27:12 +0800  5) package Presentation;
0edcd5a1 (reyoung 2011-05-05 14:27:12 +0800  6) 
0c78270d (reyoung 2011-05-07 17:10:21 +0800  7) import Database.DatabaseAppender;
05ab98ed (reyoung 2011-05-07 16:31:23 +0800  8) import Logic.Filters.CernetPacketFilter;
0c78270d (reyoung 2011-05-07 17:10:21 +0800  9) import Logic.PacketPool.PacketPool;
05ab98ed (reyoung 2011-05-07 16:31:23 +0800 10) import Network.INetwork;
05ab98ed (reyoung 2011-05-07 16:31:23 +0800 11) 
0edcd5a1 (reyoung 2011-05-05 14:27:12 +0800 12) /**
0edcd5a1 (reyoung 2011-05-05 14:27:12 +0800 13)  *
0edcd5a1 (reyoung 2011-05-05 14:27:12 +0800 14)  * @author Reyoung
0edcd5a1 (reyoung 2011-05-05 14:27:12 +0800 15)  */
8fedcf98 (XuDaWei 2011-05-07 12:12:10 +0800 16) public class Main{
0edcd5a1 (reyoung 2011-05-05 14:27:12 +0800 17) 
0edcd5a1 (reyoung 2011-05-05 14:27:12 +0800 18)     /**
0edcd5a1 (reyoung 2011-05-05 14:27:12 +0800 19)      * @param args the command line arguments
0edcd5a1 (reyoung 2011-05-05 14:27:12 +0800 20)      */
8fedcf98 (XuDaWei 2011-05-07 12:12:10 +0800 21)     public static void main(String args[]) {
05ab98ed (reyoung 2011-05-07 16:31:23 +0800 22)         CernetPacketFilter.Initialize("Cernet");
92dcc5d8 (reyoung 2011-05-21 17:39:59 +0800 23)         PacketPool.Instance().addPacketPoolListener(DatabaseAppender.Instance());
05ab98ed (reyoung 2011-05-07 16:31:23 +0800 24)         INetwork in = Network.Network.Instance();
05ab98ed (reyoung 2011-05-07 16:31:23 +0800 25)         in.startListenThreads();
8fedcf98 (XuDaWei 2011-05-07 12:12:10 +0800 26)         java.awt.EventQueue.invokeLater(new Runnable() {
8fedcf98 (XuDaWei 2011-05-07 12:12:10 +0800 27)             public void run() {
11c74bad (reyoung 2011-05-07 16:10:18 +0800 28)                 new SmallWindow().setVisible(true);
2bed1d39 (reyoung 2011-05-21 14:04:45 +0800 29)                 TrayIconWindow.Instance();
8fedcf98 (XuDaWei 2011-05-07 12:12:10 +0800 30)             }
8fedcf98 (XuDaWei 2011-05-07 12:12:10 +0800 31)         });
8fedcf98 (XuDaWei 2011-05-07 12:12:10 +0800 32)     }
0edcd5a1 (reyoung 2011-05-05 14:27:12 +0800 33) }
04bc609b (XuDaWei 2011-05-16 20:08:38 +0800  1) /*
04bc609b (XuDaWei 2011-05-16 20:08:38 +0800  2)  * To change this template, choose Tools | Templates
04bc609b (XuDaWei 2011-05-16 20:08:38 +0800  3)  * and open the template in the editor.
04bc609b (XuDaWei 2011-05-16 20:08:38 +0800  4)  */
04bc609b (XuDaWei 2011-05-16 20:08:38 +0800  5) package Presentation;
04bc609b (XuDaWei 2011-05-16 20:08:38 +0800  6) 
dc794e80 (XuDaWei 2011-05-21 14:55:47 +0800  7) 
dc794e80 (XuDaWei 2011-05-21 14:55:47 +0800  8) import java.awt.BorderLayout;
dc794e80 (XuDaWei 2011-05-21 14:55:47 +0800  9) import javax.swing.JPanel;
04bc609b (XuDaWei 2011-05-16 20:08:38 +0800 10) import org.jfree.chart.ChartFactory;
dc794e80 (XuDaWei 2011-05-21 14:55:47 +0800 11) import org.jfree.chart.ChartPanel;
04bc609b (XuDaWei 2011-05-16 20:08:38 +0800 12) import org.jfree.chart.JFreeChart;
04bc609b (XuDaWei 2011-05-16 20:08:38 +0800 13) import org.jfree.data.general.DefaultPieDataset;
04bc609b (XuDaWei 2011-05-16 20:08:38 +0800 14) 
04bc609b (XuDaWei 2011-05-16 20:08:38 +0800 15) /**
04bc609b (XuDaWei 2011-05-16 20:08:38 +0800 16)  *
04bc609b (XuDaWei 2011-05-16 20:08:38 +0800 17)  * @author Administrator
04bc609b (XuDaWei 2011-05-16 20:08:38 +0800 18)  */
dc794e80 (XuDaWei 2011-05-21 14:55:47 +0800 19) public class PieChart extends JPanel{
c03eaa6a (XuDaWei 2011-05-21 13:36:29 +0800 20)     private DefaultPieDataset dataset = new DefaultPieDataset();
c7f2dff0 (XuDaWei 2011-05-20 16:20:20 +0800 21)     private int flowFir;
dc794e80 (XuDaWei 2011-05-21 14:55:47 +0800 22)     public PieChart(){
dc794e80 (XuDaWei 2011-05-21 14:55:47 +0800 23)         super(new BorderLayout());
c7f2dff0 (XuDaWei 2011-05-20 16:20:20 +0800 24)         dataset.setValue("WebSite 1", flowFir);
04bc609b (XuDaWei 2011-05-16 20:08:38 +0800 25)         dataset.setValue("WebSite 2", 27.9);
c7f2dff0 (XuDaWei 2011-05-20 16:20:20 +0800 26)         dataset.setValue("WebSite 3", 79.5);
04bc609b (XuDaWei 2011-05-16 20:08:38 +0800 27)         // create a chart...
04bc609b (XuDaWei 2011-05-16 20:08:38 +0800 28)         JFreeChart chart = ChartFactory.createPieChart(
04bc609b (XuDaWei 2011-05-16 20:08:38 +0800 29)                 "WebSite Flow Analysis Chart",
04bc609b (XuDaWei 2011-05-16 20:08:38 +0800 30)                 dataset,
04bc609b (XuDaWei 2011-05-16 20:08:38 +0800 31)                 true, // legend?
04bc609b (XuDaWei 2011-05-16 20:08:38 +0800 32)                 true, // tooltips?
04bc609b (XuDaWei 2011-05-16 20:08:38 +0800 33)                 false // URLs?
04bc609b (XuDaWei 2011-05-16 20:08:38 +0800 34)                 );
04bc609b (XuDaWei 2011-05-16 20:08:38 +0800 35)         // create and display a frame...
dc794e80 (XuDaWei 2011-05-21 14:55:47 +0800 36) //        ChartFrame frame = new ChartFrame("Test", chart);
dc794e80 (XuDaWei 2011-05-21 14:55:47 +0800 37) //        frame.pack();
dc794e80 (XuDaWei 2011-05-21 14:55:47 +0800 38) //        frame.setVisible(true);
dc794e80 (XuDaWei 2011-05-21 14:55:47 +0800 39)         ChartPanel chartPanel = new ChartPanel(chart);
dc794e80 (XuDaWei 2011-05-21 14:55:47 +0800 40)         add(chartPanel);
04bc609b (XuDaWei 2011-05-16 20:08:38 +0800 41)     }
dc794e80 (XuDaWei 2011-05-21 14:55:47 +0800 42)    
04bc609b (XuDaWei 2011-05-16 20:08:38 +0800 43) }
11c74bad (reyoung 2011-05-07 16:10:18 +0800   1) /*
11c74bad (reyoung 2011-05-07 16:10:18 +0800   2)  * This file is written by reyoung, reyoung@126.com.
11c74bad (reyoung 2011-05-07 16:10:18 +0800   3)  */
11c74bad (reyoung 2011-05-07 16:10:18 +0800   4) 
11c74bad (reyoung 2011-05-07 16:10:18 +0800   5) /*
11c74bad (reyoung 2011-05-07 16:10:18 +0800   6)  * SmallWindow.java
11c74bad (reyoung 2011-05-07 16:10:18 +0800   7)  *
11c74bad (reyoung 2011-05-07 16:10:18 +0800   8)  * Created on 2011-5-7, 14:23:10
11c74bad (reyoung 2011-05-07 16:10:18 +0800   9)  */
11c74bad (reyoung 2011-05-07 16:10:18 +0800  10) package Presentation;
11c74bad (reyoung 2011-05-07 16:10:18 +0800  11) 
05ab98ed (reyoung 2011-05-07 16:31:23 +0800  12) import Logic.PacketPool.IPacketPoolEvent;
05ab98ed (reyoung 2011-05-07 16:31:23 +0800  13) import Logic.PacketPool.IPacketPoolEventListener;
05ab98ed (reyoung 2011-05-07 16:31:23 +0800  14) import Logic.PacketPool.PacketPool;
67710671 (reyoung 2011-05-21 13:34:55 +0800  15) import Presentation.Statics.StaticsMain;
11c74bad (reyoung 2011-05-07 16:10:18 +0800  16) import java.awt.Dimension;
3c6203a0 (reyoung 2011-05-20 16:23:34 +0800  17) import java.awt.MenuItem;
11c74bad (reyoung 2011-05-07 16:10:18 +0800  18) import java.awt.Point;
11c74bad (reyoung 2011-05-07 16:10:18 +0800  19) import java.awt.PopupMenu;
3c6203a0 (reyoung 2011-05-20 16:23:34 +0800  20) import java.awt.event.ActionEvent;
3c6203a0 (reyoung 2011-05-20 16:23:34 +0800  21) import java.awt.event.ActionListener;
05ab98ed (reyoung 2011-05-07 16:31:23 +0800  22) import java.text.Format;
82e554c8 (reyoung 2011-05-20 16:32:02 +0800  23) import javax.swing.JFrame;
11c74bad (reyoung 2011-05-07 16:10:18 +0800  24) 
11c74bad (reyoung 2011-05-07 16:10:18 +0800  25) /**
11c74bad (reyoung 2011-05-07 16:10:18 +0800  26)  *
11c74bad (reyoung 2011-05-07 16:10:18 +0800  27)  * @author Reyoung
11c74bad (reyoung 2011-05-07 16:10:18 +0800  28)  */
05ab98ed (reyoung 2011-05-07 16:31:23 +0800  29) public class SmallWindow extends javax.swing.JFrame implements IPacketPoolEventListener {
11c74bad (reyoung 2011-05-07 16:10:18 +0800  30) 
11c74bad (reyoung 2011-05-07 16:10:18 +0800  31)     /** Creates new form SmallWindow */
11c74bad (reyoung 2011-05-07 16:10:18 +0800  32)     public SmallWindow() {
11c74bad (reyoung 2011-05-07 16:10:18 +0800  33)         initComponents();
11c74bad (reyoung 2011-05-07 16:10:18 +0800  34)         m_keyPressed = false;
05ab98ed (reyoung 2011-05-07 16:31:23 +0800  35)         PacketPool.Instance().addPacketPoolListener(this);
f13e5b0d (reyoung 2011-05-20 17:15:35 +0800  36)         this.setAlwaysOnTop(true);
11c74bad (reyoung 2011-05-07 16:10:18 +0800  37)     }
11c74bad (reyoung 2011-05-07 16:10:18 +0800  38) 
11c74bad (reyoung 2011-05-07 16:10:18 +0800  39)     /** This method is called from within the constructor to
11c74bad (reyoung 2011-05-07 16:10:18 +0800  40)      * initialize the form.
11c74bad (reyoung 2011-05-07 16:10:18 +0800  41)      * WARNING: Do NOT modify this code. The content of this method is
11c74bad (reyoung 2011-05-07 16:10:18 +0800  42)      * always regenerated by the Form Editor.
11c74bad (reyoung 2011-05-07 16:10:18 +0800  43)      */
11c74bad (reyoung 2011-05-07 16:10:18 +0800  44)     @SuppressWarnings("unchecked")
11c74bad (reyoung 2011-05-07 16:10:18 +0800  45)     // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
11c74bad (reyoung 2011-05-07 16:10:18 +0800  46)     private void initComponents() {
11c74bad (reyoung 2011-05-07 16:10:18 +0800  47) 
11c74bad (reyoung 2011-05-07 16:10:18 +0800  48)         jLabel1 = new javax.swing.JLabel();
11c74bad (reyoung 2011-05-07 16:10:18 +0800  49)         ui_downloadSpeed = new javax.swing.JLabel();
11c74bad (reyoung 2011-05-07 16:10:18 +0800  50)         jSeparator1 = new javax.swing.JSeparator();
11c74bad (reyoung 2011-05-07 16:10:18 +0800  51)         jLabel2 = new javax.swing.JLabel();
05ab98ed (reyoung 2011-05-07 16:31:23 +0800  52)         ui_uploadSpeed = new javax.swing.JLabel();
11c74bad (reyoung 2011-05-07 16:10:18 +0800  53) 
11c74bad (reyoung 2011-05-07 16:10:18 +0800  54)         setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
11c74bad (reyoung 2011-05-07 16:10:18 +0800  55)         setMinimumSize(new java.awt.Dimension(160, 20));
11c74bad (reyoung 2011-05-07 16:10:18 +0800  56)         setResizable(false);
11c74bad (reyoung 2011-05-07 16:10:18 +0800  57)         setUndecorated(true);
11c74bad (reyoung 2011-05-07 16:10:18 +0800  58)         addMouseListener(new java.awt.event.MouseAdapter() {
11c74bad (reyoung 2011-05-07 16:10:18 +0800  59)             public void mouseClicked(java.awt.event.MouseEvent evt) {
11c74bad (reyoung 2011-05-07 16:10:18 +0800  60)                 formMouseClicked(evt);
11c74bad (reyoung 2011-05-07 16:10:18 +0800  61)             }
11c74bad (reyoung 2011-05-07 16:10:18 +0800  62)             public void mousePressed(java.awt.event.MouseEvent evt) {
11c74bad (reyoung 2011-05-07 16:10:18 +0800  63)                 formMousePressed(evt);
11c74bad (reyoung 2011-05-07 16:10:18 +0800  64)             }
11c74bad (reyoung 2011-05-07 16:10:18 +0800  65)             public void mouseReleased(java.awt.event.MouseEvent evt) {
11c74bad (reyoung 2011-05-07 16:10:18 +0800  66)                 formMouseReleased(evt);
11c74bad (reyoung 2011-05-07 16:10:18 +0800  67)             }
11c74bad (reyoung 2011-05-07 16:10:18 +0800  68)         });
11c74bad (reyoung 2011-05-07 16:10:18 +0800  69)         addMouseMotionListener(new java.awt.event.MouseMotionAdapter() {
11c74bad (reyoung 2011-05-07 16:10:18 +0800  70)             public void mouseDragged(java.awt.event.MouseEvent evt) {
11c74bad (reyoung 2011-05-07 16:10:18 +0800  71)                 formMouseDragged(evt);
11c74bad (reyoung 2011-05-07 16:10:18 +0800  72)             }
11c74bad (reyoung 2011-05-07 16:10:18 +0800  73)             public void mouseMoved(java.awt.event.MouseEvent evt) {
11c74bad (reyoung 2011-05-07 16:10:18 +0800  74)                 formMouseMoved(evt);
11c74bad (reyoung 2011-05-07 16:10:18 +0800  75)             }
11c74bad (reyoung 2011-05-07 16:10:18 +0800  76)         });
11c74bad (reyoung 2011-05-07 16:10:18 +0800  77) 
11c74bad (reyoung 2011-05-07 16:10:18 +0800  78)         jLabel1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Presentation/arrow-down-double.png"))); // NOI18N
11c74bad (reyoung 2011-05-07 16:10:18 +0800  79) 
11c74bad (reyoung 2011-05-07 16:10:18 +0800  80)         ui_downloadSpeed.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
11c74bad (reyoung 2011-05-07 16:10:18 +0800  81)         ui_downloadSpeed.setText("KB/S");
11c74bad (reyoung 2011-05-07 16:10:18 +0800  82) 
11c74bad (reyoung 2011-05-07 16:10:18 +0800  83)         jSeparator1.setOrientation(javax.swing.SwingConstants.VERTICAL);
11c74bad (reyoung 2011-05-07 16:10:18 +0800  84) 
11c74bad (reyoung 2011-05-07 16:10:18 +0800  85)         jLabel2.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Presentation/arrow-up-double.png"))); // NOI18N
11c74bad (reyoung 2011-05-07 16:10:18 +0800  86) 
05ab98ed (reyoung 2011-05-07 16:31:23 +0800  87)         ui_uploadSpeed.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
05ab98ed (reyoung 2011-05-07 16:31:23 +0800  88)         ui_uploadSpeed.setText("KB/S");
11c74bad (reyoung 2011-05-07 16:10:18 +0800  89) 
11c74bad (reyoung 2011-05-07 16:10:18 +0800  90)         javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
11c74bad (reyoung 2011-05-07 16:10:18 +0800  91)         getContentPane().setLayout(layout);
11c74bad (reyoung 2011-05-07 16:10:18 +0800  92)         layout.setHorizontalGroup(
11c74bad (reyoung 2011-05-07 16:10:18 +0800  93)             layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
11c74bad (reyoung 2011-05-07 16:10:18 +0800  94)             .addGroup(layout.createSequentialGroup()
11c74bad (reyoung 2011-05-07 16:10:18 +0800  95)                 .addContainerGap()
11c74bad (reyoung 2011-05-07 16:10:18 +0800  96)                 .addComponent(jLabel1)
11c74bad (reyoung 2011-05-07 16:10:18 +0800  97)                 .addGap(8, 8, 8)
11c74bad (reyoung 2011-05-07 16:10:18 +0800  98)                 .addComponent(ui_downloadSpeed, javax.swing.GroupLayout.PREFERRED_SIZE, 46, javax.swing.GroupLayout.PREFERRED_SIZE)
11c74bad (reyoung 2011-05-07 16:10:18 +0800  99)                 .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
11c74bad (reyoung 2011-05-07 16:10:18 +0800 100)                 .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, 2, javax.swing.GroupLayout.PREFERRED_SIZE)
11c74bad (reyoung 2011-05-07 16:10:18 +0800 101)                 .addGap(2, 2, 2)
11c74bad (reyoung 2011-05-07 16:10:18 +0800 102)                 .addComponent(jLabel2)
11c74bad (reyoung 2011-05-07 16:10:18 +0800 103)                 .addGap(18, 18, 18)
05ab98ed (reyoung 2011-05-07 16:31:23 +0800 104)                 .addComponent(ui_uploadSpeed, javax.swing.GroupLayout.DEFAULT_SIZE, 48, Short.MAX_VALUE)
11c74bad (reyoung 2011-05-07 16:10:18 +0800 105)                 .addContainerGap())
11c74bad (reyoung 2011-05-07 16:10:18 +0800 106)         );
11c74bad (reyoung 2011-05-07 16:10:18 +0800 107)         layout.setVerticalGroup(
11c74bad (reyoung 2011-05-07 16:10:18 +0800 108)             layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
11c74bad (reyoung 2011-05-07 16:10:18 +0800 109)             .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, 16, Short.MAX_VALUE)
11c74bad (reyoung 2011-05-07 16:10:18 +0800 110)             .addComponent(ui_downloadSpeed, javax.swing.GroupLayout.DEFAULT_SIZE, 16, Short.MAX_VALUE)
11c74bad (reyoung 2011-05-07 16:10:18 +0800 111)             .addComponent(jSeparator1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 16, Short.MAX_VALUE)
11c74bad (reyoung 2011-05-07 16:10:18 +0800 112)             .addComponent(jLabel2, javax.swing.GroupLayout.DEFAULT_SIZE, 16, Short.MAX_VALUE)
05ab98ed (reyoung 2011-05-07 16:31:23 +0800 113)             .addComponent(ui_uploadSpeed, javax.swing.GroupLayout.DEFAULT_SIZE, 16, Short.MAX_VALUE)
11c74bad (reyoung 2011-05-07 16:10:18 +0800 114)         );
11c74bad (reyoung 2011-05-07 16:10:18 +0800 115) 
11c74bad (reyoung 2011-05-07 16:10:18 +0800 116)         pack();
11c74bad (reyoung 2011-05-07 16:10:18 +0800 117)     }// </editor-fold>//GEN-END:initComponents
11c74bad (reyoung 2011-05-07 16:10:18 +0800 118) 
11c74bad (reyoung 2011-05-07 16:10:18 +0800 119)     private void formMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_formMouseClicked
619b9a24 (reyoung 2011-05-20 16:42:45 +0800 120)         if (evt.getButton() == java.awt.event.MouseEvent.BUTTON3) {
11c74bad (reyoung 2011-05-07 16:10:18 +0800 121)             PopupMenu menu = new PopupMenu();
11c74bad (reyoung 2011-05-07 16:10:18 +0800 122)             this.add(menu);
619b9a24 (reyoung 2011-05-20 16:42:45 +0800 123)             {   /// 添加Show Static
619b9a24 (reyoung 2011-05-20 16:42:45 +0800 124)                 MenuItem mit = new MenuItem("Show Statics");
619b9a24 (reyoung 2011-05-20 16:42:45 +0800 125)                 mit.addActionListener(new ActionListener() {
619b9a24 (reyoung 2011-05-20 16:42:45 +0800 126)                     public void actionPerformed(ActionEvent e) {
619b9a24 (reyoung 2011-05-20 16:42:45 +0800 127)                         onStaticsShow();
619b9a24 (reyoung 2011-05-20 16:42:45 +0800 128)                     }
619b9a24 (reyoung 2011-05-20 16:42:45 +0800 129)                 });
619b9a24 (reyoung 2011-05-20 16:42:45 +0800 130)                 menu.add(mit);
619b9a24 (reyoung 2011-05-20 16:42:45 +0800 131)             }
619b9a24 (reyoung 2011-05-20 16:42:45 +0800 132)             {   /// 添加分隔符
619b9a24 (reyoung 2011-05-20 16:42:45 +0800 133)                 menu.addSeparator();
619b9a24 (reyoung 2011-05-20 16:42:45 +0800 134)             }
619b9a24 (reyoung 2011-05-20 16:42:45 +0800 135)             {   /// 添加Exit操作
619b9a24 (reyoung 2011-05-20 16:42:45 +0800 136)                 MenuItem mit = new MenuItem("Exit");
619b9a24 (reyoung 2011-05-20 16:42:45 +0800 137)                 mit.addActionListener(new ActionListener() {
619b9a24 (reyoung 2011-05-20 16:42:45 +0800 138) 
619b9a24 (reyoung 2011-05-20 16:42:45 +0800 139)                     public void actionPerformed(ActionEvent e) {
619b9a24 (reyoung 2011-05-20 16:42:45 +0800 140)                         System.exit(0);
619b9a24 (reyoung 2011-05-20 16:42:45 +0800 141)                     }
619b9a24 (reyoung 2011-05-20 16:42:45 +0800 142)                 });
619b9a24 (reyoung 2011-05-20 16:42:45 +0800 143)                 menu.add(mit);
619b9a24 (reyoung 2011-05-20 16:42:45 +0800 144)             }
619b9a24 (reyoung 2011-05-20 16:42:45 +0800 145)             menu.show(this, evt.getX(), evt.getY());
619b9a24 (reyoung 2011-05-20 16:42:45 +0800 146)         } else if (evt.getButton() == java.awt.event.MouseEvent.BUTTON1) {
82e554c8 (reyoung 2011-05-20 16:32:02 +0800 147)             onStaticsShow();
11c74bad (reyoung 2011-05-07 16:10:18 +0800 148)         }
11c74bad (reyoung 2011-05-07 16:10:18 +0800 149)     }//GEN-LAST:event_formMouseClicked
11c74bad (reyoung 2011-05-07 16:10:18 +0800 150) 
2bed1d39 (reyoung 2011-05-21 14:04:45 +0800 151)     static public void onStaticsShow() {
619b9a24 (reyoung 2011-05-20 16:42:45 +0800 152)         if (m_mainWindow == null) {
67710671 (reyoung 2011-05-21 13:34:55 +0800 153)             StaticsMain wd = new StaticsMain();
619b9a24 (reyoung 2011-05-20 16:42:45 +0800 154)             wd.setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);
619b9a24 (reyoung 2011-05-20 16:42:45 +0800 155)             m_mainWindow = wd;
619b9a24 (reyoung 2011-05-20 16:42:45 +0800 156)         }
619b9a24 (reyoung 2011-05-20 16:42:45 +0800 157)         m_mainWindow.setVisible(true);
3c6203a0 (reyoung 2011-05-20 16:23:34 +0800 158)     }
2bed1d39 (reyoung 2011-05-21 14:04:45 +0800 159)     static private JFrame m_mainWindow = null;
3c6203a0 (reyoung 2011-05-20 16:23:34 +0800 160) 
11c74bad (reyoung 2011-05-07 16:10:18 +0800 161)     private void formMouseMoved(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_formMouseMoved
619b9a24 (reyoung 2011-05-20 16:42:45 +0800 162)         if (!m_keyPressed) {
619b9a24 (reyoung 2011-05-20 16:42:45 +0800 163)             return;
619b9a24 (reyoung 2011-05-20 16:42:45 +0800 164)         }
11c74bad (reyoung 2011-05-07 16:10:18 +0800 165) //        System.out.printf("In\n");
11c74bad (reyoung 2011-05-07 16:10:18 +0800 166)         Point pos2 = evt.getLocationOnScreen();
619b9a24 (reyoung 2011-05-20 16:42:45 +0800 167)         this.setLocation(pos2.x - m_inPos.x, pos2.y - m_inPos.y);
11c74bad (reyoung 2011-05-07 16:10:18 +0800 168)     }//GEN-LAST:event_formMouseMoved
11c74bad (reyoung 2011-05-07 16:10:18 +0800 169) 
11c74bad (reyoung 2011-05-07 16:10:18 +0800 170)     private void formMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_formMousePressed
11c74bad (reyoung 2011-05-07 16:10:18 +0800 171)         m_keyPressed = true;
11c74bad (reyoung 2011-05-07 16:10:18 +0800 172)         m_inPos = evt.getPoint();
11c74bad (reyoung 2011-05-07 16:10:18 +0800 173)     }//GEN-LAST:event_formMousePressed
11c74bad (reyoung 2011-05-07 16:10:18 +0800 174) 
11c74bad (reyoung 2011-05-07 16:10:18 +0800 175)     private void formMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_formMouseReleased
11c74bad (reyoung 2011-05-07 16:10:18 +0800 176)         m_keyPressed = false;
11c74bad (reyoung 2011-05-07 16:10:18 +0800 177)     }//GEN-LAST:event_formMouseReleased
11c74bad (reyoung 2011-05-07 16:10:18 +0800 178) 
11c74bad (reyoung 2011-05-07 16:10:18 +0800 179)     private void formMouseDragged(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_formMouseDragged
11c74bad (reyoung 2011-05-07 16:10:18 +0800 180)         this.formMouseMoved(evt);
11c74bad (reyoung 2011-05-07 16:10:18 +0800 181)     }//GEN-LAST:event_formMouseDragged
619b9a24 (reyoung 2011-05-20 16:42:45 +0800 182)     private boolean m_keyPressed;
11c74bad (reyoung 2011-05-07 16:10:18 +0800 183)     private Point m_inPos;
11c74bad (reyoung 2011-05-07 16:10:18 +0800 184)     // Variables declaration - do not modify//GEN-BEGIN:variables
11c74bad (reyoung 2011-05-07 16:10:18 +0800 185)     private javax.swing.JLabel jLabel1;
11c74bad (reyoung 2011-05-07 16:10:18 +0800 186)     private javax.swing.JLabel jLabel2;
11c74bad (reyoung 2011-05-07 16:10:18 +0800 187)     private javax.swing.JSeparator jSeparator1;
11c74bad (reyoung 2011-05-07 16:10:18 +0800 188)     private javax.swing.JLabel ui_downloadSpeed;
05ab98ed (reyoung 2011-05-07 16:31:23 +0800 189)     private javax.swing.JLabel ui_uploadSpeed;
11c74bad (reyoung 2011-05-07 16:10:18 +0800 190)     // End of variables declaration//GEN-END:variables
11c74bad (reyoung 2011-05-07 16:10:18 +0800 191) 
05ab98ed (reyoung 2011-05-07 16:31:23 +0800 192)     public void onPoolRefresh(IPacketPoolEvent e) {
619b9a24 (reyoung 2011-05-20 16:42:45 +0800 193)         double us = e.getUploadSpeed() / 1024;
619b9a24 (reyoung 2011-05-20 16:42:45 +0800 194)         double ds = e.getDownloadSpeed() / 1024;
facedd7e (reyoung 2011-05-20 16:51:01 +0800 195)         this.ui_downloadSpeed.setText(String.format("%.1f KB/S", ds));
facedd7e (reyoung 2011-05-20 16:51:01 +0800 196)         this.ui_uploadSpeed.setText(String.format("%.1f KB/S", us));
05ab98ed (reyoung 2011-05-07 16:31:23 +0800 197)     }
05ab98ed (reyoung 2011-05-07 16:31:23 +0800 198) 
05ab98ed (reyoung 2011-05-07 16:31:23 +0800 199)     public boolean isEnable() {
05ab98ed (reyoung 2011-05-07 16:31:23 +0800 200)         return true;
05ab98ed (reyoung 2011-05-07 16:31:23 +0800 201)     }
05ab98ed (reyoung 2011-05-07 16:31:23 +0800 202) 
05ab98ed (reyoung 2011-05-07 16:31:23 +0800 203)     public boolean isConcern() {
05ab98ed (reyoung 2011-05-07 16:31:23 +0800 204)         return true;
05ab98ed (reyoung 2011-05-07 16:31:23 +0800 205)     }
11c74bad (reyoung 2011-05-07 16:10:18 +0800 206) }
67710671 (reyoung 2011-05-21 13:34:55 +0800  1) /*
67710671 (reyoung 2011-05-21 13:34:55 +0800  2)  * This file is written by reyoung, reyoung@126.com.
67710671 (reyoung 2011-05-21 13:34:55 +0800  3)  */
67710671 (reyoung 2011-05-21 13:34:55 +0800  4) 
67710671 (reyoung 2011-05-21 13:34:55 +0800  5) package Presentation.Statics;
67710671 (reyoung 2011-05-21 13:34:55 +0800  6) 
67710671 (reyoung 2011-05-21 13:34:55 +0800  7) import java.awt.Component;
67710671 (reyoung 2011-05-21 13:34:55 +0800  8) import javax.swing.JFrame;
67710671 (reyoung 2011-05-21 13:34:55 +0800  9) 
67710671 (reyoung 2011-05-21 13:34:55 +0800 10) /**
67710671 (reyoung 2011-05-21 13:34:55 +0800 11)  *
67710671 (reyoung 2011-05-21 13:34:55 +0800 12)  * @author Reyoung
67710671 (reyoung 2011-05-21 13:34:55 +0800 13)  */
67710671 (reyoung 2011-05-21 13:34:55 +0800 14) public abstract  class AbstractStaticsPage implements IStaticsPage{
67710671 (reyoung 2011-05-21 13:34:55 +0800 15) 
67710671 (reyoung 2011-05-21 13:34:55 +0800 16)     private Component instance = null;
67710671 (reyoung 2011-05-21 13:34:55 +0800 17) 
67710671 (reyoung 2011-05-21 13:34:55 +0800 18)     public Component getWidget() {
67710671 (reyoung 2011-05-21 13:34:55 +0800 19)         if(instance==null){
67710671 (reyoung 2011-05-21 13:34:55 +0800 20)             instance = doGetWidget();
67710671 (reyoung 2011-05-21 13:34:55 +0800 21)         }
67710671 (reyoung 2011-05-21 13:34:55 +0800 22)         return instance;
67710671 (reyoung 2011-05-21 13:34:55 +0800 23)     }
67710671 (reyoung 2011-05-21 13:34:55 +0800 24) 
67710671 (reyoung 2011-05-21 13:34:55 +0800 25)     @Override
67710671 (reyoung 2011-05-21 13:34:55 +0800 26)     public String toString(){
67710671 (reyoung 2011-05-21 13:34:55 +0800 27)         return this.doToString();
67710671 (reyoung 2011-05-21 13:34:55 +0800 28)     }
67710671 (reyoung 2011-05-21 13:34:55 +0800 29)     abstract protected String    doToString();
67710671 (reyoung 2011-05-21 13:34:55 +0800 30)     abstract protected Component doGetWidget();
67710671 (reyoung 2011-05-21 13:34:55 +0800 31) }
dc794e80 JFlowMonitor/src/Presentation/Statics/DynamicFlowChart.java  (XuDaWei 2011-05-21 14:55:47 +0800  1) /*
dc794e80 JFlowMonitor/src/Presentation/Statics/DynamicFlowChart.java  (XuDaWei 2011-05-21 14:55:47 +0800  2)  * To change this template, choose Tools | Templates
dc794e80 JFlowMonitor/src/Presentation/Statics/DynamicFlowChart.java  (XuDaWei 2011-05-21 14:55:47 +0800  3)  * and open the template in the editor.
dc794e80 JFlowMonitor/src/Presentation/Statics/DynamicFlowChart.java  (XuDaWei 2011-05-21 14:55:47 +0800  4)  */
dc794e80 JFlowMonitor/src/Presentation/Statics/DynamicFlowChart.java  (XuDaWei 2011-05-21 14:55:47 +0800  5) package Presentation.Statics;
dc794e80 JFlowMonitor/src/Presentation/Statics/DynamicFlowChart.java  (XuDaWei 2011-05-21 14:55:47 +0800  6) 
dc794e80 JFlowMonitor/src/Presentation/Statics/DynamicFlowChart.java  (XuDaWei 2011-05-21 14:55:47 +0800  7) import java.awt.Component;
dc794e80 JFlowMonitor/src/Presentation/Statics/DynamicFlowChart.java  (XuDaWei 2011-05-21 14:55:47 +0800  8) 
dc794e80 JFlowMonitor/src/Presentation/Statics/DynamicFlowChart.java  (XuDaWei 2011-05-21 14:55:47 +0800  9) /**
dc794e80 JFlowMonitor/src/Presentation/Statics/DynamicFlowChart.java  (XuDaWei 2011-05-21 14:55:47 +0800 10)  *
dc794e80 JFlowMonitor/src/Presentation/Statics/DynamicFlowChart.java  (XuDaWei 2011-05-21 14:55:47 +0800 11)  * @author Administrator
dc794e80 JFlowMonitor/src/Presentation/Statics/DynamicFlowChart.java  (XuDaWei 2011-05-21 14:55:47 +0800 12)  */
5219b954 JFlowMonitor/src/Presentation/Statics/AnalysisChartPage.java (XuDaWei 2011-05-24 18:08:17 +0800 13) public class AnalysisChartPage extends AbstractStaticsPage {
dc794e80 JFlowMonitor/src/Presentation/Statics/DynamicFlowChart.java  (XuDaWei 2011-05-21 14:55:47 +0800 14) 
dc794e80 JFlowMonitor/src/Presentation/Statics/DynamicFlowChart.java  (XuDaWei 2011-05-21 14:55:47 +0800 15)     @Override
dc794e80 JFlowMonitor/src/Presentation/Statics/DynamicFlowChart.java  (XuDaWei 2011-05-21 14:55:47 +0800 16)     protected String doToString() {
70e8c2e7 JFlowMonitor/src/Presentation/Statics/AnalysisChartPage.java (XuDaWei 2011-05-24 20:52:27 +0800 17)         return "Flow Analysis";
dc794e80 JFlowMonitor/src/Presentation/Statics/DynamicFlowChart.java  (XuDaWei 2011-05-21 14:55:47 +0800 18)     }
dc794e80 JFlowMonitor/src/Presentation/Statics/DynamicFlowChart.java  (XuDaWei 2011-05-21 14:55:47 +0800 19) 
dc794e80 JFlowMonitor/src/Presentation/Statics/DynamicFlowChart.java  (XuDaWei 2011-05-21 14:55:47 +0800 20)     @Override
dc794e80 JFlowMonitor/src/Presentation/Statics/DynamicFlowChart.java  (XuDaWei 2011-05-21 14:55:47 +0800 21)     protected Component doGetWidget() {
5219b954 JFlowMonitor/src/Presentation/Statics/AnalysisChartPage.java (XuDaWei 2011-05-24 18:08:17 +0800 22) 
98f41d00 JFlowMonitor/src/Presentation/Statics/AnalysisChartPage.java (XuDaWei 2011-05-24 19:21:54 +0800 23)        
70e8c2e7 JFlowMonitor/src/Presentation/Statics/AnalysisChartPage.java (XuDaWei 2011-05-24 20:52:27 +0800 24)         return new TimeSelectPanel();
dc794e80 JFlowMonitor/src/Presentation/Statics/DynamicFlowChart.java  (XuDaWei 2011-05-21 14:55:47 +0800 25)     }
dc794e80 JFlowMonitor/src/Presentation/Statics/DynamicFlowChart.java  (XuDaWei 2011-05-21 14:55:47 +0800 26) 
dc794e80 JFlowMonitor/src/Presentation/Statics/DynamicFlowChart.java  (XuDaWei 2011-05-21 14:55:47 +0800 27) }
743291fe (Kuziki 2011-05-25 23:01:03 +0800  1) /*
743291fe (Kuziki 2011-05-25 23:01:03 +0800  2)  * To change this template, choose Tools | Templates
743291fe (Kuziki 2011-05-25 23:01:03 +0800  3)  * and open the template in the editor.
743291fe (Kuziki 2011-05-25 23:01:03 +0800  4)  */
743291fe (Kuziki 2011-05-25 23:01:03 +0800  5) 
743291fe (Kuziki 2011-05-25 23:01:03 +0800  6) package Presentation.Statics;
743291fe (Kuziki 2011-05-25 23:01:03 +0800  7) 
743291fe (Kuziki 2011-05-25 23:01:03 +0800  8) import java.awt.Component;
743291fe (Kuziki 2011-05-25 23:01:03 +0800  9) import java.awt.Label;
743291fe (Kuziki 2011-05-25 23:01:03 +0800 10) 
743291fe (Kuziki 2011-05-25 23:01:03 +0800 11) /**
743291fe (Kuziki 2011-05-25 23:01:03 +0800 12)  *
743291fe (Kuziki 2011-05-25 23:01:03 +0800 13)  * @author Kuziki
743291fe (Kuziki 2011-05-25 23:01:03 +0800 14)  */
743291fe (Kuziki 2011-05-25 23:01:03 +0800 15) public class DataCompressPage extends AbstractStaticsPage{
743291fe (Kuziki 2011-05-25 23:01:03 +0800 16)     @Override
743291fe (Kuziki 2011-05-25 23:01:03 +0800 17)     protected Component doGetWidget() {
743291fe (Kuziki 2011-05-25 23:01:03 +0800 18)         return new DataCompressPanel();
743291fe (Kuziki 2011-05-25 23:01:03 +0800 19)     }
743291fe (Kuziki 2011-05-25 23:01:03 +0800 20) 
743291fe (Kuziki 2011-05-25 23:01:03 +0800 21)     @Override
743291fe (Kuziki 2011-05-25 23:01:03 +0800 22)     protected String doToString() {
743291fe (Kuziki 2011-05-25 23:01:03 +0800 23)         return "History-Data Compress";
743291fe (Kuziki 2011-05-25 23:01:03 +0800 24)     }
743291fe (Kuziki 2011-05-25 23:01:03 +0800 25) }
743291fe (Kuziki 2011-05-25 23:01:03 +0800   1) /*
743291fe (Kuziki 2011-05-25 23:01:03 +0800   2)  * To change this template, choose Tools | Templates
743291fe (Kuziki 2011-05-25 23:01:03 +0800   3)  * and open the template in the editor.
743291fe (Kuziki 2011-05-25 23:01:03 +0800   4)  */
743291fe (Kuziki 2011-05-25 23:01:03 +0800   5) 
743291fe (Kuziki 2011-05-25 23:01:03 +0800   6) /*
743291fe (Kuziki 2011-05-25 23:01:03 +0800   7)  * DataCompressPanel.java
743291fe (Kuziki 2011-05-25 23:01:03 +0800   8)  *
743291fe (Kuziki 2011-05-25 23:01:03 +0800   9)  * Created on 2011-5-25, 20:57:36
743291fe (Kuziki 2011-05-25 23:01:03 +0800  10)  */
743291fe (Kuziki 2011-05-25 23:01:03 +0800  11) 
743291fe (Kuziki 2011-05-25 23:01:03 +0800  12) package Presentation.Statics;
743291fe (Kuziki 2011-05-25 23:01:03 +0800  13) 
743291fe (Kuziki 2011-05-25 23:01:03 +0800  14) import Logic.History.HistoryCompressThread;
743291fe (Kuziki 2011-05-25 23:01:03 +0800  15) import java.util.Date;
743291fe (Kuziki 2011-05-25 23:01:03 +0800  16) 
743291fe (Kuziki 2011-05-25 23:01:03 +0800  17) /**
743291fe (Kuziki 2011-05-25 23:01:03 +0800  18)  *
743291fe (Kuziki 2011-05-25 23:01:03 +0800  19)  * @author Kuziki
743291fe (Kuziki 2011-05-25 23:01:03 +0800  20)  */
743291fe (Kuziki 2011-05-25 23:01:03 +0800  21) public class DataCompressPanel extends javax.swing.JPanel {
743291fe (Kuziki 2011-05-25 23:01:03 +0800  22) 
743291fe (Kuziki 2011-05-25 23:01:03 +0800  23)     /** Creates new form DataCompressPanel */
743291fe (Kuziki 2011-05-25 23:01:03 +0800  24)     public DataCompressPanel() {
743291fe (Kuziki 2011-05-25 23:01:03 +0800  25)         initComponents();
743291fe (Kuziki 2011-05-25 23:01:03 +0800  26)     }
743291fe (Kuziki 2011-05-25 23:01:03 +0800  27) 
743291fe (Kuziki 2011-05-25 23:01:03 +0800  28)     /** This method is called from within the constructor to
743291fe (Kuziki 2011-05-25 23:01:03 +0800  29)      * initialize the form.
743291fe (Kuziki 2011-05-25 23:01:03 +0800  30)      * WARNING: Do NOT modify this code. The content of this method is
743291fe (Kuziki 2011-05-25 23:01:03 +0800  31)      * always regenerated by the Form Editor.
743291fe (Kuziki 2011-05-25 23:01:03 +0800  32)      */
743291fe (Kuziki 2011-05-25 23:01:03 +0800  33)     @SuppressWarnings("unchecked")
743291fe (Kuziki 2011-05-25 23:01:03 +0800  34)     // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
743291fe (Kuziki 2011-05-25 23:01:03 +0800  35)     private void initComponents() {
743291fe (Kuziki 2011-05-25 23:01:03 +0800  36) 
743291fe (Kuziki 2011-05-25 23:01:03 +0800  37)         jLabel1 = new javax.swing.JLabel();
743291fe (Kuziki 2011-05-25 23:01:03 +0800  38)         YearLbl = new javax.swing.JTextField();
743291fe (Kuziki 2011-05-25 23:01:03 +0800  39)         MonthLbl = new javax.swing.JTextField();
743291fe (Kuziki 2011-05-25 23:01:03 +0800  40)         DayLbl = new javax.swing.JTextField();
743291fe (Kuziki 2011-05-25 23:01:03 +0800  41)         CompressBtn = new javax.swing.JButton();
743291fe (Kuziki 2011-05-25 23:01:03 +0800  42)         jLabel2 = new javax.swing.JLabel();
743291fe (Kuziki 2011-05-25 23:01:03 +0800  43)         jLabel3 = new javax.swing.JLabel();
743291fe (Kuziki 2011-05-25 23:01:03 +0800  44)         ResultLbl = new javax.swing.JLabel();
743291fe (Kuziki 2011-05-25 23:01:03 +0800  45) 
743291fe (Kuziki 2011-05-25 23:01:03 +0800  46)         jLabel1.setText("Please input the date:");
743291fe (Kuziki 2011-05-25 23:01:03 +0800  47) 
743291fe (Kuziki 2011-05-25 23:01:03 +0800  48)         YearLbl.setText("2011");
743291fe (Kuziki 2011-05-25 23:01:03 +0800  49) 
743291fe (Kuziki 2011-05-25 23:01:03 +0800  50)         MonthLbl.setText("5");
743291fe (Kuziki 2011-05-25 23:01:03 +0800  51) 
743291fe (Kuziki 2011-05-25 23:01:03 +0800  52)         DayLbl.setText("24");
743291fe (Kuziki 2011-05-25 23:01:03 +0800  53) 
743291fe (Kuziki 2011-05-25 23:01:03 +0800  54)         CompressBtn.setText("Compress");
743291fe (Kuziki 2011-05-25 23:01:03 +0800  55)         CompressBtn.addActionListener(new java.awt.event.ActionListener() {
743291fe (Kuziki 2011-05-25 23:01:03 +0800  56)             public void actionPerformed(java.awt.event.ActionEvent evt) {
743291fe (Kuziki 2011-05-25 23:01:03 +0800  57)                 CompressBtnActionPerformed(evt);
743291fe (Kuziki 2011-05-25 23:01:03 +0800  58)             }
743291fe (Kuziki 2011-05-25 23:01:03 +0800  59)         });
743291fe (Kuziki 2011-05-25 23:01:03 +0800  60) 
743291fe (Kuziki 2011-05-25 23:01:03 +0800  61)         jLabel2.setText("Warning: the detail data the specified date will be compress ");
743291fe (Kuziki 2011-05-25 23:01:03 +0800  62) 
743291fe (Kuziki 2011-05-25 23:01:03 +0800  63)         jLabel3.setText("to simple data!!!");
743291fe (Kuziki 2011-05-25 23:01:03 +0800  64) 
743291fe (Kuziki 2011-05-25 23:01:03 +0800  65)         javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
743291fe (Kuziki 2011-05-25 23:01:03 +0800  66)         this.setLayout(layout);
743291fe (Kuziki 2011-05-25 23:01:03 +0800  67)         layout.setHorizontalGroup(
743291fe (Kuziki 2011-05-25 23:01:03 +0800  68)             layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
743291fe (Kuziki 2011-05-25 23:01:03 +0800  69)             .addGroup(layout.createSequentialGroup()
743291fe (Kuziki 2011-05-25 23:01:03 +0800  70)                 .addGap(21, 21, 21)
743291fe (Kuziki 2011-05-25 23:01:03 +0800  71)                 .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
743291fe (Kuziki 2011-05-25 23:01:03 +0800  72)                     .addComponent(ResultLbl)
743291fe (Kuziki 2011-05-25 23:01:03 +0800  73)                     .addComponent(jLabel3)
743291fe (Kuziki 2011-05-25 23:01:03 +0800  74)                     .addComponent(jLabel2)
743291fe (Kuziki 2011-05-25 23:01:03 +0800  75)                     .addGroup(layout.createSequentialGroup()
743291fe (Kuziki 2011-05-25 23:01:03 +0800  76)                         .addComponent(jLabel1)
743291fe (Kuziki 2011-05-25 23:01:03 +0800  77)                         .addGap(6, 6, 6)
743291fe (Kuziki 2011-05-25 23:01:03 +0800  78)                         .addComponent(YearLbl, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE)
743291fe (Kuziki 2011-05-25 23:01:03 +0800  79)                         .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
743291fe (Kuziki 2011-05-25 23:01:03 +0800  80)                         .addComponent(MonthLbl, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE)
743291fe (Kuziki 2011-05-25 23:01:03 +0800  81)                         .addGap(10, 10, 10)
743291fe (Kuziki 2011-05-25 23:01:03 +0800  82)                         .addComponent(DayLbl, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE)
743291fe (Kuziki 2011-05-25 23:01:03 +0800  83)                         .addGap(18, 18, 18)
743291fe (Kuziki 2011-05-25 23:01:03 +0800  84)                         .addComponent(CompressBtn)))
743291fe (Kuziki 2011-05-25 23:01:03 +0800  85)                 .addContainerGap(63, Short.MAX_VALUE))
743291fe (Kuziki 2011-05-25 23:01:03 +0800  86)         );
743291fe (Kuziki 2011-05-25 23:01:03 +0800  87)         layout.setVerticalGroup(
743291fe (Kuziki 2011-05-25 23:01:03 +0800  88)             layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
743291fe (Kuziki 2011-05-25 23:01:03 +0800  89)             .addGroup(layout.createSequentialGroup()
743291fe (Kuziki 2011-05-25 23:01:03 +0800  90)                 .addGap(54, 54, 54)
743291fe (Kuziki 2011-05-25 23:01:03 +0800  91)                 .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
743291fe (Kuziki 2011-05-25 23:01:03 +0800  92)                     .addComponent(jLabel1)
743291fe (Kuziki 2011-05-25 23:01:03 +0800  93)                     .addComponent(YearLbl, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
743291fe (Kuziki 2011-05-25 23:01:03 +0800  94)                     .addComponent(DayLbl, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
743291fe (Kuziki 2011-05-25 23:01:03 +0800  95)                     .addComponent(MonthLbl, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
743291fe (Kuziki 2011-05-25 23:01:03 +0800  96)                     .addComponent(CompressBtn))
743291fe (Kuziki 2011-05-25 23:01:03 +0800  97)                 .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
743291fe (Kuziki 2011-05-25 23:01:03 +0800  98)                 .addComponent(jLabel2)
743291fe (Kuziki 2011-05-25 23:01:03 +0800  99)                 .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
743291fe (Kuziki 2011-05-25 23:01:03 +0800 100)                 .addComponent(jLabel3)
743291fe (Kuziki 2011-05-25 23:01:03 +0800 101)                 .addGap(18, 18, 18)
743291fe (Kuziki 2011-05-25 23:01:03 +0800 102)                 .addComponent(ResultLbl)
743291fe (Kuziki 2011-05-25 23:01:03 +0800 103)                 .addContainerGap(159, Short.MAX_VALUE))
743291fe (Kuziki 2011-05-25 23:01:03 +0800 104)         );
743291fe (Kuziki 2011-05-25 23:01:03 +0800 105)     }// </editor-fold>//GEN-END:initComponents
743291fe (Kuziki 2011-05-25 23:01:03 +0800 106) 
743291fe (Kuziki 2011-05-25 23:01:03 +0800 107)     private void CompressBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_CompressBtnActionPerformed
743291fe (Kuziki 2011-05-25 23:01:03 +0800 108)         String y,m,d;
743291fe (Kuziki 2011-05-25 23:01:03 +0800 109)         int iy,im,id;
743291fe (Kuziki 2011-05-25 23:01:03 +0800 110)         y = YearLbl.getText();
743291fe (Kuziki 2011-05-25 23:01:03 +0800 111)         m = MonthLbl.getText();
743291fe (Kuziki 2011-05-25 23:01:03 +0800 112)         d = DayLbl.getText();
743291fe (Kuziki 2011-05-25 23:01:03 +0800 113)         if(y.isEmpty() || m.isEmpty() || d.isEmpty())
743291fe (Kuziki 2011-05-25 23:01:03 +0800 114)         {
743291fe (Kuziki 2011-05-25 23:01:03 +0800 115)             ResultLbl.setText("Error : Date has empty");
743291fe (Kuziki 2011-05-25 23:01:03 +0800 116)             return;
743291fe (Kuziki 2011-05-25 23:01:03 +0800 117)         }
743291fe (Kuziki 2011-05-25 23:01:03 +0800 118)         else
743291fe (Kuziki 2011-05-25 23:01:03 +0800 119)         {
743291fe (Kuziki 2011-05-25 23:01:03 +0800 120)             try{
743291fe (Kuziki 2011-05-25 23:01:03 +0800 121)                 iy = Integer.parseInt(y);
743291fe (Kuziki 2011-05-25 23:01:03 +0800 122)                 im = Integer.parseInt(m);
743291fe (Kuziki 2011-05-25 23:01:03 +0800 123)                 id = Integer.parseInt(d);
743291fe (Kuziki 2011-05-25 23:01:03 +0800 124)             }
743291fe (Kuziki 2011-05-25 23:01:03 +0800 125)             catch (NumberFormatException e) {
743291fe (Kuziki 2011-05-25 23:01:03 +0800 126)             ResultLbl.setText("input error:date has wrong");
743291fe (Kuziki 2011-05-25 23:01:03 +0800 127)             return;
743291fe (Kuziki 2011-05-25 23:01:03 +0800 128)             }
743291fe (Kuziki 2011-05-25 23:01:03 +0800 129)         }
743291fe (Kuziki 2011-05-25 23:01:03 +0800 130)         Date deadDay = new Date(iy-1900,im-1,id);
743291fe (Kuziki 2011-05-25 23:01:03 +0800 131)         HistoryCompressThread hct = new HistoryCompressThread(deadDay);
743291fe (Kuziki 2011-05-25 23:01:03 +0800 132)         hct.start();
743291fe (Kuziki 2011-05-25 23:01:03 +0800 133)         ResultLbl.setText("Compress OK");
743291fe (Kuziki 2011-05-25 23:01:03 +0800 134)     }//GEN-LAST:event_CompressBtnActionPerformed
743291fe (Kuziki 2011-05-25 23:01:03 +0800 135) 
743291fe (Kuziki 2011-05-25 23:01:03 +0800 136) 
743291fe (Kuziki 2011-05-25 23:01:03 +0800 137)     // Variables declaration - do not modify//GEN-BEGIN:variables
743291fe (Kuziki 2011-05-25 23:01:03 +0800 138)     private javax.swing.JButton CompressBtn;
743291fe (Kuziki 2011-05-25 23:01:03 +0800 139)     private javax.swing.JTextField DayLbl;
743291fe (Kuziki 2011-05-25 23:01:03 +0800 140)     private javax.swing.JTextField MonthLbl;
743291fe (Kuziki 2011-05-25 23:01:03 +0800 141)     private javax.swing.JLabel ResultLbl;
743291fe (Kuziki 2011-05-25 23:01:03 +0800 142)     private javax.swing.JTextField YearLbl;
743291fe (Kuziki 2011-05-25 23:01:03 +0800 143)     private javax.swing.JLabel jLabel1;
743291fe (Kuziki 2011-05-25 23:01:03 +0800 144)     private javax.swing.JLabel jLabel2;
743291fe (Kuziki 2011-05-25 23:01:03 +0800 145)     private javax.swing.JLabel jLabel3;
743291fe (Kuziki 2011-05-25 23:01:03 +0800 146)     // End of variables declaration//GEN-END:variables
743291fe (Kuziki 2011-05-25 23:01:03 +0800 147) 
743291fe (Kuziki 2011-05-25 23:01:03 +0800 148) }
dc794e80 JFlowMonitor/src/Presentation/Statics/DynamicFlowChart.java     (XuDaWei 2011-05-21 14:55:47 +0800  1) /*
dc794e80 JFlowMonitor/src/Presentation/Statics/DynamicFlowChart.java     (XuDaWei 2011-05-21 14:55:47 +0800  2)  * To change this template, choose Tools | Templates
dc794e80 JFlowMonitor/src/Presentation/Statics/DynamicFlowChart.java     (XuDaWei 2011-05-21 14:55:47 +0800  3)  * and open the template in the editor.
dc794e80 JFlowMonitor/src/Presentation/Statics/DynamicFlowChart.java     (XuDaWei 2011-05-21 14:55:47 +0800  4)  */
dc794e80 JFlowMonitor/src/Presentation/Statics/DynamicFlowChart.java     (XuDaWei 2011-05-21 14:55:47 +0800  5) 
dc794e80 JFlowMonitor/src/Presentation/Statics/DynamicFlowChart.java     (XuDaWei 2011-05-21 14:55:47 +0800  6) package Presentation.Statics;
dc794e80 JFlowMonitor/src/Presentation/Statics/DynamicFlowChart.java     (XuDaWei 2011-05-21 14:55:47 +0800  7) 
dc794e80 JFlowMonitor/src/Presentation/Statics/DynamicFlowChart.java     (XuDaWei 2011-05-21 14:55:47 +0800  8) import java.awt.Component;
dc794e80 JFlowMonitor/src/Presentation/Statics/DynamicFlowChart.java     (XuDaWei 2011-05-21 14:55:47 +0800  9) 
dc794e80 JFlowMonitor/src/Presentation/Statics/DynamicFlowChart.java     (XuDaWei 2011-05-21 14:55:47 +0800 10) /**
dc794e80 JFlowMonitor/src/Presentation/Statics/DynamicFlowChart.java     (XuDaWei 2011-05-21 14:55:47 +0800 11)  *
dc794e80 JFlowMonitor/src/Presentation/Statics/DynamicFlowChart.java     (XuDaWei 2011-05-21 14:55:47 +0800 12)  * @author Administrator
dc794e80 JFlowMonitor/src/Presentation/Statics/DynamicFlowChart.java     (XuDaWei 2011-05-21 14:55:47 +0800 13)  */
5219b954 JFlowMonitor/src/Presentation/Statics/DynamicFlowChartPage.java (XuDaWei 2011-05-24 18:08:17 +0800 14) public class DynamicFlowChartPage extends AbstractStaticsPage{
dc794e80 JFlowMonitor/src/Presentation/Statics/DynamicFlowChart.java     (XuDaWei 2011-05-21 14:55:47 +0800 15) 
dc794e80 JFlowMonitor/src/Presentation/Statics/DynamicFlowChart.java     (XuDaWei 2011-05-21 14:55:47 +0800 16)     @Override
dc794e80 JFlowMonitor/src/Presentation/Statics/DynamicFlowChart.java     (XuDaWei 2011-05-21 14:55:47 +0800 17)     protected String doToString() {
cb8ec857 JFlowMonitor/src/Presentation/Statics/DynamicFlowChartPage.java (XuDaWei 2011-05-24 18:53:12 +0800 18)         return "Realtime Flow Observation";
dc794e80 JFlowMonitor/src/Presentation/Statics/DynamicFlowChart.java     (XuDaWei 2011-05-21 14:55:47 +0800 19)     }
dc794e80 JFlowMonitor/src/Presentation/Statics/DynamicFlowChart.java     (XuDaWei 2011-05-21 14:55:47 +0800 20) 
dc794e80 JFlowMonitor/src/Presentation/Statics/DynamicFlowChart.java     (XuDaWei 2011-05-21 14:55:47 +0800 21)     @Override
dc794e80 JFlowMonitor/src/Presentation/Statics/DynamicFlowChart.java     (XuDaWei 2011-05-21 14:55:47 +0800 22)     protected Component doGetWidget() {
70e8c2e7 JFlowMonitor/src/Presentation/Statics/DynamicFlowChartPage.java (XuDaWei 2011-05-24 20:52:27 +0800 23)         TimeSeriesChartPanel panel = new TimeSeriesChartPanel(12000,true);
dc794e80 JFlowMonitor/src/Presentation/Statics/DynamicFlowChart.java     (XuDaWei 2011-05-21 14:55:47 +0800 24)         panel.new DataGenerator(90).start();
dc794e80 JFlowMonitor/src/Presentation/Statics/DynamicFlowChart.java     (XuDaWei 2011-05-21 14:55:47 +0800 25)         
dc794e80 JFlowMonitor/src/Presentation/Statics/DynamicFlowChart.java     (XuDaWei 2011-05-21 14:55:47 +0800 26)         return panel;
dc794e80 JFlowMonitor/src/Presentation/Statics/DynamicFlowChart.java     (XuDaWei 2011-05-21 14:55:47 +0800 27)     }
dc794e80 JFlowMonitor/src/Presentation/Statics/DynamicFlowChart.java     (XuDaWei 2011-05-21 14:55:47 +0800 28) 
dc794e80 JFlowMonitor/src/Presentation/Statics/DynamicFlowChart.java     (XuDaWei 2011-05-21 14:55:47 +0800 29) }
e17661eb (Kuziki 2011-05-24 18:05:06 +0800  1) /*
e17661eb (Kuziki 2011-05-24 18:05:06 +0800  2)  * To change this template, choose Tools | Templates
e17661eb (Kuziki 2011-05-24 18:05:06 +0800  3)  * and open the template in the editor.
e17661eb (Kuziki 2011-05-24 18:05:06 +0800  4)  */
e17661eb (Kuziki 2011-05-24 18:05:06 +0800  5) 
e17661eb (Kuziki 2011-05-24 18:05:06 +0800  6) package Presentation.Statics;
e17661eb (Kuziki 2011-05-24 18:05:06 +0800  7) 
e17661eb (Kuziki 2011-05-24 18:05:06 +0800  8) import java.awt.Component;
e17661eb (Kuziki 2011-05-24 18:05:06 +0800  9) import java.awt.Label;
e17661eb (Kuziki 2011-05-24 18:05:06 +0800 10) 
e17661eb (Kuziki 2011-05-24 18:05:06 +0800 11) /**
e17661eb (Kuziki 2011-05-24 18:05:06 +0800 12)  *
e17661eb (Kuziki 2011-05-24 18:05:06 +0800 13)  * @author Kuziki
e17661eb (Kuziki 2011-05-24 18:05:06 +0800 14)  */
e17661eb (Kuziki 2011-05-24 18:05:06 +0800 15) public class HistoryFlowPage extends AbstractStaticsPage {
e17661eb (Kuziki 2011-05-24 18:05:06 +0800 16) 
e17661eb (Kuziki 2011-05-24 18:05:06 +0800 17)     @Override
e17661eb (Kuziki 2011-05-24 18:05:06 +0800 18)     protected String doToString() {
e17661eb (Kuziki 2011-05-24 18:05:06 +0800 19)         return "HistoryFlow";
e17661eb (Kuziki 2011-05-24 18:05:06 +0800 20)     }
e17661eb (Kuziki 2011-05-24 18:05:06 +0800 21) 
e17661eb (Kuziki 2011-05-24 18:05:06 +0800 22)     @Override
e17661eb (Kuziki 2011-05-24 18:05:06 +0800 23)     protected Component doGetWidget() {
e17661eb (Kuziki 2011-05-24 18:05:06 +0800 24)         return new HistoryFlowPanel();
e17661eb (Kuziki 2011-05-24 18:05:06 +0800 25)     }
e17661eb (Kuziki 2011-05-24 18:05:06 +0800 26) 
e17661eb (Kuziki 2011-05-24 18:05:06 +0800 27) }
e17661eb (Kuziki 2011-05-24 18:05:06 +0800   1) /*
e17661eb (Kuziki 2011-05-24 18:05:06 +0800   2)  * To change this template, choose Tools | Templates
e17661eb (Kuziki 2011-05-24 18:05:06 +0800   3)  * and open the template in the editor.
e17661eb (Kuziki 2011-05-24 18:05:06 +0800   4)  */
e17661eb (Kuziki 2011-05-24 18:05:06 +0800   5) 
e17661eb (Kuziki 2011-05-24 18:05:06 +0800   6) /*
e17661eb (Kuziki 2011-05-24 18:05:06 +0800   7)  * HistoryFlowPanel.java
e17661eb (Kuziki 2011-05-24 18:05:06 +0800   8)  *
e17661eb (Kuziki 2011-05-24 18:05:06 +0800   9)  * Created on 2011-5-24, 16:15:15
e17661eb (Kuziki 2011-05-24 18:05:06 +0800  10)  */
e17661eb (Kuziki 2011-05-24 18:05:06 +0800  11) package Presentation.Statics;
743291fe (Kuziki 2011-05-25 23:01:03 +0800  12) 
57da65a9 (Kuziki 2011-05-24 19:44:41 +0800  13) import Database.Flow;
e17661eb (Kuziki 2011-05-24 18:05:06 +0800  14) import Logic.History.FlowHistoryInfo;
e17661eb (Kuziki 2011-05-24 18:05:06 +0800  15) import Logic.History.HistoryInfo;
e17661eb (Kuziki 2011-05-24 18:05:06 +0800  16) import Logic.History.ProcessCompleteListener;
e17661eb (Kuziki 2011-05-24 18:05:06 +0800  17) import Logic.History.ProcessThread;
e17661eb (Kuziki 2011-05-24 18:05:06 +0800  18) import java.util.Date;
e17661eb (Kuziki 2011-05-24 18:05:06 +0800  19) import javax.swing.JDialog;
e17661eb (Kuziki 2011-05-24 18:05:06 +0800  20) import javax.swing.table.DefaultTableModel;
e17661eb (Kuziki 2011-05-24 18:05:06 +0800  21) import javax.swing.table.TableModel;
743291fe (Kuziki 2011-05-25 23:01:03 +0800  22) 
e17661eb (Kuziki 2011-05-24 18:05:06 +0800  23) /**
e17661eb (Kuziki 2011-05-24 18:05:06 +0800  24)  *
e17661eb (Kuziki 2011-05-24 18:05:06 +0800  25)  * @author Kuziki
e17661eb (Kuziki 2011-05-24 18:05:06 +0800  26)  */
e17661eb (Kuziki 2011-05-24 18:05:06 +0800  27) public class HistoryFlowPanel extends javax.swing.JPanel {
743291fe (Kuziki 2011-05-25 23:01:03 +0800  28) 
e17661eb (Kuziki 2011-05-24 18:05:06 +0800  29)     private FlowHistoryInfo fhis;
57da65a9 (Kuziki 2011-05-24 19:44:41 +0800  30)     private DefaultTableModel tableModel;
743291fe (Kuziki 2011-05-25 23:01:03 +0800  31) 
e17661eb (Kuziki 2011-05-24 18:05:06 +0800  32)     /** Creates new form HistoryFlowPanel */
e17661eb (Kuziki 2011-05-24 18:05:06 +0800  33)     public HistoryFlowPanel() {
743291fe (Kuziki 2011-05-25 23:01:03 +0800  34)         String[] colName = {"Date", "InnerFlow(KB)", "OuterFlow(KB)"};
e17661eb (Kuziki 2011-05-24 18:05:06 +0800  35)         tableModel = new DefaultTableModel(colName, 0);
e17661eb (Kuziki 2011-05-24 18:05:06 +0800  36)         initComponents();
e17661eb (Kuziki 2011-05-24 18:05:06 +0800  37) //        TableModel tableModel =HistoryTable.getModel();
e17661eb (Kuziki 2011-05-24 18:05:06 +0800  38) //        HistoryTable.setModel(tableModel);
e17661eb (Kuziki 2011-05-24 18:05:06 +0800  39)     }
e17661eb (Kuziki 2011-05-24 18:05:06 +0800  40) 
e17661eb (Kuziki 2011-05-24 18:05:06 +0800  41)     /** This method is called from within the constructor to
e17661eb (Kuziki 2011-05-24 18:05:06 +0800  42)      * initialize the form.
e17661eb (Kuziki 2011-05-24 18:05:06 +0800  43)      * WARNING: Do NOT modify this code. The content of this method is
e17661eb (Kuziki 2011-05-24 18:05:06 +0800  44)      * always regenerated by the Form Editor.
e17661eb (Kuziki 2011-05-24 18:05:06 +0800  45)      */
e17661eb (Kuziki 2011-05-24 18:05:06 +0800  46)     @SuppressWarnings("unchecked")
e17661eb (Kuziki 2011-05-24 18:05:06 +0800  47)     // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
e17661eb (Kuziki 2011-05-24 18:05:06 +0800  48)     private void initComponents() {
e17661eb (Kuziki 2011-05-24 18:05:06 +0800  49) 
e17661eb (Kuziki 2011-05-24 18:05:06 +0800  50)         jScrollPane1 = new javax.swing.JScrollPane();
e17661eb (Kuziki 2011-05-24 18:05:06 +0800  51)         jTable1 = new javax.swing.JTable();
e17661eb (Kuziki 2011-05-24 18:05:06 +0800  52)         jLabel1 = new javax.swing.JLabel();
e17661eb (Kuziki 2011-05-24 18:05:06 +0800  53)         jLabel2 = new javax.swing.JLabel();
e17661eb (Kuziki 2011-05-24 18:05:06 +0800  54)         FromYearLbl = new javax.swing.JTextField();
e17661eb (Kuziki 2011-05-24 18:05:06 +0800  55)         FromMonthLbl = new javax.swing.JTextField();
e17661eb (Kuziki 2011-05-24 18:05:06 +0800  56)         FromDayLbl = new javax.swing.JTextField();
e17661eb (Kuziki 2011-05-24 18:05:06 +0800  57)         ToYearLbl = new javax.swing.JTextField();
e17661eb (Kuziki 2011-05-24 18:05:06 +0800  58)         ToMonthLbl = new javax.swing.JTextField();
e17661eb (Kuziki 2011-05-24 18:05:06 +0800  59)         ToDayLbl = new javax.swing.JTextField();
e17661eb (Kuziki 2011-05-24 18:05:06 +0800  60)         CheckBtn = new javax.swing.JButton();
e17661eb (Kuziki 2011-05-24 18:05:06 +0800  61)         ErrorLbl = new javax.swing.JLabel();
e17661eb (Kuziki 2011-05-24 18:05:06 +0800  62)         jScrollPane2 = new javax.swing.JScrollPane();
e17661eb (Kuziki 2011-05-24 18:05:06 +0800  63)         HistoryTable = new javax.swing.JTable();
01d3cce0 (Kuziki 2011-05-24 20:43:36 +0800  64)         jLabel3 = new javax.swing.JLabel();
01d3cce0 (Kuziki 2011-05-24 20:43:36 +0800  65)         ChargeLbl = new javax.swing.JTextField();
e17661eb (Kuziki 2011-05-24 18:05:06 +0800  66) 
e17661eb (Kuziki 2011-05-24 18:05:06 +0800  67)         jTable1.setModel(new javax.swing.table.DefaultTableModel(
e17661eb (Kuziki 2011-05-24 18:05:06 +0800  68)             new Object [][] {
e17661eb (Kuziki 2011-05-24 18:05:06 +0800  69)                 {null, null, null, null},
e17661eb (Kuziki 2011-05-24 18:05:06 +0800  70)                 {null, null, null, null},
e17661eb (Kuziki 2011-05-24 18:05:06 +0800  71)                 {null, null, null, null},
e17661eb (Kuziki 2011-05-24 18:05:06 +0800  72)                 {null, null, null, null}
e17661eb (Kuziki 2011-05-24 18:05:06 +0800  73)             },
e17661eb (Kuziki 2011-05-24 18:05:06 +0800  74)             new String [] {
e17661eb (Kuziki 2011-05-24 18:05:06 +0800  75)                 "Title 1", "Title 2", "Title 3", "Title 4"
e17661eb (Kuziki 2011-05-24 18:05:06 +0800  76)             }
e17661eb (Kuziki 2011-05-24 18:05:06 +0800  77)         ));
e17661eb (Kuziki 2011-05-24 18:05:06 +0800  78)         jScrollPane1.setViewportView(jTable1);
e17661eb (Kuziki 2011-05-24 18:05:06 +0800  79) 
e17661eb (Kuziki 2011-05-24 18:05:06 +0800  80)         jLabel1.setText("FromDate:");
e17661eb (Kuziki 2011-05-24 18:05:06 +0800  81) 
e17661eb (Kuziki 2011-05-24 18:05:06 +0800  82)         jLabel2.setText("ToDate:");
e17661eb (Kuziki 2011-05-24 18:05:06 +0800  83) 
01d3cce0 (Kuziki 2011-05-24 20:43:36 +0800  84)         FromYearLbl.setText("2011");
e17661eb (Kuziki 2011-05-24 18:05:06 +0800  85)         FromYearLbl.addActionListener(new java.awt.event.ActionListener() {
e17661eb (Kuziki 2011-05-24 18:05:06 +0800  86)             public void actionPerformed(java.awt.event.ActionEvent evt) {
e17661eb (Kuziki 2011-05-24 18:05:06 +0800  87)                 FromYearLblActionPerformed(evt);
e17661eb (Kuziki 2011-05-24 18:05:06 +0800  88)             }
e17661eb (Kuziki 2011-05-24 18:05:06 +0800  89)         });
e17661eb (Kuziki 2011-05-24 18:05:06 +0800  90) 
01d3cce0 (Kuziki 2011-05-24 20:43:36 +0800  91)         FromMonthLbl.setText("5");
e17661eb (Kuziki 2011-05-24 18:05:06 +0800  92)         FromMonthLbl.addActionListener(new java.awt.event.ActionListener() {
e17661eb (Kuziki 2011-05-24 18:05:06 +0800  93)             public void actionPerformed(java.awt.event.ActionEvent evt) {
e17661eb (Kuziki 2011-05-24 18:05:06 +0800  94)                 FromMonthLblActionPerformed(evt);
e17661eb (Kuziki 2011-05-24 18:05:06 +0800  95)             }
e17661eb (Kuziki 2011-05-24 18:05:06 +0800  96)         });
e17661eb (Kuziki 2011-05-24 18:05:06 +0800  97) 
01d3cce0 (Kuziki 2011-05-24 20:43:36 +0800  98)         FromDayLbl.setText("1");
e17661eb (Kuziki 2011-05-24 18:05:06 +0800  99)         FromDayLbl.addActionListener(new java.awt.event.ActionListener() {
e17661eb (Kuziki 2011-05-24 18:05:06 +0800 100)             public void actionPerformed(java.awt.event.ActionEvent evt) {
e17661eb (Kuziki 2011-05-24 18:05:06 +0800 101)                 FromDayLblActionPerformed(evt);
e17661eb (Kuziki 2011-05-24 18:05:06 +0800 102)             }
e17661eb (Kuziki 2011-05-24 18:05:06 +0800 103)         });
e17661eb (Kuziki 2011-05-24 18:05:06 +0800 104) 
01d3cce0 (Kuziki 2011-05-24 20:43:36 +0800 105)         ToYearLbl.setText("2011");
e17661eb (Kuziki 2011-05-24 18:05:06 +0800 106)         ToYearLbl.addActionListener(new java.awt.event.ActionListener() {
e17661eb (Kuziki 2011-05-24 18:05:06 +0800 107)             public void actionPerformed(java.awt.event.ActionEvent evt) {
e17661eb (Kuziki 2011-05-24 18:05:06 +0800 108)                 ToYearLblActionPerformed(evt);
e17661eb (Kuziki 2011-05-24 18:05:06 +0800 109)             }
e17661eb (Kuziki 2011-05-24 18:05:06 +0800 110)         });
e17661eb (Kuziki 2011-05-24 18:05:06 +0800 111) 
01d3cce0 (Kuziki 2011-05-24 20:43:36 +0800 112)         ToMonthLbl.setText("6");
e17661eb (Kuziki 2011-05-24 18:05:06 +0800 113)         ToMonthLbl.addActionListener(new java.awt.event.ActionListener() {
e17661eb (Kuziki 2011-05-24 18:05:06 +0800 114)             public void actionPerformed(java.awt.event.ActionEvent evt) {
e17661eb (Kuziki 2011-05-24 18:05:06 +0800 115)                 ToMonthLblActionPerformed(evt);
e17661eb (Kuziki 2011-05-24 18:05:06 +0800 116)             }
e17661eb (Kuziki 2011-05-24 18:05:06 +0800 117)         });
e17661eb (Kuziki 2011-05-24 18:05:06 +0800 118) 
01d3cce0 (Kuziki 2011-05-24 20:43:36 +0800 119)         ToDayLbl.setText("1");
e17661eb (Kuziki 2011-05-24 18:05:06 +0800 120)         ToDayLbl.addActionListener(new java.awt.event.ActionListener() {
e17661eb (Kuziki 2011-05-24 18:05:06 +0800 121)             public void actionPerformed(java.awt.event.ActionEvent evt) {
e17661eb (Kuziki 2011-05-24 18:05:06 +0800 122)                 ToDayLblActionPerformed(evt);
e17661eb (Kuziki 2011-05-24 18:05:06 +0800 123)             }
e17661eb (Kuziki 2011-05-24 18:05:06 +0800 124)         });
e17661eb (Kuziki 2011-05-24 18:05:06 +0800 125) 
e17661eb (Kuziki 2011-05-24 18:05:06 +0800 126)         CheckBtn.setText("Check");
e17661eb (Kuziki 2011-05-24 18:05:06 +0800 127)         CheckBtn.addActionListener(new java.awt.event.ActionListener() {
e17661eb (Kuziki 2011-05-24 18:05:06 +0800 128)             public void actionPerformed(java.awt.event.ActionEvent evt) {
e17661eb (Kuziki 2011-05-24 18:05:06 +0800 129)                 CheckBtnActionPerformed(evt);
e17661eb (Kuziki 2011-05-24 18:05:06 +0800 130)             }
e17661eb (Kuziki 2011-05-24 18:05:06 +0800 131)         });
e17661eb (Kuziki 2011-05-24 18:05:06 +0800 132) 
e17661eb (Kuziki 2011-05-24 18:05:06 +0800 133)         HistoryTable.setModel(this.tableModel);
e17661eb (Kuziki 2011-05-24 18:05:06 +0800 134)         jScrollPane2.setViewportView(HistoryTable);
e17661eb (Kuziki 2011-05-24 18:05:06 +0800 135) 
01d3cce0 (Kuziki 2011-05-24 20:43:36 +0800 136)         jLabel3.setText("ChargePerKB($):");
01d3cce0 (Kuziki 2011-05-24 20:43:36 +0800 137) 
01d3cce0 (Kuziki 2011-05-24 20:43:36 +0800 138)         ChargeLbl.setText("0.001");
01d3cce0 (Kuziki 2011-05-24 20:43:36 +0800 139)         ChargeLbl.addActionListener(new java.awt.event.ActionListener() {
01d3cce0 (Kuziki 2011-05-24 20:43:36 +0800 140)             public void actionPerformed(java.awt.event.ActionEvent evt) {
01d3cce0 (Kuziki 2011-05-24 20:43:36 +0800 141)                 ChargeLblActionPerformed(evt);
01d3cce0 (Kuziki 2011-05-24 20:43:36 +0800 142)             }
01d3cce0 (Kuziki 2011-05-24 20:43:36 +0800 143)         });
01d3cce0 (Kuziki 2011-05-24 20:43:36 +0800 144) 
e17661eb (Kuziki 2011-05-24 18:05:06 +0800 145)         javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
e17661eb (Kuziki 2011-05-24 18:05:06 +0800 146)         this.setLayout(layout);
e17661eb (Kuziki 2011-05-24 18:05:06 +0800 147)         layout.setHorizontalGroup(
e17661eb (Kuziki 2011-05-24 18:05:06 +0800 148)             layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
e17661eb (Kuziki 2011-05-24 18:05:06 +0800 149)             .addGroup(layout.createSequentialGroup()
e17661eb (Kuziki 2011-05-24 18:05:06 +0800 150)                 .addGap(31, 31, 31)
e17661eb (Kuziki 2011-05-24 18:05:06 +0800 151)                 .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
57da65a9 (Kuziki 2011-05-24 19:44:41 +0800 152)                     .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 414, javax.swing.GroupLayout.PREFERRED_SIZE)
e17661eb (Kuziki 2011-05-24 18:05:06 +0800 153)                     .addGroup(layout.createSequentialGroup()
e17661eb (Kuziki 2011-05-24 18:05:06 +0800 154)                         .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
e17661eb (Kuziki 2011-05-24 18:05:06 +0800 155)                             .addComponent(jLabel2, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
e17661eb (Kuziki 2011-05-24 18:05:06 +0800 156)                             .addComponent(jLabel1, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
e17661eb (Kuziki 2011-05-24 18:05:06 +0800 157)                         .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
e17661eb (Kuziki 2011-05-24 18:05:06 +0800 158)                         .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
e17661eb (Kuziki 2011-05-24 18:05:06 +0800 159)                             .addGroup(layout.createSequentialGroup()
e17661eb (Kuziki 2011-05-24 18:05:06 +0800 160)                                 .addComponent(FromYearLbl, javax.swing.GroupLayout.PREFERRED_SIZE, 44, javax.swing.GroupLayout.PREFERRED_SIZE)
e17661eb (Kuziki 2011-05-24 18:05:06 +0800 161)                                 .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
e17661eb (Kuziki 2011-05-24 18:05:06 +0800 162)                                 .addComponent(FromMonthLbl, javax.swing.GroupLayout.PREFERRED_SIZE, 44, javax.swing.GroupLayout.PREFERRED_SIZE))
e17661eb (Kuziki 2011-05-24 18:05:06 +0800 163)                             .addGroup(layout.createSequentialGroup()
e17661eb (Kuziki 2011-05-24 18:05:06 +0800 164)                                 .addComponent(ToYearLbl, javax.swing.GroupLayout.PREFERRED_SIZE, 44, javax.swing.GroupLayout.PREFERRED_SIZE)
e17661eb (Kuziki 2011-05-24 18:05:06 +0800 165)                                 .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
e17661eb (Kuziki 2011-05-24 18:05:06 +0800 166)                                 .addComponent(ToMonthLbl, javax.swing.GroupLayout.PREFERRED_SIZE, 44, javax.swing.GroupLayout.PREFERRED_SIZE)))
e17661eb (Kuziki 2011-05-24 18:05:06 +0800 167)                         .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
e17661eb (Kuziki 2011-05-24 18:05:06 +0800 168)                         .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
e17661eb (Kuziki 2011-05-24 18:05:06 +0800 169)                             .addComponent(ToDayLbl, javax.swing.GroupLayout.PREFERRED_SIZE, 44, javax.swing.GroupLayout.PREFERRED_SIZE)
e17661eb (Kuziki 2011-05-24 18:05:06 +0800 170)                             .addComponent(FromDayLbl, javax.swing.GroupLayout.PREFERRED_SIZE, 44, javax.swing.GroupLayout.PREFERRED_SIZE))
e17661eb (Kuziki 2011-05-24 18:05:06 +0800 171)                         .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
e17661eb (Kuziki 2011-05-24 18:05:06 +0800 172)                             .addGroup(layout.createSequentialGroup()
e17661eb (Kuziki 2011-05-24 18:05:06 +0800 173)                                 .addGap(40, 40, 40)
e17661eb (Kuziki 2011-05-24 18:05:06 +0800 174)                                 .addComponent(ErrorLbl))
743291fe (Kuziki 2011-05-25 23:01:03 +0800 175)                             .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
743291fe (Kuziki 2011-05-25 23:01:03 +0800 176)                                 .addGap(7, 7, 7)
01d3cce0 (Kuziki 2011-05-24 20:43:36 +0800 177)                                 .addComponent(jLabel3)
01d3cce0 (Kuziki 2011-05-24 20:43:36 +0800 178)                                 .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
743291fe (Kuziki 2011-05-25 23:01:03 +0800 179)                                 .addComponent(ChargeLbl, javax.swing.GroupLayout.PREFERRED_SIZE, 42, javax.swing.GroupLayout.PREFERRED_SIZE)
743291fe (Kuziki 2011-05-25 23:01:03 +0800 180)                                 .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
e17661eb (Kuziki 2011-05-24 18:05:06 +0800 181)                                 .addComponent(CheckBtn)))))
743291fe (Kuziki 2011-05-25 23:01:03 +0800 182)                 .addContainerGap(15, Short.MAX_VALUE))
e17661eb (Kuziki 2011-05-24 18:05:06 +0800 183)         );
e17661eb (Kuziki 2011-05-24 18:05:06 +0800 184)         layout.setVerticalGroup(
e17661eb (Kuziki 2011-05-24 18:05:06 +0800 185)             layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
e17661eb (Kuziki 2011-05-24 18:05:06 +0800 186)             .addGroup(layout.createSequentialGroup()
e17661eb (Kuziki 2011-05-24 18:05:06 +0800 187)                 .addContainerGap()
e17661eb (Kuziki 2011-05-24 18:05:06 +0800 188)                 .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
e17661eb (Kuziki 2011-05-24 18:05:06 +0800 189)                     .addComponent(jLabel1)
e17661eb (Kuziki 2011-05-24 18:05:06 +0800 190)                     .addComponent(FromYearLbl, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
e17661eb (Kuziki 2011-05-24 18:05:06 +0800 191)                     .addComponent(FromMonthLbl, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
e17661eb (Kuziki 2011-05-24 18:05:06 +0800 192)                     .addComponent(FromDayLbl, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
743291fe (Kuziki 2011-05-25 23:01:03 +0800 193)                     .addComponent(ErrorLbl))
e17661eb (Kuziki 2011-05-24 18:05:06 +0800 194)                 .addGap(18, 18, 18)
e17661eb (Kuziki 2011-05-24 18:05:06 +0800 195)                 .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
e17661eb (Kuziki 2011-05-24 18:05:06 +0800 196)                     .addComponent(jLabel2)
e17661eb (Kuziki 2011-05-24 18:05:06 +0800 197)                     .addComponent(ToYearLbl, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
e17661eb (Kuziki 2011-05-24 18:05:06 +0800 198)                     .addComponent(ToMonthLbl, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
e17661eb (Kuziki 2011-05-24 18:05:06 +0800 199)                     .addComponent(ToDayLbl, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
743291fe (Kuziki 2011-05-25 23:01:03 +0800 200)                     .addComponent(CheckBtn)
743291fe (Kuziki 2011-05-25 23:01:03 +0800 201)                     .addComponent(jLabel3)
743291fe (Kuziki 2011-05-25 23:01:03 +0800 202)                     .addComponent(ChargeLbl, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
e17661eb (Kuziki 2011-05-24 18:05:06 +0800 203)                 .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
e17661eb (Kuziki 2011-05-24 18:05:06 +0800 204)                 .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 294, javax.swing.GroupLayout.PREFERRED_SIZE)
e17661eb (Kuziki 2011-05-24 18:05:06 +0800 205)                 .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
e17661eb (Kuziki 2011-05-24 18:05:06 +0800 206)         );
e17661eb (Kuziki 2011-05-24 18:05:06 +0800 207)     }// </editor-fold>//GEN-END:initComponents
e17661eb (Kuziki 2011-05-24 18:05:06 +0800 208) 
e17661eb (Kuziki 2011-05-24 18:05:06 +0800 209)     private void FromYearLblActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_FromYearLblActionPerformed
e17661eb (Kuziki 2011-05-24 18:05:06 +0800 210)         // TODO add your handling code here:
e17661eb (Kuziki 2011-05-24 18:05:06 +0800 211)     }//GEN-LAST:event_FromYearLblActionPerformed
e17661eb (Kuziki 2011-05-24 18:05:06 +0800 212) 
e17661eb (Kuziki 2011-05-24 18:05:06 +0800 213)     private void FromMonthLblActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_FromMonthLblActionPerformed
e17661eb (Kuziki 2011-05-24 18:05:06 +0800 214)         // TODO add your handling code here:
e17661eb (Kuziki 2011-05-24 18:05:06 +0800 215)     }//GEN-LAST:event_FromMonthLblActionPerformed
e17661eb (Kuziki 2011-05-24 18:05:06 +0800 216) 
e17661eb (Kuziki 2011-05-24 18:05:06 +0800 217)     private void FromDayLblActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_FromDayLblActionPerformed
e17661eb (Kuziki 2011-05-24 18:05:06 +0800 218)         // TODO add your handling code here:
e17661eb (Kuziki 2011-05-24 18:05:06 +0800 219)     }//GEN-LAST:event_FromDayLblActionPerformed
e17661eb (Kuziki 2011-05-24 18:05:06 +0800 220) 
e17661eb (Kuziki 2011-05-24 18:05:06 +0800 221)     private void ToYearLblActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ToYearLblActionPerformed
e17661eb (Kuziki 2011-05-24 18:05:06 +0800 222)         // TODO add your handling code here:
e17661eb (Kuziki 2011-05-24 18:05:06 +0800 223)     }//GEN-LAST:event_ToYearLblActionPerformed
e17661eb (Kuziki 2011-05-24 18:05:06 +0800 224) 
e17661eb (Kuziki 2011-05-24 18:05:06 +0800 225)     private void ToMonthLblActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ToMonthLblActionPerformed
e17661eb (Kuziki 2011-05-24 18:05:06 +0800 226)         // TODO add your handling code here:
e17661eb (Kuziki 2011-05-24 18:05:06 +0800 227)     }//GEN-LAST:event_ToMonthLblActionPerformed
e17661eb (Kuziki 2011-05-24 18:05:06 +0800 228) 
e17661eb (Kuziki 2011-05-24 18:05:06 +0800 229)     private void ToDayLblActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ToDayLblActionPerformed
e17661eb (Kuziki 2011-05-24 18:05:06 +0800 230)         // TODO add your handling code here:
e17661eb (Kuziki 2011-05-24 18:05:06 +0800 231)     }//GEN-LAST:event_ToDayLblActionPerformed
e17661eb (Kuziki 2011-05-24 18:05:06 +0800 232) 
e17661eb (Kuziki 2011-05-24 18:05:06 +0800 233)     private void CheckBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_CheckBtnActionPerformed
743291fe (Kuziki 2011-05-25 23:01:03 +0800 234)         String fyear, fmonth, fday, tyear, tmonth, tday;
e17661eb (Kuziki 2011-05-24 18:05:06 +0800 235)         fyear = FromYearLbl.getText();
e17661eb (Kuziki 2011-05-24 18:05:06 +0800 236)         fmonth = FromMonthLbl.getText();
e17661eb (Kuziki 2011-05-24 18:05:06 +0800 237)         fday = FromDayLbl.getText();
e17661eb (Kuziki 2011-05-24 18:05:06 +0800 238)         tyear = ToYearLbl.getText();
e17661eb (Kuziki 2011-05-24 18:05:06 +0800 239)         tmonth = ToMonthLbl.getText();
e17661eb (Kuziki 2011-05-24 18:05:06 +0800 240)         tday = ToDayLbl.getText();
743291fe (Kuziki 2011-05-25 23:01:03 +0800 241)         if (fyear.isEmpty() || fmonth.isEmpty() || fday.isEmpty() || tyear.isEmpty() || tmonth.isEmpty() || tday.isEmpty()) {
e17661eb (Kuziki 2011-05-24 18:05:06 +0800 242)             ErrorLbl.setText("Error FromDate or ToDate");
e17661eb (Kuziki 2011-05-24 18:05:06 +0800 243)             return;
e17661eb (Kuziki 2011-05-24 18:05:06 +0800 244)         }
e17661eb (Kuziki 2011-05-24 18:05:06 +0800 245)         ErrorLbl.setText("");
743291fe (Kuziki 2011-05-25 23:01:03 +0800 246)         int fy, fm, fd, ty, tm, td;
743291fe (Kuziki 2011-05-25 23:01:03 +0800 247)         try {
743291fe (Kuziki 2011-05-25 23:01:03 +0800 248)             fy = Integer.parseInt(fyear);
743291fe (Kuziki 2011-05-25 23:01:03 +0800 249)             fy -= 1900;
743291fe (Kuziki 2011-05-25 23:01:03 +0800 250)             fm = Integer.parseInt(fmonth);
743291fe (Kuziki 2011-05-25 23:01:03 +0800 251)             fm--;
743291fe (Kuziki 2011-05-25 23:01:03 +0800 252)             fd = Integer.parseInt(fday);
743291fe (Kuziki 2011-05-25 23:01:03 +0800 253)             ty = Integer.parseInt(tyear);
743291fe (Kuziki 2011-05-25 23:01:03 +0800 254)             ty -= 1900;
743291fe (Kuziki 2011-05-25 23:01:03 +0800 255)             tm = Integer.parseInt(tmonth);
743291fe (Kuziki 2011-05-25 23:01:03 +0800 256)             tm--;
743291fe (Kuziki 2011-05-25 23:01:03 +0800 257)             td = Integer.parseInt(tday);
743291fe (Kuziki 2011-05-25 23:01:03 +0800 258)         } catch (NumberFormatException e) {
743291fe (Kuziki 2011-05-25 23:01:03 +0800 259)             ErrorLbl.setText("input error:date has wrong");
743291fe (Kuziki 2011-05-25 23:01:03 +0800 260)             return;
743291fe (Kuziki 2011-05-25 23:01:03 +0800 261)         }
743291fe (Kuziki 2011-05-25 23:01:03 +0800 262)         Date fdate = new Date(fy, fm, fd);
743291fe (Kuziki 2011-05-25 23:01:03 +0800 263)         Date tdate = new Date(ty, tm, td);
743291fe (Kuziki 2011-05-25 23:01:03 +0800 264)         fhis = new FlowHistoryInfo(fdate, tdate);
e17661eb (Kuziki 2011-05-24 18:05:06 +0800 265)         ProcessThread pt = new ProcessThread(new ProcessCompleteListener() {
743291fe (Kuziki 2011-05-25 23:01:03 +0800 266) 
e17661eb (Kuziki 2011-05-24 18:05:06 +0800 267)             public void onProcessComplete(HistoryInfo info) {
e17661eb (Kuziki 2011-05-24 18:05:06 +0800 268)                 tableshow();
e17661eb (Kuziki 2011-05-24 18:05:06 +0800 269)             }
e17661eb (Kuziki 2011-05-24 18:05:06 +0800 270)         }, fhis);
e17661eb (Kuziki 2011-05-24 18:05:06 +0800 271)         pt.start();
e17661eb (Kuziki 2011-05-24 18:05:06 +0800 272)     }//GEN-LAST:event_CheckBtnActionPerformed
01d3cce0 (Kuziki 2011-05-24 20:43:36 +0800 273) 
01d3cce0 (Kuziki 2011-05-24 20:43:36 +0800 274)     private void ChargeLblActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ChargeLblActionPerformed
01d3cce0 (Kuziki 2011-05-24 20:43:36 +0800 275)         // TODO add your handling code here:
01d3cce0 (Kuziki 2011-05-24 20:43:36 +0800 276)     }//GEN-LAST:event_ChargeLblActionPerformed
743291fe (Kuziki 2011-05-25 23:01:03 +0800 277)     private void tableshow() {
e17661eb (Kuziki 2011-05-24 18:05:06 +0800 278)         int rowNum = this.fhis.Data.size();
743291fe (Kuziki 2011-05-25 23:01:03 +0800 279)         tableModel.setRowCount(rowNum + 2);
01d3cce0 (Kuziki 2011-05-24 20:43:36 +0800 280)         long total_in = 0;
01d3cce0 (Kuziki 2011-05-24 20:43:36 +0800 281)         long total_out = 0;
01d3cce0 (Kuziki 2011-05-24 20:43:36 +0800 282)         int rowNo = 0;
743291fe (Kuziki 2011-05-25 23:01:03 +0800 283)         for (Flow tf : fhis.Data.values()) {
743291fe (Kuziki 2011-05-25 23:01:03 +0800 284)             ;
01d3cce0 (Kuziki 2011-05-24 20:43:36 +0800 285)             total_in += tf.innerSize;
01d3cce0 (Kuziki 2011-05-24 20:43:36 +0800 286)             total_out += tf.outerSize;
01d3cce0 (Kuziki 2011-05-24 20:43:36 +0800 287)             tableModel.setValueAt(tf.sDate.toString(), rowNo, 0);
01d3cce0 (Kuziki 2011-05-24 20:43:36 +0800 288)             tableModel.setValueAt(Long.toString(tf.innerSize), rowNo, 1);
01d3cce0 (Kuziki 2011-05-24 20:43:36 +0800 289)             tableModel.setValueAt(Long.toString(tf.outerSize), rowNo, 2);
01d3cce0 (Kuziki 2011-05-24 20:43:36 +0800 290)             rowNo++;
57da65a9 (Kuziki 2011-05-24 19:44:41 +0800 291)         }
743291fe (Kuziki 2011-05-25 23:01:03 +0800 292)         tableModel.setValueAt("TotalFlow", rowNo, 0);
743291fe (Kuziki 2011-05-25 23:01:03 +0800 293)         tableModel.setValueAt(Long.toString(total_in), rowNo, 1);
743291fe (Kuziki 2011-05-25 23:01:03 +0800 294)         tableModel.setValueAt(Long.toString(total_out), rowNo, 2);
01d3cce0 (Kuziki 2011-05-24 20:43:36 +0800 295)         double cost = 0.001;
743291fe (Kuziki 2011-05-25 23:01:03 +0800 296)         if (!ChargeLbl.getText().equals("")) {
743291fe (Kuziki 2011-05-25 23:01:03 +0800 297)             cost = Double.parseDouble(ChargeLbl.getText());
743291fe (Kuziki 2011-05-25 23:01:03 +0800 298)         }
01d3cce0 (Kuziki 2011-05-24 20:43:36 +0800 299)         cost = total_out * cost;
743291fe (Kuziki 2011-05-25 23:01:03 +0800 300)         tableModel.setValueAt("TotalCharge", rowNo + 1, 0);
743291fe (Kuziki 2011-05-25 23:01:03 +0800 301)         tableModel.setValueAt("", rowNo + 1, 1);
743291fe (Kuziki 2011-05-25 23:01:03 +0800 302)         tableModel.setValueAt(cost, rowNo + 1, 2);
57da65a9 (Kuziki 2011-05-24 19:44:41 +0800 303)         //HistoryTable.setModel(tableModel);
e17661eb (Kuziki 2011-05-24 18:05:06 +0800 304)     }
e17661eb (Kuziki 2011-05-24 18:05:06 +0800 305)     // Variables declaration - do not modify//GEN-BEGIN:variables
01d3cce0 (Kuziki 2011-05-24 20:43:36 +0800 306)     private javax.swing.JTextField ChargeLbl;
e17661eb (Kuziki 2011-05-24 18:05:06 +0800 307)     private javax.swing.JButton CheckBtn;
e17661eb (Kuziki 2011-05-24 18:05:06 +0800 308)     private javax.swing.JLabel ErrorLbl;
e17661eb (Kuziki 2011-05-24 18:05:06 +0800 309)     private javax.swing.JTextField FromDayLbl;
e17661eb (Kuziki 2011-05-24 18:05:06 +0800 310)     private javax.swing.JTextField FromMonthLbl;
e17661eb (Kuziki 2011-05-24 18:05:06 +0800 311)     private javax.swing.JTextField FromYearLbl;
e17661eb (Kuziki 2011-05-24 18:05:06 +0800 312)     private javax.swing.JTable HistoryTable;
e17661eb (Kuziki 2011-05-24 18:05:06 +0800 313)     private javax.swing.JTextField ToDayLbl;
e17661eb (Kuziki 2011-05-24 18:05:06 +0800 314)     private javax.swing.JTextField ToMonthLbl;
e17661eb (Kuziki 2011-05-24 18:05:06 +0800 315)     private javax.swing.JTextField ToYearLbl;
e17661eb (Kuziki 2011-05-24 18:05:06 +0800 316)     private javax.swing.JLabel jLabel1;
e17661eb (Kuziki 2011-05-24 18:05:06 +0800 317)     private javax.swing.JLabel jLabel2;
01d3cce0 (Kuziki 2011-05-24 20:43:36 +0800 318)     private javax.swing.JLabel jLabel3;
e17661eb (Kuziki 2011-05-24 18:05:06 +0800 319)     private javax.swing.JScrollPane jScrollPane1;
e17661eb (Kuziki 2011-05-24 18:05:06 +0800 320)     private javax.swing.JScrollPane jScrollPane2;
e17661eb (Kuziki 2011-05-24 18:05:06 +0800 321)     private javax.swing.JTable jTable1;
e17661eb (Kuziki 2011-05-24 18:05:06 +0800 322)     // End of variables declaration//GEN-END:variables
e17661eb (Kuziki 2011-05-24 18:05:06 +0800 323) }
67710671 (reyoung 2011-05-21 13:34:55 +0800  1) /*
67710671 (reyoung 2011-05-21 13:34:55 +0800  2)  * This file is written by reyoung, reyoung@126.com.
67710671 (reyoung 2011-05-21 13:34:55 +0800  3)  */
67710671 (reyoung 2011-05-21 13:34:55 +0800  4) 
67710671 (reyoung 2011-05-21 13:34:55 +0800  5) package Presentation.Statics;
67710671 (reyoung 2011-05-21 13:34:55 +0800  6) 
67710671 (reyoung 2011-05-21 13:34:55 +0800  7) import java.awt.Component;
67710671 (reyoung 2011-05-21 13:34:55 +0800  8) import javax.swing.JFrame;
67710671 (reyoung 2011-05-21 13:34:55 +0800  9) 
67710671 (reyoung 2011-05-21 13:34:55 +0800 10) /**
67710671 (reyoung 2011-05-21 13:34:55 +0800 11)  *
67710671 (reyoung 2011-05-21 13:34:55 +0800 12)  * @author Reyoung
67710671 (reyoung 2011-05-21 13:34:55 +0800 13)  */
67710671 (reyoung 2011-05-21 13:34:55 +0800 14) public interface IStaticsPage {
67710671 (reyoung 2011-05-21 13:34:55 +0800 15)     @Override
67710671 (reyoung 2011-05-21 13:34:55 +0800 16)     public String toString();
67710671 (reyoung 2011-05-21 13:34:55 +0800 17)     
67710671 (reyoung 2011-05-21 13:34:55 +0800 18)     public Component getWidget();
67710671 (reyoung 2011-05-21 13:34:55 +0800 19)     
67710671 (reyoung 2011-05-21 13:34:55 +0800 20) }
67710671 (reyoung 2011-05-21 13:34:55 +0800   1) /*
67710671 (reyoung 2011-05-21 13:34:55 +0800   2)  * This file is written by reyoung, reyoung@126.com.
67710671 (reyoung 2011-05-21 13:34:55 +0800   3)  */
67710671 (reyoung 2011-05-21 13:34:55 +0800   4) 
67710671 (reyoung 2011-05-21 13:34:55 +0800   5) /*
67710671 (reyoung 2011-05-21 13:34:55 +0800   6)  * StaticsMain.java
67710671 (reyoung 2011-05-21 13:34:55 +0800   7)  *
67710671 (reyoung 2011-05-21 13:34:55 +0800   8)  * Created on 2011-5-21, 12:54:43
67710671 (reyoung 2011-05-21 13:34:55 +0800   9)  */
67710671 (reyoung 2011-05-21 13:34:55 +0800  10) package Presentation.Statics;
67710671 (reyoung 2011-05-21 13:34:55 +0800  11) 
67710671 (reyoung 2011-05-21 13:34:55 +0800  12) import java.awt.Component;
67710671 (reyoung 2011-05-21 13:34:55 +0800  13) import java.awt.event.ItemEvent;
67710671 (reyoung 2011-05-21 13:34:55 +0800  14) import java.awt.event.ItemListener;
67710671 (reyoung 2011-05-21 13:34:55 +0800  15) import java.util.ArrayList;
67710671 (reyoung 2011-05-21 13:34:55 +0800  16) import java.util.List;
67710671 (reyoung 2011-05-21 13:34:55 +0800  17) import java.util.logging.Level;
67710671 (reyoung 2011-05-21 13:34:55 +0800  18) import java.util.logging.Logger;
67710671 (reyoung 2011-05-21 13:34:55 +0800  19) 
67710671 (reyoung 2011-05-21 13:34:55 +0800  20) /**
67710671 (reyoung 2011-05-21 13:34:55 +0800  21)  *
67710671 (reyoung 2011-05-21 13:34:55 +0800  22)  * @author Reyoung
67710671 (reyoung 2011-05-21 13:34:55 +0800  23)  */
67710671 (reyoung 2011-05-21 13:34:55 +0800  24) public class StaticsMain extends javax.swing.JFrame {
67710671 (reyoung 2011-05-21 13:34:55 +0800  25) 
67710671 (reyoung 2011-05-21 13:34:55 +0800  26)     private static List<IStaticsPage> StaticPages = null;
67710671 (reyoung 2011-05-21 13:34:55 +0800  27) 
67710671 (reyoung 2011-05-21 13:34:55 +0800  28)     public static void RegistePage(Class c) throws InstantiationException, IllegalAccessException {
67710671 (reyoung 2011-05-21 13:34:55 +0800  29)         IStaticsPage page = (IStaticsPage) c.newInstance();
67710671 (reyoung 2011-05-21 13:34:55 +0800  30)         assert (page != null);
67710671 (reyoung 2011-05-21 13:34:55 +0800  31)         StaticPages.add(page);
67710671 (reyoung 2011-05-21 13:34:55 +0800  32)     }
67710671 (reyoung 2011-05-21 13:34:55 +0800  33)     private Component m_widget;
67710671 (reyoung 2011-05-21 13:34:55 +0800  34) 
67710671 (reyoung 2011-05-21 13:34:55 +0800  35)     protected static void Init() {
67710671 (reyoung 2011-05-21 13:34:55 +0800  36)         if (StaticPages == null) {
67710671 (reyoung 2011-05-21 13:34:55 +0800  37)             StaticPages = new ArrayList<IStaticsPage>();
67710671 (reyoung 2011-05-21 13:34:55 +0800  38)             try {
70e8c2e7 (XuDaWei 2011-05-24 20:52:27 +0800  39) //                RegistePage(TestPage.class);
70e8c2e7 (XuDaWei 2011-05-24 20:52:27 +0800  40) //                RegistePage(TestPage2.class);
255d040e (reyoung 2011-05-26 20:55:35 +0800  41)                 RegistePage(TimeAttributePage.class);
a4ec366e (Kuziki  2011-05-24 20:52:02 +0800  42)                 RegistePage(DynamicFlowChartPage.class);
a4ec366e (Kuziki  2011-05-24 20:52:02 +0800  43)                 RegistePage(AnalysisChartPage.class);
e17661eb (Kuziki  2011-05-24 18:05:06 +0800  44)                 RegistePage(HistoryFlowPage.class);
743291fe (Kuziki  2011-05-25 23:01:03 +0800  45)                 RegistePage(DataCompressPage.class);
67710671 (reyoung 2011-05-21 13:34:55 +0800  46)             } catch (InstantiationException ex) {
67710671 (reyoung 2011-05-21 13:34:55 +0800  47)                 Logger.getLogger(StaticsMain.class.getName()).log(Level.SEVERE, null, ex);
67710671 (reyoung 2011-05-21 13:34:55 +0800  48)             } catch (IllegalAccessException ex) {
67710671 (reyoung 2011-05-21 13:34:55 +0800  49)                 Logger.getLogger(StaticsMain.class.getName()).log(Level.SEVERE, null, ex);
67710671 (reyoung 2011-05-21 13:34:55 +0800  50)             }
67710671 (reyoung 2011-05-21 13:34:55 +0800  51)         }
67710671 (reyoung 2011-05-21 13:34:55 +0800  52)     }
67710671 (reyoung 2011-05-21 13:34:55 +0800  53) 
67710671 (reyoung 2011-05-21 13:34:55 +0800  54)     /** Creates new form StaticsMain */
67710671 (reyoung 2011-05-21 13:34:55 +0800  55)     public StaticsMain() {
67710671 (reyoung 2011-05-21 13:34:55 +0800  56)         Init();
67710671 (reyoung 2011-05-21 13:34:55 +0800  57)         initComponents();
67710671 (reyoung 2011-05-21 13:34:55 +0800  58)         for (IStaticsPage p : StaticPages) {
67710671 (reyoung 2011-05-21 13:34:55 +0800  59)             this.ui_comboBox.addItem(p);
67710671 (reyoung 2011-05-21 13:34:55 +0800  60)         }
67710671 (reyoung 2011-05-21 13:34:55 +0800  61)         this.ui_comboBox.addItemListener(new ItemListener() {
67710671 (reyoung 2011-05-21 13:34:55 +0800  62)             public void itemStateChanged(ItemEvent e) {
67710671 (reyoung 2011-05-21 13:34:55 +0800  63)                 IStaticsPage ip = (IStaticsPage) e.getItem();
67710671 (reyoung 2011-05-21 13:34:55 +0800  64)                 changeItem(ip);
67710671 (reyoung 2011-05-21 13:34:55 +0800  65)             }
67710671 (reyoung 2011-05-21 13:34:55 +0800  66)         });
67710671 (reyoung 2011-05-21 13:34:55 +0800  67)         this.changeItem((IStaticsPage) ui_comboBox.getSelectedItem());
67710671 (reyoung 2011-05-21 13:34:55 +0800  68)     }
67710671 (reyoung 2011-05-21 13:34:55 +0800  69) 
67710671 (reyoung 2011-05-21 13:34:55 +0800  70)     final protected void changeItem(IStaticsPage ip) {
67710671 (reyoung 2011-05-21 13:34:55 +0800  71)         if (ip != null) {
67710671 (reyoung 2011-05-21 13:34:55 +0800  72)             if (m_widget != null) {
a4ec366e (Kuziki  2011-05-24 20:52:02 +0800  73)                 m_widget.setVisible(false);
67710671 (reyoung 2011-05-21 13:34:55 +0800  74)                 StaticsMain.this.remove(m_widget);
67710671 (reyoung 2011-05-21 13:34:55 +0800  75)             }
67710671 (reyoung 2011-05-21 13:34:55 +0800  76)             m_widget = ip.getWidget();
67710671 (reyoung 2011-05-21 13:34:55 +0800  77)             StaticsMain.this.add(m_widget);
6f9a925c (XuDaWei 2011-05-21 18:13:17 +0800  78)             m_widget.setLocation(20, 60);
6f9a925c (XuDaWei 2011-05-21 18:13:17 +0800  79)             m_widget.setSize(480, 400);
67710671 (reyoung 2011-05-21 13:34:55 +0800  80)             m_widget.setVisible(true);
e3639f6d (reyoung 2011-05-24 19:54:53 +0800  81)             this.pack();
67710671 (reyoung 2011-05-21 13:34:55 +0800  82)         }
67710671 (reyoung 2011-05-21 13:34:55 +0800  83)     }
67710671 (reyoung 2011-05-21 13:34:55 +0800  84) 
67710671 (reyoung 2011-05-21 13:34:55 +0800  85)     /** This method is called from within the constructor to
67710671 (reyoung 2011-05-21 13:34:55 +0800  86)      * initialize the form.
67710671 (reyoung 2011-05-21 13:34:55 +0800  87)      * WARNING: Do NOT modify this code. The content of this method is
67710671 (reyoung 2011-05-21 13:34:55 +0800  88)      * always regenerated by the Form Editor.
67710671 (reyoung 2011-05-21 13:34:55 +0800  89)      */
67710671 (reyoung 2011-05-21 13:34:55 +0800  90)     @SuppressWarnings("unchecked")
67710671 (reyoung 2011-05-21 13:34:55 +0800  91)     // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
67710671 (reyoung 2011-05-21 13:34:55 +0800  92)     private void initComponents() {
67710671 (reyoung 2011-05-21 13:34:55 +0800  93) 
67710671 (reyoung 2011-05-21 13:34:55 +0800  94)         jFrame1 = new javax.swing.JFrame();
67710671 (reyoung 2011-05-21 13:34:55 +0800  95)         ui_comboBox = new javax.swing.JComboBox();
67710671 (reyoung 2011-05-21 13:34:55 +0800  96) 
67710671 (reyoung 2011-05-21 13:34:55 +0800  97)         javax.swing.GroupLayout jFrame1Layout = new javax.swing.GroupLayout(jFrame1.getContentPane());
67710671 (reyoung 2011-05-21 13:34:55 +0800  98)         jFrame1.getContentPane().setLayout(jFrame1Layout);
67710671 (reyoung 2011-05-21 13:34:55 +0800  99)         jFrame1Layout.setHorizontalGroup(
67710671 (reyoung 2011-05-21 13:34:55 +0800 100)             jFrame1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
67710671 (reyoung 2011-05-21 13:34:55 +0800 101)             .addGap(0, 400, Short.MAX_VALUE)
67710671 (reyoung 2011-05-21 13:34:55 +0800 102)         );
67710671 (reyoung 2011-05-21 13:34:55 +0800 103)         jFrame1Layout.setVerticalGroup(
67710671 (reyoung 2011-05-21 13:34:55 +0800 104)             jFrame1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
67710671 (reyoung 2011-05-21 13:34:55 +0800 105)             .addGap(0, 300, Short.MAX_VALUE)
67710671 (reyoung 2011-05-21 13:34:55 +0800 106)         );
67710671 (reyoung 2011-05-21 13:34:55 +0800 107) 
67710671 (reyoung 2011-05-21 13:34:55 +0800 108)         setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
dc794e80 (XuDaWei 2011-05-21 14:55:47 +0800 109)         setResizable(false);
67710671 (reyoung 2011-05-21 13:34:55 +0800 110) 
67710671 (reyoung 2011-05-21 13:34:55 +0800 111)         ui_comboBox.addActionListener(new java.awt.event.ActionListener() {
67710671 (reyoung 2011-05-21 13:34:55 +0800 112)             public void actionPerformed(java.awt.event.ActionEvent evt) {
67710671 (reyoung 2011-05-21 13:34:55 +0800 113)                 ui_comboBoxActionPerformed(evt);
67710671 (reyoung 2011-05-21 13:34:55 +0800 114)             }
67710671 (reyoung 2011-05-21 13:34:55 +0800 115)         });
67710671 (reyoung 2011-05-21 13:34:55 +0800 116) 
67710671 (reyoung 2011-05-21 13:34:55 +0800 117)         javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
67710671 (reyoung 2011-05-21 13:34:55 +0800 118)         getContentPane().setLayout(layout);
67710671 (reyoung 2011-05-21 13:34:55 +0800 119)         layout.setHorizontalGroup(
67710671 (reyoung 2011-05-21 13:34:55 +0800 120)             layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
67710671 (reyoung 2011-05-21 13:34:55 +0800 121)             .addGroup(layout.createSequentialGroup()
dc794e80 (XuDaWei 2011-05-21 14:55:47 +0800 122)                 .addContainerGap(314, Short.MAX_VALUE)
67710671 (reyoung 2011-05-21 13:34:55 +0800 123)                 .addComponent(ui_comboBox, javax.swing.GroupLayout.PREFERRED_SIZE, 236, javax.swing.GroupLayout.PREFERRED_SIZE)
67710671 (reyoung 2011-05-21 13:34:55 +0800 124)                 .addContainerGap())
67710671 (reyoung 2011-05-21 13:34:55 +0800 125)         );
67710671 (reyoung 2011-05-21 13:34:55 +0800 126)         layout.setVerticalGroup(
67710671 (reyoung 2011-05-21 13:34:55 +0800 127)             layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
67710671 (reyoung 2011-05-21 13:34:55 +0800 128)             .addGroup(layout.createSequentialGroup()
67710671 (reyoung 2011-05-21 13:34:55 +0800 129)                 .addContainerGap()
67710671 (reyoung 2011-05-21 13:34:55 +0800 130)                 .addComponent(ui_comboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
dc794e80 (XuDaWei 2011-05-21 14:55:47 +0800 131)                 .addContainerGap(457, Short.MAX_VALUE))
67710671 (reyoung 2011-05-21 13:34:55 +0800 132)         );
67710671 (reyoung 2011-05-21 13:34:55 +0800 133) 
67710671 (reyoung 2011-05-21 13:34:55 +0800 134)         pack();
67710671 (reyoung 2011-05-21 13:34:55 +0800 135)     }// </editor-fold>//GEN-END:initComponents
67710671 (reyoung 2011-05-21 13:34:55 +0800 136) 
67710671 (reyoung 2011-05-21 13:34:55 +0800 137)     private void ui_comboBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ui_comboBoxActionPerformed
67710671 (reyoung 2011-05-21 13:34:55 +0800 138)         // TODO add your handling code here:
67710671 (reyoung 2011-05-21 13:34:55 +0800 139)     }//GEN-LAST:event_ui_comboBoxActionPerformed
67710671 (reyoung 2011-05-21 13:34:55 +0800 140) 
67710671 (reyoung 2011-05-21 13:34:55 +0800 141)     /**
67710671 (reyoung 2011-05-21 13:34:55 +0800 142)      * @param args the command line arguments
67710671 (reyoung 2011-05-21 13:34:55 +0800 143)      */
67710671 (reyoung 2011-05-21 13:34:55 +0800 144)     public static void main(String args[]) {
67710671 (reyoung 2011-05-21 13:34:55 +0800 145)         java.awt.EventQueue.invokeLater(new Runnable() {
67710671 (reyoung 2011-05-21 13:34:55 +0800 146) 
67710671 (reyoung 2011-05-21 13:34:55 +0800 147)             public void run() {
67710671 (reyoung 2011-05-21 13:34:55 +0800 148)                 new StaticsMain().setVisible(true);
67710671 (reyoung 2011-05-21 13:34:55 +0800 149)             }
67710671 (reyoung 2011-05-21 13:34:55 +0800 150)         });
67710671 (reyoung 2011-05-21 13:34:55 +0800 151)     }
67710671 (reyoung 2011-05-21 13:34:55 +0800 152)     // Variables declaration - do not modify//GEN-BEGIN:variables
67710671 (reyoung 2011-05-21 13:34:55 +0800 153)     private javax.swing.JFrame jFrame1;
67710671 (reyoung 2011-05-21 13:34:55 +0800 154)     private javax.swing.JComboBox ui_comboBox;
67710671 (reyoung 2011-05-21 13:34:55 +0800 155)     // End of variables declaration//GEN-END:variables
67710671 (reyoung 2011-05-21 13:34:55 +0800 156) }
67710671 (reyoung 2011-05-21 13:34:55 +0800  1) /*
67710671 (reyoung 2011-05-21 13:34:55 +0800  2)  * This file is written by reyoung, reyoung@126.com.
67710671 (reyoung 2011-05-21 13:34:55 +0800  3)  */
67710671 (reyoung 2011-05-21 13:34:55 +0800  4) 
67710671 (reyoung 2011-05-21 13:34:55 +0800  5) package Presentation.Statics;
67710671 (reyoung 2011-05-21 13:34:55 +0800  6) 
5219b954 (XuDaWei 2011-05-24 18:08:17 +0800  7) import Logic.History.HistoryInfo;
92dcc5d8 (reyoung 2011-05-21 17:39:59 +0800  8) import Logic.History.MostVisitedSiteHistoryInfo;
5219b954 (XuDaWei 2011-05-24 18:08:17 +0800  9) import Logic.History.ProcessCompleteListener;
5219b954 (XuDaWei 2011-05-24 18:08:17 +0800 10) import Logic.History.ProcessThread;
67710671 (reyoung 2011-05-21 13:34:55 +0800 11) import java.awt.Component;
67710671 (reyoung 2011-05-21 13:34:55 +0800 12) import java.awt.Label;
92dcc5d8 (reyoung 2011-05-21 17:39:59 +0800 13) import java.util.Date;
67710671 (reyoung 2011-05-21 13:34:55 +0800 14) import java.util.logging.Level;
67710671 (reyoung 2011-05-21 13:34:55 +0800 15) import java.util.logging.Logger;
67710671 (reyoung 2011-05-21 13:34:55 +0800 16) 
67710671 (reyoung 2011-05-21 13:34:55 +0800 17) /**
67710671 (reyoung 2011-05-21 13:34:55 +0800 18)  *
67710671 (reyoung 2011-05-21 13:34:55 +0800 19)  * @author Reyoung
67710671 (reyoung 2011-05-21 13:34:55 +0800 20)  */
67710671 (reyoung 2011-05-21 13:34:55 +0800 21) public class TestPage extends AbstractStaticsPage{
67710671 (reyoung 2011-05-21 13:34:55 +0800 22) 
67710671 (reyoung 2011-05-21 13:34:55 +0800 23)     @Override
67710671 (reyoung 2011-05-21 13:34:55 +0800 24)     protected Component doGetWidget() {
5219b954 (XuDaWei 2011-05-24 18:08:17 +0800 25) 
67710671 (reyoung 2011-05-21 13:34:55 +0800 26)         Label l = new Label("Hello world");
5219b954 (XuDaWei 2011-05-24 18:08:17 +0800 27)         return l;
67710671 (reyoung 2011-05-21 13:34:55 +0800 28)     }
67710671 (reyoung 2011-05-21 13:34:55 +0800 29) 
67710671 (reyoung 2011-05-21 13:34:55 +0800 30)     @Override
67710671 (reyoung 2011-05-21 13:34:55 +0800 31)     protected String doToString() {
67710671 (reyoung 2011-05-21 13:34:55 +0800 32)         return "Test";
67710671 (reyoung 2011-05-21 13:34:55 +0800 33)     }
67710671 (reyoung 2011-05-21 13:34:55 +0800 34) 
67710671 (reyoung 2011-05-21 13:34:55 +0800 35) }
67710671 (reyoung 2011-05-21 13:34:55 +0800  1) /*
67710671 (reyoung 2011-05-21 13:34:55 +0800  2)  * This file is written by reyoung, reyoung@126.com.
67710671 (reyoung 2011-05-21 13:34:55 +0800  3)  */
67710671 (reyoung 2011-05-21 13:34:55 +0800  4) 
67710671 (reyoung 2011-05-21 13:34:55 +0800  5) package Presentation.Statics;
67710671 (reyoung 2011-05-21 13:34:55 +0800  6) 
67710671 (reyoung 2011-05-21 13:34:55 +0800  7) import java.awt.Component;
67710671 (reyoung 2011-05-21 13:34:55 +0800  8) import java.awt.Label;
67710671 (reyoung 2011-05-21 13:34:55 +0800  9) 
67710671 (reyoung 2011-05-21 13:34:55 +0800 10) /**
67710671 (reyoung 2011-05-21 13:34:55 +0800 11)  *
67710671 (reyoung 2011-05-21 13:34:55 +0800 12)  * @author Reyoung
67710671 (reyoung 2011-05-21 13:34:55 +0800 13)  */
67710671 (reyoung 2011-05-21 13:34:55 +0800 14) public class TestPage2 extends AbstractStaticsPage {
67710671 (reyoung 2011-05-21 13:34:55 +0800 15) 
67710671 (reyoung 2011-05-21 13:34:55 +0800 16)     @Override
67710671 (reyoung 2011-05-21 13:34:55 +0800 17)     protected String doToString() {
67710671 (reyoung 2011-05-21 13:34:55 +0800 18)         return "Test Page 2";
67710671 (reyoung 2011-05-21 13:34:55 +0800 19)     }
67710671 (reyoung 2011-05-21 13:34:55 +0800 20) 
67710671 (reyoung 2011-05-21 13:34:55 +0800 21)     @Override
67710671 (reyoung 2011-05-21 13:34:55 +0800 22)     protected Component doGetWidget() {
67710671 (reyoung 2011-05-21 13:34:55 +0800 23)         return new Label("Test Page 2");
67710671 (reyoung 2011-05-21 13:34:55 +0800 24)     }
67710671 (reyoung 2011-05-21 13:34:55 +0800 25) 
67710671 (reyoung 2011-05-21 13:34:55 +0800 26) }
255d040e (reyoung 2011-05-26 20:55:35 +0800  1) /*
255d040e (reyoung 2011-05-26 20:55:35 +0800  2)  * This file is written by reyoung, reyoung@126.com.
255d040e (reyoung 2011-05-26 20:55:35 +0800  3)  */
255d040e (reyoung 2011-05-26 20:55:35 +0800  4) 
255d040e (reyoung 2011-05-26 20:55:35 +0800  5) package Presentation.Statics;
255d040e (reyoung 2011-05-26 20:55:35 +0800  6) 
255d040e (reyoung 2011-05-26 20:55:35 +0800  7) import java.awt.Component;
255d040e (reyoung 2011-05-26 20:55:35 +0800  8) 
255d040e (reyoung 2011-05-26 20:55:35 +0800  9) /**
255d040e (reyoung 2011-05-26 20:55:35 +0800 10)  *
255d040e (reyoung 2011-05-26 20:55:35 +0800 11)  * @author Reyoung
255d040e (reyoung 2011-05-26 20:55:35 +0800 12)  */
255d040e (reyoung 2011-05-26 20:55:35 +0800 13) public class TimeAttributePage extends AbstractStaticsPage{
255d040e (reyoung 2011-05-26 20:55:35 +0800 14) 
255d040e (reyoung 2011-05-26 20:55:35 +0800 15)     @Override
255d040e (reyoung 2011-05-26 20:55:35 +0800 16)     protected String doToString() {
255d040e (reyoung 2011-05-26 20:55:35 +0800 17)         return "Time Attribute Page";
255d040e (reyoung 2011-05-26 20:55:35 +0800 18)     }
255d040e (reyoung 2011-05-26 20:55:35 +0800 19) 
255d040e (reyoung 2011-05-26 20:55:35 +0800 20)     @Override
255d040e (reyoung 2011-05-26 20:55:35 +0800 21)     protected Component doGetWidget() {
255d040e (reyoung 2011-05-26 20:55:35 +0800 22)         return new TimeAttributePanel();
255d040e (reyoung 2011-05-26 20:55:35 +0800 23)     }
255d040e (reyoung 2011-05-26 20:55:35 +0800 24) 
255d040e (reyoung 2011-05-26 20:55:35 +0800 25) }
255d040e (reyoung 2011-05-26 20:55:35 +0800   1) /*
255d040e (reyoung 2011-05-26 20:55:35 +0800   2)  * This file is written by reyoung, reyoung@126.com.
255d040e (reyoung 2011-05-26 20:55:35 +0800   3)  */
255d040e (reyoung 2011-05-26 20:55:35 +0800   4) 
255d040e (reyoung 2011-05-26 20:55:35 +0800   5) /*
255d040e (reyoung 2011-05-26 20:55:35 +0800   6)  * TimeAttributePanel.java
255d040e (reyoung 2011-05-26 20:55:35 +0800   7)  *
255d040e (reyoung 2011-05-26 20:55:35 +0800   8)  * Created on 2011-5-26, 16:21:47
255d040e (reyoung 2011-05-26 20:55:35 +0800   9)  */
255d040e (reyoung 2011-05-26 20:55:35 +0800  10) 
255d040e (reyoung 2011-05-26 20:55:35 +0800  11) package Presentation.Statics;
255d040e (reyoung 2011-05-26 20:55:35 +0800  12) 
255d040e (reyoung 2011-05-26 20:55:35 +0800  13) import Logic.History.HistoryInfo;
255d040e (reyoung 2011-05-26 20:55:35 +0800  14) import Logic.History.ProcessCompleteListener;
255d040e (reyoung 2011-05-26 20:55:35 +0800  15) import Logic.History.ProcessThread;
255d040e (reyoung 2011-05-26 20:55:35 +0800  16) import Logic.History.TimeAttributeHistoryInfo;
255d040e (reyoung 2011-05-26 20:55:35 +0800  17) import java.awt.Dialog;
255d040e (reyoung 2011-05-26 20:55:35 +0800  18) import java.util.Date;
255d040e (reyoung 2011-05-26 20:55:35 +0800  19) import javax.swing.JDialog;
255d040e (reyoung 2011-05-26 20:55:35 +0800  20) import sun.nio.cs.HistoricallyNamedCharset;
255d040e (reyoung 2011-05-26 20:55:35 +0800  21) import org.jfree.chart.plot.Plot;
255d040e (reyoung 2011-05-26 20:55:35 +0800  22) /**
255d040e (reyoung 2011-05-26 20:55:35 +0800  23)  *
255d040e (reyoung 2011-05-26 20:55:35 +0800  24)  * @author Reyoung
255d040e (reyoung 2011-05-26 20:55:35 +0800  25)  */
255d040e (reyoung 2011-05-26 20:55:35 +0800  26) public class TimeAttributePanel extends javax.swing.JPanel implements ProcessCompleteListener {
255d040e (reyoung 2011-05-26 20:55:35 +0800  27) 
255d040e (reyoung 2011-05-26 20:55:35 +0800  28)     /** Creates new form TimeAttributePanel */
255d040e (reyoung 2011-05-26 20:55:35 +0800  29)     public TimeAttributePanel() {
255d040e (reyoung 2011-05-26 20:55:35 +0800  30)         initComponents();
255d040e (reyoung 2011-05-26 20:55:35 +0800  31)     }
255d040e (reyoung 2011-05-26 20:55:35 +0800  32) 
255d040e (reyoung 2011-05-26 20:55:35 +0800  33)     /** This method is called from within the constructor to
255d040e (reyoung 2011-05-26 20:55:35 +0800  34)      * initialize the form.
255d040e (reyoung 2011-05-26 20:55:35 +0800  35)      * WARNING: Do NOT modify this code. The content of this method is
255d040e (reyoung 2011-05-26 20:55:35 +0800  36)      * always regenerated by the Form Editor.
255d040e (reyoung 2011-05-26 20:55:35 +0800  37)      */
255d040e (reyoung 2011-05-26 20:55:35 +0800  38)     @SuppressWarnings("unchecked")
255d040e (reyoung 2011-05-26 20:55:35 +0800  39)     // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
255d040e (reyoung 2011-05-26 20:55:35 +0800  40)     private void initComponents() {
255d040e (reyoung 2011-05-26 20:55:35 +0800  41) 
255d040e (reyoung 2011-05-26 20:55:35 +0800  42)         ToDayLbl = new javax.swing.JTextField();
255d040e (reyoung 2011-05-26 20:55:35 +0800  43)         ToMonthLbl = new javax.swing.JTextField();
255d040e (reyoung 2011-05-26 20:55:35 +0800  44)         ToYearLbl = new javax.swing.JTextField();
255d040e (reyoung 2011-05-26 20:55:35 +0800  45)         jLabel2 = new javax.swing.JLabel();
255d040e (reyoung 2011-05-26 20:55:35 +0800  46)         jLabel1 = new javax.swing.JLabel();
255d040e (reyoung 2011-05-26 20:55:35 +0800  47)         FromYearLbl = new javax.swing.JTextField();
255d040e (reyoung 2011-05-26 20:55:35 +0800  48)         FromMonthLbl = new javax.swing.JTextField();
255d040e (reyoung 2011-05-26 20:55:35 +0800  49)         FromDayLbl = new javax.swing.JTextField();
255d040e (reyoung 2011-05-26 20:55:35 +0800  50)         ui_checkBtn = new javax.swing.JButton();
255d040e (reyoung 2011-05-26 20:55:35 +0800  51) 
255d040e (reyoung 2011-05-26 20:55:35 +0800  52)         ToDayLbl.setText("1");
255d040e (reyoung 2011-05-26 20:55:35 +0800  53) 
255d040e (reyoung 2011-05-26 20:55:35 +0800  54)         ToMonthLbl.setText("6");
255d040e (reyoung 2011-05-26 20:55:35 +0800  55) 
255d040e (reyoung 2011-05-26 20:55:35 +0800  56)         ToYearLbl.setText("2011");
255d040e (reyoung 2011-05-26 20:55:35 +0800  57) 
255d040e (reyoung 2011-05-26 20:55:35 +0800  58)         jLabel2.setText("ToDate:");
255d040e (reyoung 2011-05-26 20:55:35 +0800  59) 
255d040e (reyoung 2011-05-26 20:55:35 +0800  60)         jLabel1.setText("FromDate:");
255d040e (reyoung 2011-05-26 20:55:35 +0800  61) 
255d040e (reyoung 2011-05-26 20:55:35 +0800  62)         FromYearLbl.setText("2011");
255d040e (reyoung 2011-05-26 20:55:35 +0800  63) 
255d040e (reyoung 2011-05-26 20:55:35 +0800  64)         FromMonthLbl.setText("5");
255d040e (reyoung 2011-05-26 20:55:35 +0800  65) 
255d040e (reyoung 2011-05-26 20:55:35 +0800  66)         FromDayLbl.setText("1");
255d040e (reyoung 2011-05-26 20:55:35 +0800  67) 
255d040e (reyoung 2011-05-26 20:55:35 +0800  68)         ui_checkBtn.setText("Check");
255d040e (reyoung 2011-05-26 20:55:35 +0800  69)         ui_checkBtn.addActionListener(new java.awt.event.ActionListener() {
255d040e (reyoung 2011-05-26 20:55:35 +0800  70)             public void actionPerformed(java.awt.event.ActionEvent evt) {
255d040e (reyoung 2011-05-26 20:55:35 +0800  71)                 ui_checkBtnActionPerformed(evt);
255d040e (reyoung 2011-05-26 20:55:35 +0800  72)             }
255d040e (reyoung 2011-05-26 20:55:35 +0800  73)         });
255d040e (reyoung 2011-05-26 20:55:35 +0800  74) 
255d040e (reyoung 2011-05-26 20:55:35 +0800  75)         javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
255d040e (reyoung 2011-05-26 20:55:35 +0800  76)         this.setLayout(layout);
255d040e (reyoung 2011-05-26 20:55:35 +0800  77)         layout.setHorizontalGroup(
255d040e (reyoung 2011-05-26 20:55:35 +0800  78)             layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
255d040e (reyoung 2011-05-26 20:55:35 +0800  79)             .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
255d040e (reyoung 2011-05-26 20:55:35 +0800  80)                 .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
255d040e (reyoung 2011-05-26 20:55:35 +0800  81)                 .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
255d040e (reyoung 2011-05-26 20:55:35 +0800  82)                     .addComponent(jLabel2, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
255d040e (reyoung 2011-05-26 20:55:35 +0800  83)                     .addComponent(jLabel1, javax.swing.GroupLayout.Alignment.LEADING))
255d040e (reyoung 2011-05-26 20:55:35 +0800  84)                 .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
255d040e (reyoung 2011-05-26 20:55:35 +0800  85)                 .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
255d040e (reyoung 2011-05-26 20:55:35 +0800  86)                     .addGroup(layout.createSequentialGroup()
255d040e (reyoung 2011-05-26 20:55:35 +0800  87)                         .addComponent(FromYearLbl, javax.swing.GroupLayout.PREFERRED_SIZE, 44, javax.swing.GroupLayout.PREFERRED_SIZE)
255d040e (reyoung 2011-05-26 20:55:35 +0800  88)                         .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
255d040e (reyoung 2011-05-26 20:55:35 +0800  89)                         .addComponent(FromMonthLbl, javax.swing.GroupLayout.PREFERRED_SIZE, 44, javax.swing.GroupLayout.PREFERRED_SIZE))
255d040e (reyoung 2011-05-26 20:55:35 +0800  90)                     .addGroup(layout.createSequentialGroup()
255d040e (reyoung 2011-05-26 20:55:35 +0800  91)                         .addComponent(ToYearLbl, javax.swing.GroupLayout.PREFERRED_SIZE, 44, javax.swing.GroupLayout.PREFERRED_SIZE)
255d040e (reyoung 2011-05-26 20:55:35 +0800  92)                         .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
255d040e (reyoung 2011-05-26 20:55:35 +0800  93)                         .addComponent(ToMonthLbl, javax.swing.GroupLayout.PREFERRED_SIZE, 44, javax.swing.GroupLayout.PREFERRED_SIZE)))
255d040e (reyoung 2011-05-26 20:55:35 +0800  94)                 .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
255d040e (reyoung 2011-05-26 20:55:35 +0800  95)                 .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
255d040e (reyoung 2011-05-26 20:55:35 +0800  96)                     .addGroup(layout.createSequentialGroup()
255d040e (reyoung 2011-05-26 20:55:35 +0800  97)                         .addComponent(ToDayLbl, javax.swing.GroupLayout.PREFERRED_SIZE, 44, javax.swing.GroupLayout.PREFERRED_SIZE)
255d040e (reyoung 2011-05-26 20:55:35 +0800  98)                         .addGap(100, 100, 100)
255d040e (reyoung 2011-05-26 20:55:35 +0800  99)                         .addComponent(ui_checkBtn))
255d040e (reyoung 2011-05-26 20:55:35 +0800 100)                     .addComponent(FromDayLbl, javax.swing.GroupLayout.PREFERRED_SIZE, 44, javax.swing.GroupLayout.PREFERRED_SIZE))
255d040e (reyoung 2011-05-26 20:55:35 +0800 101)                 .addGap(41, 41, 41))
255d040e (reyoung 2011-05-26 20:55:35 +0800 102)         );
255d040e (reyoung 2011-05-26 20:55:35 +0800 103)         layout.setVerticalGroup(
255d040e (reyoung 2011-05-26 20:55:35 +0800 104)             layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
255d040e (reyoung 2011-05-26 20:55:35 +0800 105)             .addGroup(layout.createSequentialGroup()
255d040e (reyoung 2011-05-26 20:55:35 +0800 106)                 .addGap(23, 23, 23)
255d040e (reyoung 2011-05-26 20:55:35 +0800 107)                 .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
255d040e (reyoung 2011-05-26 20:55:35 +0800 108)                     .addComponent(jLabel1)
255d040e (reyoung 2011-05-26 20:55:35 +0800 109)                     .addComponent(FromYearLbl, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
255d040e (reyoung 2011-05-26 20:55:35 +0800 110)                     .addComponent(FromMonthLbl, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
255d040e (reyoung 2011-05-26 20:55:35 +0800 111)                     .addComponent(FromDayLbl, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
255d040e (reyoung 2011-05-26 20:55:35 +0800 112)                 .addGap(18, 18, 18)
255d040e (reyoung 2011-05-26 20:55:35 +0800 113)                 .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
255d040e (reyoung 2011-05-26 20:55:35 +0800 114)                     .addComponent(jLabel2)
255d040e (reyoung 2011-05-26 20:55:35 +0800 115)                     .addComponent(ToYearLbl, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
255d040e (reyoung 2011-05-26 20:55:35 +0800 116)                     .addComponent(ToMonthLbl, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
255d040e (reyoung 2011-05-26 20:55:35 +0800 117)                     .addComponent(ToDayLbl, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
255d040e (reyoung 2011-05-26 20:55:35 +0800 118)                     .addComponent(ui_checkBtn))
255d040e (reyoung 2011-05-26 20:55:35 +0800 119)                 .addContainerGap(214, Short.MAX_VALUE))
255d040e (reyoung 2011-05-26 20:55:35 +0800 120)         );
255d040e (reyoung 2011-05-26 20:55:35 +0800 121)     }// </editor-fold>//GEN-END:initComponents
255d040e (reyoung 2011-05-26 20:55:35 +0800 122) 
255d040e (reyoung 2011-05-26 20:55:35 +0800 123)     private void ui_checkBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ui_checkBtnActionPerformed
255d040e (reyoung 2011-05-26 20:55:35 +0800 124)         String fd_s = this.FromDayLbl.getText();
255d040e (reyoung 2011-05-26 20:55:35 +0800 125)         String fm_s = this.FromMonthLbl.getText();
255d040e (reyoung 2011-05-26 20:55:35 +0800 126)         String fy_s = this.FromYearLbl.getText();
255d040e (reyoung 2011-05-26 20:55:35 +0800 127)         String td_s = this.ToDayLbl.getText();
255d040e (reyoung 2011-05-26 20:55:35 +0800 128)         String tm_s = this.ToMonthLbl.getText();
255d040e (reyoung 2011-05-26 20:55:35 +0800 129)         String ty_s = this.ToYearLbl.getText();
255d040e (reyoung 2011-05-26 20:55:35 +0800 130)         try{
255d040e (reyoung 2011-05-26 20:55:35 +0800 131)             int fd = Integer.parseInt(fd_s);
255d040e (reyoung 2011-05-26 20:55:35 +0800 132)             int fm = Integer.parseInt(fm_s);
255d040e (reyoung 2011-05-26 20:55:35 +0800 133)             int fy = Integer.parseInt(fy_s);
255d040e (reyoung 2011-05-26 20:55:35 +0800 134)             int td = Integer.parseInt(td_s);
255d040e (reyoung 2011-05-26 20:55:35 +0800 135)             int tm = Integer.parseInt(tm_s);
255d040e (reyoung 2011-05-26 20:55:35 +0800 136)             int ty = Integer.parseInt(ty_s);
255d040e (reyoung 2011-05-26 20:55:35 +0800 137)             Date from = new Date(fy-1900,fm-1,fd);
255d040e (reyoung 2011-05-26 20:55:35 +0800 138)             Date to = new Date(ty-1900,tm-1,fd);
255d040e (reyoung 2011-05-26 20:55:35 +0800 139)             ProcessThread p = new ProcessThread(this,new TimeAttributeHistoryInfo(from, to));
255d040e (reyoung 2011-05-26 20:55:35 +0800 140)             p.start();
255d040e (reyoung 2011-05-26 20:55:35 +0800 141)         }catch(Exception e){
255d040e (reyoung 2011-05-26 20:55:35 +0800 142)         }
255d040e (reyoung 2011-05-26 20:55:35 +0800 143)     }//GEN-LAST:event_ui_checkBtnActionPerformed
255d040e (reyoung 2011-05-26 20:55:35 +0800 144) 
255d040e (reyoung 2011-05-26 20:55:35 +0800 145) 
255d040e (reyoung 2011-05-26 20:55:35 +0800 146)     // Variables declaration - do not modify//GEN-BEGIN:variables
255d040e (reyoung 2011-05-26 20:55:35 +0800 147)     private javax.swing.JTextField FromDayLbl;
255d040e (reyoung 2011-05-26 20:55:35 +0800 148)     private javax.swing.JTextField FromMonthLbl;
255d040e (reyoung 2011-05-26 20:55:35 +0800 149)     private javax.swing.JTextField FromYearLbl;
255d040e (reyoung 2011-05-26 20:55:35 +0800 150)     private javax.swing.JTextField ToDayLbl;
255d040e (reyoung 2011-05-26 20:55:35 +0800 151)     private javax.swing.JTextField ToMonthLbl;
255d040e (reyoung 2011-05-26 20:55:35 +0800 152)     private javax.swing.JTextField ToYearLbl;
255d040e (reyoung 2011-05-26 20:55:35 +0800 153)     private javax.swing.JLabel jLabel1;
255d040e (reyoung 2011-05-26 20:55:35 +0800 154)     private javax.swing.JLabel jLabel2;
255d040e (reyoung 2011-05-26 20:55:35 +0800 155)     private javax.swing.JButton ui_checkBtn;
255d040e (reyoung 2011-05-26 20:55:35 +0800 156)     // End of variables declaration//GEN-END:variables
255d040e (reyoung 2011-05-26 20:55:35 +0800 157) 
255d040e (reyoung 2011-05-26 20:55:35 +0800 158)     public void onProcessComplete(HistoryInfo info) {
255d040e (reyoung 2011-05-26 20:55:35 +0800 159)     }
255d040e (reyoung 2011-05-26 20:55:35 +0800 160) 
255d040e (reyoung 2011-05-26 20:55:35 +0800 161) }
5219b954 JFlowMonitor/src/Presentation/Statics/TimeSelectPage.java  (XuDaWei 2011-05-24 18:08:17 +0800   1) /*
5219b954 JFlowMonitor/src/Presentation/Statics/TimeSelectPage.java  (XuDaWei 2011-05-24 18:08:17 +0800   2)  * To change this template, choose Tools | Templates
5219b954 JFlowMonitor/src/Presentation/Statics/TimeSelectPage.java  (XuDaWei 2011-05-24 18:08:17 +0800   3)  * and open the template in the editor.
5219b954 JFlowMonitor/src/Presentation/Statics/TimeSelectPage.java  (XuDaWei 2011-05-24 18:08:17 +0800   4)  */
5219b954 JFlowMonitor/src/Presentation/Statics/TimeSelectPage.java  (XuDaWei 2011-05-24 18:08:17 +0800   5) 
5219b954 JFlowMonitor/src/Presentation/Statics/TimeSelectPage.java  (XuDaWei 2011-05-24 18:08:17 +0800   6) /*
5219b954 JFlowMonitor/src/Presentation/Statics/TimeSelectPage.java  (XuDaWei 2011-05-24 18:08:17 +0800   7)  * TimeSelectage.java
5219b954 JFlowMonitor/src/Presentation/Statics/TimeSelectPage.java  (XuDaWei 2011-05-24 18:08:17 +0800   8)  *
5219b954 JFlowMonitor/src/Presentation/Statics/TimeSelectPage.java  (XuDaWei 2011-05-24 18:08:17 +0800   9)  * Created on 2011-5-24, 16:52:22
5219b954 JFlowMonitor/src/Presentation/Statics/TimeSelectPage.java  (XuDaWei 2011-05-24 18:08:17 +0800  10)  */
5219b954 JFlowMonitor/src/Presentation/Statics/TimeSelectPage.java  (XuDaWei 2011-05-24 18:08:17 +0800  11) package Presentation.Statics;
5219b954 JFlowMonitor/src/Presentation/Statics/TimeSelectPage.java  (XuDaWei 2011-05-24 18:08:17 +0800  12) 
cb8ec857 JFlowMonitor/src/Presentation/Statics/TimeSelectPage.java  (XuDaWei 2011-05-24 18:53:12 +0800  13) import Logic.History.FlowHistoryInfo;
cb8ec857 JFlowMonitor/src/Presentation/Statics/TimeSelectPage.java  (XuDaWei 2011-05-24 18:53:12 +0800  14) import Logic.History.HistoryInfo;
5219b954 JFlowMonitor/src/Presentation/Statics/TimeSelectPage.java  (XuDaWei 2011-05-24 18:08:17 +0800  15) import Logic.History.MostFlowedSiteHistoryInfo;
cb8ec857 JFlowMonitor/src/Presentation/Statics/TimeSelectPage.java  (XuDaWei 2011-05-24 18:53:12 +0800  16) import Logic.History.ProcessCompleteListener;
cb8ec857 JFlowMonitor/src/Presentation/Statics/TimeSelectPage.java  (XuDaWei 2011-05-24 18:53:12 +0800  17) import Logic.History.ProcessThread;
5219b954 JFlowMonitor/src/Presentation/Statics/TimeSelectPage.java  (XuDaWei 2011-05-24 18:08:17 +0800  18) import java.awt.Color;
5219b954 JFlowMonitor/src/Presentation/Statics/TimeSelectPage.java  (XuDaWei 2011-05-24 18:08:17 +0800  19) import java.awt.GradientPaint;
5219b954 JFlowMonitor/src/Presentation/Statics/TimeSelectPage.java  (XuDaWei 2011-05-24 18:08:17 +0800  20) import java.util.Date;
5219b954 JFlowMonitor/src/Presentation/Statics/TimeSelectPage.java  (XuDaWei 2011-05-24 18:08:17 +0800  21) import org.jfree.chart.ChartFactory;
5219b954 JFlowMonitor/src/Presentation/Statics/TimeSelectPage.java  (XuDaWei 2011-05-24 18:08:17 +0800  22) import org.jfree.chart.ChartPanel;
5219b954 JFlowMonitor/src/Presentation/Statics/TimeSelectPage.java  (XuDaWei 2011-05-24 18:08:17 +0800  23) import org.jfree.chart.JFreeChart;
5219b954 JFlowMonitor/src/Presentation/Statics/TimeSelectPage.java  (XuDaWei 2011-05-24 18:08:17 +0800  24) import org.jfree.chart.axis.CategoryAxis;
5219b954 JFlowMonitor/src/Presentation/Statics/TimeSelectPage.java  (XuDaWei 2011-05-24 18:08:17 +0800  25) import org.jfree.chart.axis.CategoryLabelPositions;
5219b954 JFlowMonitor/src/Presentation/Statics/TimeSelectPage.java  (XuDaWei 2011-05-24 18:08:17 +0800  26) import org.jfree.chart.axis.NumberAxis;
5219b954 JFlowMonitor/src/Presentation/Statics/TimeSelectPage.java  (XuDaWei 2011-05-24 18:08:17 +0800  27) import org.jfree.chart.plot.CategoryPlot;
5219b954 JFlowMonitor/src/Presentation/Statics/TimeSelectPage.java  (XuDaWei 2011-05-24 18:08:17 +0800  28) import org.jfree.chart.plot.PlotOrientation;
5219b954 JFlowMonitor/src/Presentation/Statics/TimeSelectPage.java  (XuDaWei 2011-05-24 18:08:17 +0800  29) import org.jfree.chart.renderer.category.BarRenderer;
5219b954 JFlowMonitor/src/Presentation/Statics/TimeSelectPage.java  (XuDaWei 2011-05-24 18:08:17 +0800  30) import org.jfree.data.category.CategoryDataset;
5219b954 JFlowMonitor/src/Presentation/Statics/TimeSelectPage.java  (XuDaWei 2011-05-24 18:08:17 +0800  31) import org.jfree.data.category.DefaultCategoryDataset;
39ffa906 JFlowMonitor/src/Presentation/Statics/TimeSelectPanel.java (XuDaWei 2011-05-25 12:49:53 +0800  32) import org.jfree.util.StringUtils;
5219b954 JFlowMonitor/src/Presentation/Statics/TimeSelectPage.java  (XuDaWei 2011-05-24 18:08:17 +0800  33) 
5219b954 JFlowMonitor/src/Presentation/Statics/TimeSelectPage.java  (XuDaWei 2011-05-24 18:08:17 +0800  34) /**
5219b954 JFlowMonitor/src/Presentation/Statics/TimeSelectPage.java  (XuDaWei 2011-05-24 18:08:17 +0800  35)  *
5219b954 JFlowMonitor/src/Presentation/Statics/TimeSelectPage.java  (XuDaWei 2011-05-24 18:08:17 +0800  36)  * @author Administrator
5219b954 JFlowMonitor/src/Presentation/Statics/TimeSelectPage.java  (XuDaWei 2011-05-24 18:08:17 +0800  37)  */
70e8c2e7 JFlowMonitor/src/Presentation/Statics/TimeSelectPanel.java (XuDaWei 2011-05-24 20:52:27 +0800  38) public class TimeSelectPanel extends javax.swing.JPanel {
5219b954 JFlowMonitor/src/Presentation/Statics/TimeSelectPage.java  (XuDaWei 2011-05-24 18:08:17 +0800  39) 
cb8ec857 JFlowMonitor/src/Presentation/Statics/TimeSelectPage.java  (XuDaWei 2011-05-24 18:53:12 +0800  40)     private MostFlowedSiteHistoryInfo info;
cb8ec857 JFlowMonitor/src/Presentation/Statics/TimeSelectPage.java  (XuDaWei 2011-05-24 18:53:12 +0800  41)     private CategoryDataset dataset;
cb8ec857 JFlowMonitor/src/Presentation/Statics/TimeSelectPage.java  (XuDaWei 2011-05-24 18:53:12 +0800  42)     private JFreeChart chart;
cb8ec857 JFlowMonitor/src/Presentation/Statics/TimeSelectPage.java  (XuDaWei 2011-05-24 18:53:12 +0800  43) 
5219b954 JFlowMonitor/src/Presentation/Statics/TimeSelectPage.java  (XuDaWei 2011-05-24 18:08:17 +0800  44)     /** Creates new form TimeSelectage */
70e8c2e7 JFlowMonitor/src/Presentation/Statics/TimeSelectPanel.java (XuDaWei 2011-05-24 20:52:27 +0800  45)     public TimeSelectPanel() {
cb8ec857 JFlowMonitor/src/Presentation/Statics/TimeSelectPage.java  (XuDaWei 2011-05-24 18:53:12 +0800  46) 
5219b954 JFlowMonitor/src/Presentation/Statics/TimeSelectPage.java  (XuDaWei 2011-05-24 18:08:17 +0800  47)         initComponents();
98f41d00 JFlowMonitor/src/Presentation/Statics/TimeSelectPage.java  (XuDaWei 2011-05-24 19:21:54 +0800  48) 
5219b954 JFlowMonitor/src/Presentation/Statics/TimeSelectPage.java  (XuDaWei 2011-05-24 18:08:17 +0800  49)     }
5219b954 JFlowMonitor/src/Presentation/Statics/TimeSelectPage.java  (XuDaWei 2011-05-24 18:08:17 +0800  50) 
5219b954 JFlowMonitor/src/Presentation/Statics/TimeSelectPage.java  (XuDaWei 2011-05-24 18:08:17 +0800  51)     /** This method is called from within the constructor to
5219b954 JFlowMonitor/src/Presentation/Statics/TimeSelectPage.java  (XuDaWei 2011-05-24 18:08:17 +0800  52)      * initialize the form.
5219b954 JFlowMonitor/src/Presentation/Statics/TimeSelectPage.java  (XuDaWei 2011-05-24 18:08:17 +0800  53)      * WARNING: Do NOT modify this code. The content of this method is
5219b954 JFlowMonitor/src/Presentation/Statics/TimeSelectPage.java  (XuDaWei 2011-05-24 18:08:17 +0800  54)      * always regenerated by the Form Editor.
5219b954 JFlowMonitor/src/Presentation/Statics/TimeSelectPage.java  (XuDaWei 2011-05-24 18:08:17 +0800  55)      */
5219b954 JFlowMonitor/src/Presentation/Statics/TimeSelectPage.java  (XuDaWei 2011-05-24 18:08:17 +0800  56)     @SuppressWarnings("unchecked")
5219b954 JFlowMonitor/src/Presentation/Statics/TimeSelectPage.java  (XuDaWei 2011-05-24 18:08:17 +0800  57)     // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
5219b954 JFlowMonitor/src/Presentation/Statics/TimeSelectPage.java  (XuDaWei 2011-05-24 18:08:17 +0800  58)     private void initComponents() {
5219b954 JFlowMonitor/src/Presentation/Statics/TimeSelectPage.java  (XuDaWei 2011-05-24 18:08:17 +0800  59) 
5219b954 JFlowMonitor/src/Presentation/Statics/TimeSelectPage.java  (XuDaWei 2011-05-24 18:08:17 +0800  60)         jLabel1 = new javax.swing.JLabel();
5219b954 JFlowMonitor/src/Presentation/Statics/TimeSelectPage.java  (XuDaWei 2011-05-24 18:08:17 +0800  61)         jLabel2 = new javax.swing.JLabel();
5219b954 JFlowMonitor/src/Presentation/Statics/TimeSelectPage.java  (XuDaWei 2011-05-24 18:08:17 +0800  62)         jTextField1 = new javax.swing.JTextField();
5219b954 JFlowMonitor/src/Presentation/Statics/TimeSelectPage.java  (XuDaWei 2011-05-24 18:08:17 +0800  63)         jLabel3 = new javax.swing.JLabel();
5219b954 JFlowMonitor/src/Presentation/Statics/TimeSelectPage.java  (XuDaWei 2011-05-24 18:08:17 +0800  64)         jTextField2 = new javax.swing.JTextField();
5219b954 JFlowMonitor/src/Presentation/Statics/TimeSelectPage.java  (XuDaWei 2011-05-24 18:08:17 +0800  65)         jLabel4 = new javax.swing.JLabel();
5219b954 JFlowMonitor/src/Presentation/Statics/TimeSelectPage.java  (XuDaWei 2011-05-24 18:08:17 +0800  66)         jTextField3 = new javax.swing.JTextField();
5219b954 JFlowMonitor/src/Presentation/Statics/TimeSelectPage.java  (XuDaWei 2011-05-24 18:08:17 +0800  67)         jLabel5 = new javax.swing.JLabel();
5219b954 JFlowMonitor/src/Presentation/Statics/TimeSelectPage.java  (XuDaWei 2011-05-24 18:08:17 +0800  68)         jLabel6 = new javax.swing.JLabel();
5219b954 JFlowMonitor/src/Presentation/Statics/TimeSelectPage.java  (XuDaWei 2011-05-24 18:08:17 +0800  69)         jTextField4 = new javax.swing.JTextField();
5219b954 JFlowMonitor/src/Presentation/Statics/TimeSelectPage.java  (XuDaWei 2011-05-24 18:08:17 +0800  70)         jTextField5 = new javax.swing.JTextField();
5219b954 JFlowMonitor/src/Presentation/Statics/TimeSelectPage.java  (XuDaWei 2011-05-24 18:08:17 +0800  71)         jLabel7 = new javax.swing.JLabel();
5219b954 JFlowMonitor/src/Presentation/Statics/TimeSelectPage.java  (XuDaWei 2011-05-24 18:08:17 +0800  72)         jLabel8 = new javax.swing.JLabel();
5219b954 JFlowMonitor/src/Presentation/Statics/TimeSelectPage.java  (XuDaWei 2011-05-24 18:08:17 +0800  73)         jTextField6 = new javax.swing.JTextField();
5219b954 JFlowMonitor/src/Presentation/Statics/TimeSelectPage.java  (XuDaWei 2011-05-24 18:08:17 +0800  74)         jButton1 = new javax.swing.JButton();
39ffa906 JFlowMonitor/src/Presentation/Statics/TimeSelectPanel.java (XuDaWei 2011-05-25 12:49:53 +0800  75)         jLabel9 = new javax.swing.JLabel();
5219b954 JFlowMonitor/src/Presentation/Statics/TimeSelectPage.java  (XuDaWei 2011-05-24 18:08:17 +0800  76) 
5219b954 JFlowMonitor/src/Presentation/Statics/TimeSelectPage.java  (XuDaWei 2011-05-24 18:08:17 +0800  77)         setPreferredSize(new java.awt.Dimension(480, 400));
5219b954 JFlowMonitor/src/Presentation/Statics/TimeSelectPage.java  (XuDaWei 2011-05-24 18:08:17 +0800  78) 
5219b954 JFlowMonitor/src/Presentation/Statics/TimeSelectPage.java  (XuDaWei 2011-05-24 18:08:17 +0800  79)         jLabel1.setText("From:");
5219b954 JFlowMonitor/src/Presentation/Statics/TimeSelectPage.java  (XuDaWei 2011-05-24 18:08:17 +0800  80) 
5219b954 JFlowMonitor/src/Presentation/Statics/TimeSelectPage.java  (XuDaWei 2011-05-24 18:08:17 +0800  81)         jLabel2.setText("Year");
5219b954 JFlowMonitor/src/Presentation/Statics/TimeSelectPage.java  (XuDaWei 2011-05-24 18:08:17 +0800  82) 
5219b954 JFlowMonitor/src/Presentation/Statics/TimeSelectPage.java  (XuDaWei 2011-05-24 18:08:17 +0800  83)         jTextField1.setText("2011");
5219b954 JFlowMonitor/src/Presentation/Statics/TimeSelectPage.java  (XuDaWei 2011-05-24 18:08:17 +0800  84)         jTextField1.addActionListener(new java.awt.event.ActionListener() {
5219b954 JFlowMonitor/src/Presentation/Statics/TimeSelectPage.java  (XuDaWei 2011-05-24 18:08:17 +0800  85)             public void actionPerformed(java.awt.event.ActionEvent evt) {
5219b954 JFlowMonitor/src/Presentation/Statics/TimeSelectPage.java  (XuDaWei 2011-05-24 18:08:17 +0800  86)                 jTextField1ActionPerformed(evt);
5219b954 JFlowMonitor/src/Presentation/Statics/TimeSelectPage.java  (XuDaWei 2011-05-24 18:08:17 +0800  87)             }
5219b954 JFlowMonitor/src/Presentation/Statics/TimeSelectPage.java  (XuDaWei 2011-05-24 18:08:17 +0800  88)         });
5219b954 JFlowMonitor/src/Presentation/Statics/TimeSelectPage.java  (XuDaWei 2011-05-24 18:08:17 +0800  89) 
5219b954 JFlowMonitor/src/Presentation/Statics/TimeSelectPage.java  (XuDaWei 2011-05-24 18:08:17 +0800  90)         jLabel3.setText("Month");
5219b954 JFlowMonitor/src/Presentation/Statics/TimeSelectPage.java  (XuDaWei 2011-05-24 18:08:17 +0800  91) 
5219b954 JFlowMonitor/src/Presentation/Statics/TimeSelectPage.java  (XuDaWei 2011-05-24 18:08:17 +0800  92)         jTextField2.setText("05");
5219b954 JFlowMonitor/src/Presentation/Statics/TimeSelectPage.java  (XuDaWei 2011-05-24 18:08:17 +0800  93) 
5219b954 JFlowMonitor/src/Presentation/Statics/TimeSelectPage.java  (XuDaWei 2011-05-24 18:08:17 +0800  94)         jLabel4.setText("Day");
5219b954 JFlowMonitor/src/Presentation/Statics/TimeSelectPage.java  (XuDaWei 2011-05-24 18:08:17 +0800  95) 
98f41d00 JFlowMonitor/src/Presentation/Statics/TimeSelectPage.java  (XuDaWei 2011-05-24 19:21:54 +0800  96)         jTextField3.setText("10");
98f41d00 JFlowMonitor/src/Presentation/Statics/TimeSelectPage.java  (XuDaWei 2011-05-24 19:21:54 +0800  97)         jTextField3.addActionListener(new java.awt.event.ActionListener() {
98f41d00 JFlowMonitor/src/Presentation/Statics/TimeSelectPage.java  (XuDaWei 2011-05-24 19:21:54 +0800  98)             public void actionPerformed(java.awt.event.ActionEvent evt) {
98f41d00 JFlowMonitor/src/Presentation/Statics/TimeSelectPage.java  (XuDaWei 2011-05-24 19:21:54 +0800  99)                 jTextField3ActionPerformed(evt);
98f41d00 JFlowMonitor/src/Presentation/Statics/TimeSelectPage.java  (XuDaWei 2011-05-24 19:21:54 +0800 100)             }
98f41d00 JFlowMonitor/src/Presentation/Statics/TimeSelectPage.java  (XuDaWei 2011-05-24 19:21:54 +0800 101)         });
5219b954 JFlowMonitor/src/Presentation/Statics/TimeSelectPage.java  (XuDaWei 2011-05-24 18:08:17 +0800 102) 
5219b954 JFlowMonitor/src/Presentation/Statics/TimeSelectPage.java  (XuDaWei 2011-05-24 18:08:17 +0800 103)         jLabel5.setText("To:");
5219b954 JFlowMonitor/src/Presentation/Statics/TimeSelectPage.java  (XuDaWei 2011-05-24 18:08:17 +0800 104) 
5219b954 JFlowMonitor/src/Presentation/Statics/TimeSelectPage.java  (XuDaWei 2011-05-24 18:08:17 +0800 105)         jLabel6.setText("Year");
5219b954 JFlowMonitor/src/Presentation/Statics/TimeSelectPage.java  (XuDaWei 2011-05-24 18:08:17 +0800 106) 
5219b954 JFlowMonitor/src/Presentation/Statics/TimeSelectPage.java  (XuDaWei 2011-05-24 18:08:17 +0800 107)         jTextField4.setText("2011");
5219b954 JFlowMonitor/src/Presentation/Statics/TimeSelectPage.java  (XuDaWei 2011-05-24 18:08:17 +0800 108) 
5219b954 JFlowMonitor/src/Presentation/Statics/TimeSelectPage.java  (XuDaWei 2011-05-24 18:08:17 +0800 109)         jTextField5.setText("05");
5219b954 JFlowMonitor/src/Presentation/Statics/TimeSelectPage.java  (XuDaWei 2011-05-24 18:08:17 +0800 110) 
5219b954 JFlowMonitor/src/Presentation/Statics/TimeSelectPage.java  (XuDaWei 2011-05-24 18:08:17 +0800 111)         jLabel7.setText("Month");
5219b954 JFlowMonitor/src/Presentation/Statics/TimeSelectPage.java  (XuDaWei 2011-05-24 18:08:17 +0800 112) 
5219b954 JFlowMonitor/src/Presentation/Statics/TimeSelectPage.java  (XuDaWei 2011-05-24 18:08:17 +0800 113)         jLabel8.setText("Day");
5219b954 JFlowMonitor/src/Presentation/Statics/TimeSelectPage.java  (XuDaWei 2011-05-24 18:08:17 +0800 114) 
98f41d00 JFlowMonitor/src/Presentation/Statics/TimeSelectPage.java  (XuDaWei 2011-05-24 19:21:54 +0800 115)         jTextField6.setText("30");
5219b954 JFlowMonitor/src/Presentation/Statics/TimeSelectPage.java  (XuDaWei 2011-05-24 18:08:17 +0800 116) 
70e8c2e7 JFlowMonitor/src/Presentation/Statics/TimeSelectPanel.java (XuDaWei 2011-05-24 20:52:27 +0800 117)         jButton1.setText("Check");
5219b954 JFlowMonitor/src/Presentation/Statics/TimeSelectPage.java  (XuDaWei 2011-05-24 18:08:17 +0800 118)         jButton1.addActionListener(new java.awt.event.ActionListener() {
5219b954 JFlowMonitor/src/Presentation/Statics/TimeSelectPage.java  (XuDaWei 2011-05-24 18:08:17 +0800 119)             public void actionPerformed(java.awt.event.ActionEvent evt) {
5219b954 JFlowMonitor/src/Presentation/Statics/TimeSelectPage.java  (XuDaWei 2011-05-24 18:08:17 +0800 120)                 jButton1ActionPerformed(evt);
5219b954 JFlowMonitor/src/Presentation/Statics/TimeSelectPage.java  (XuDaWei 2011-05-24 18:08:17 +0800 121)             }
5219b954 JFlowMonitor/src/Presentation/Statics/TimeSelectPage.java  (XuDaWei 2011-05-24 18:08:17 +0800 122)         });
5219b954 JFlowMonitor/src/Presentation/Statics/TimeSelectPage.java  (XuDaWei 2011-05-24 18:08:17 +0800 123) 
39ffa906 JFlowMonitor/src/Presentation/Statics/TimeSelectPanel.java (XuDaWei 2011-05-25 12:49:53 +0800 124)         jLabel9.setText(" ");
39ffa906 JFlowMonitor/src/Presentation/Statics/TimeSelectPanel.java (XuDaWei 2011-05-25 12:49:53 +0800 125) 
5219b954 JFlowMonitor/src/Presentation/Statics/TimeSelectPage.java  (XuDaWei 2011-05-24 18:08:17 +0800 126)         javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
5219b954 JFlowMonitor/src/Presentation/Statics/TimeSelectPage.java  (XuDaWei 2011-05-24 18:08:17 +0800 127)         this.setLayout(layout);
5219b954 JFlowMonitor/src/Presentation/Statics/TimeSelectPage.java  (XuDaWei 2011-05-24 18:08:17 +0800 128)         layout.setHorizontalGroup(
5219b954 JFlowMonitor/src/Presentation/Statics/TimeSelectPage.java  (XuDaWei 2011-05-24 18:08:17 +0800 129)             layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
70e8c2e7 JFlowMonitor/src/Presentation/Statics/TimeSelectPanel.java (XuDaWei 2011-05-24 20:52:27 +0800 130)             .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
70e8c2e7 JFlowMonitor/src/Presentation/Statics/TimeSelectPanel.java (XuDaWei 2011-05-24 20:52:27 +0800 131)                 .addContainerGap(65, Short.MAX_VALUE)
5219b954 JFlowMonitor/src/Presentation/Statics/TimeSelectPage.java  (XuDaWei 2011-05-24 18:08:17 +0800 132)                 .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
5219b954 JFlowMonitor/src/Presentation/Statics/TimeSelectPage.java  (XuDaWei 2011-05-24 18:08:17 +0800 133)                     .addComponent(jLabel1)
5219b954 JFlowMonitor/src/Presentation/Statics/TimeSelectPage.java  (XuDaWei 2011-05-24 18:08:17 +0800 134)                     .addComponent(jLabel5)
5219b954 JFlowMonitor/src/Presentation/Statics/TimeSelectPage.java  (XuDaWei 2011-05-24 18:08:17 +0800 135)                     .addGroup(layout.createSequentialGroup()
5219b954 JFlowMonitor/src/Presentation/Statics/TimeSelectPage.java  (XuDaWei 2011-05-24 18:08:17 +0800 136)                         .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
5219b954 JFlowMonitor/src/Presentation/Statics/TimeSelectPage.java  (XuDaWei 2011-05-24 18:08:17 +0800 137)                             .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
5219b954 JFlowMonitor/src/Presentation/Statics/TimeSelectPage.java  (XuDaWei 2011-05-24 18:08:17 +0800 138)                                 .addComponent(jLabel6)
5219b954 JFlowMonitor/src/Presentation/Statics/TimeSelectPage.java  (XuDaWei 2011-05-24 18:08:17 +0800 139)                                 .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
5219b954 JFlowMonitor/src/Presentation/Statics/TimeSelectPage.java  (XuDaWei 2011-05-24 18:08:17 +0800 140)                                 .addComponent(jTextField4))
5219b954 JFlowMonitor/src/Presentation/Statics/TimeSelectPage.java  (XuDaWei 2011-05-24 18:08:17 +0800 141)                             .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
5219b954 JFlowMonitor/src/Presentation/Statics/TimeSelectPage.java  (XuDaWei 2011-05-24 18:08:17 +0800 142)                                 .addComponent(jLabel2)
5219b954 JFlowMonitor/src/Presentation/Statics/TimeSelectPage.java  (XuDaWei 2011-05-24 18:08:17 +0800 143)                                 .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
5219b954 JFlowMonitor/src/Presentation/Statics/TimeSelectPage.java  (XuDaWei 2011-05-24 18:08:17 +0800 144)                                 .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, 44, javax.swing.GroupLayout.PREFERRED_SIZE)))
5219b954 JFlowMonitor/src/Presentation/Statics/TimeSelectPage.java  (XuDaWei 2011-05-24 18:08:17 +0800 145)                         .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
5219b954 JFlowMonitor/src/Presentation/Statics/TimeSelectPage.java  (XuDaWei 2011-05-24 18:08:17 +0800 146)                             .addGroup(layout.createSequentialGroup()
5219b954 JFlowMonitor/src/Presentation/Statics/TimeSelectPage.java  (XuDaWei 2011-05-24 18:08:17 +0800 147)                                 .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
5219b954 JFlowMonitor/src/Presentation/Statics/TimeSelectPage.java  (XuDaWei 2011-05-24 18:08:17 +0800 148)                                 .addComponent(jLabel3)
5219b954 JFlowMonitor/src/Presentation/Statics/TimeSelectPage.java  (XuDaWei 2011-05-24 18:08:17 +0800 149)                                 .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
5219b954 JFlowMonitor/src/Presentation/Statics/TimeSelectPage.java  (XuDaWei 2011-05-24 18:08:17 +0800 150)                                 .addComponent(jTextField2, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE))
5219b954 JFlowMonitor/src/Presentation/Statics/TimeSelectPage.java  (XuDaWei 2011-05-24 18:08:17 +0800 151)                             .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
5219b954 JFlowMonitor/src/Presentation/Statics/TimeSelectPage.java  (XuDaWei 2011-05-24 18:08:17 +0800 152)                                 .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
5219b954 JFlowMonitor/src/Presentation/Statics/TimeSelectPage.java  (XuDaWei 2011-05-24 18:08:17 +0800 153)                                 .addComponent(jLabel7)
5219b954 JFlowMonitor/src/Presentation/Statics/TimeSelectPage.java  (XuDaWei 2011-05-24 18:08:17 +0800 154)                                 .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
5219b954 JFlowMonitor/src/Presentation/Statics/TimeSelectPage.java  (XuDaWei 2011-05-24 18:08:17 +0800 155)                                 .addComponent(jTextField5, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)))
5219b954 JFlowMonitor/src/Presentation/Statics/TimeSelectPage.java  (XuDaWei 2011-05-24 18:08:17 +0800 156)                         .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
5219b954 JFlowMonitor/src/Presentation/Statics/TimeSelectPage.java  (XuDaWei 2011-05-24 18:08:17 +0800 157)                         .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
5219b954 JFlowMonitor/src/Presentation/Statics/TimeSelectPage.java  (XuDaWei 2011-05-24 18:08:17 +0800 158)                             .addGroup(layout.createSequentialGroup()
5219b954 JFlowMonitor/src/Presentation/Statics/TimeSelectPage.java  (XuDaWei 2011-05-24 18:08:17 +0800 159)                                 .addComponent(jLabel4)
5219b954 JFlowMonitor/src/Presentation/Statics/TimeSelectPage.java  (XuDaWei 2011-05-24 18:08:17 +0800 160)                                 .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
5219b954 JFlowMonitor/src/Presentation/Statics/TimeSelectPage.java  (XuDaWei 2011-05-24 18:08:17 +0800 161)                                 .addComponent(jTextField3, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE))
5219b954 JFlowMonitor/src/Presentation/Statics/TimeSelectPage.java  (XuDaWei 2011-05-24 18:08:17 +0800 162)                             .addGroup(layout.createSequentialGroup()
5219b954 JFlowMonitor/src/Presentation/Statics/TimeSelectPage.java  (XuDaWei 2011-05-24 18:08:17 +0800 163)                                 .addComponent(jLabel8)
5219b954 JFlowMonitor/src/Presentation/Statics/TimeSelectPage.java  (XuDaWei 2011-05-24 18:08:17 +0800 164)                                 .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
98f41d00 JFlowMonitor/src/Presentation/Statics/TimeSelectPage.java  (XuDaWei 2011-05-24 19:21:54 +0800 165)                                 .addComponent(jTextField6)))
39ffa906 JFlowMonitor/src/Presentation/Statics/TimeSelectPanel.java (XuDaWei 2011-05-25 12:49:53 +0800 166)                         .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
39ffa906 JFlowMonitor/src/Presentation/Statics/TimeSelectPanel.java (XuDaWei 2011-05-25 12:49:53 +0800 167)                             .addGroup(layout.createSequentialGroup()
39ffa906 JFlowMonitor/src/Presentation/Statics/TimeSelectPanel.java (XuDaWei 2011-05-25 12:49:53 +0800 168)                                 .addGap(6, 6, 6)
39ffa906 JFlowMonitor/src/Presentation/Statics/TimeSelectPanel.java (XuDaWei 2011-05-25 12:49:53 +0800 169)                                 .addComponent(jButton1))
39ffa906 JFlowMonitor/src/Presentation/Statics/TimeSelectPanel.java (XuDaWei 2011-05-25 12:49:53 +0800 170)                             .addGroup(layout.createSequentialGroup()
39ffa906 JFlowMonitor/src/Presentation/Statics/TimeSelectPanel.java (XuDaWei 2011-05-25 12:49:53 +0800 171)                                 .addGap(18, 18, 18)
39ffa906 JFlowMonitor/src/Presentation/Statics/TimeSelectPanel.java (XuDaWei 2011-05-25 12:49:53 +0800 172)                                 .addComponent(jLabel9)))))
70e8c2e7 JFlowMonitor/src/Presentation/Statics/TimeSelectPanel.java (XuDaWei 2011-05-24 20:52:27 +0800 173)                 .addGap(151, 151, 151))
5219b954 JFlowMonitor/src/Presentation/Statics/TimeSelectPage.java  (XuDaWei 2011-05-24 18:08:17 +0800 174)         );
5219b954 JFlowMonitor/src/Presentation/Statics/TimeSelectPage.java  (XuDaWei 2011-05-24 18:08:17 +0800 175)         layout.setVerticalGroup(
5219b954 JFlowMonitor/src/Presentation/Statics/TimeSelectPage.java  (XuDaWei 2011-05-24 18:08:17 +0800 176)             layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
5219b954 JFlowMonitor/src/Presentation/Statics/TimeSelectPage.java  (XuDaWei 2011-05-24 18:08:17 +0800 177)             .addGroup(layout.createSequentialGroup()
5219b954 JFlowMonitor/src/Presentation/Statics/TimeSelectPage.java  (XuDaWei 2011-05-24 18:08:17 +0800 178)                 .addContainerGap()
5219b954 JFlowMonitor/src/Presentation/Statics/TimeSelectPage.java  (XuDaWei 2011-05-24 18:08:17 +0800 179)                 .addComponent(jLabel1)
5219b954 JFlowMonitor/src/Presentation/Statics/TimeSelectPage.java  (XuDaWei 2011-05-24 18:08:17 +0800 180)                 .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
5219b954 JFlowMonitor/src/Presentation/Statics/TimeSelectPage.java  (XuDaWei 2011-05-24 18:08:17 +0800 181)                 .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
5219b954 JFlowMonitor/src/Presentation/Statics/TimeSelectPage.java  (XuDaWei 2011-05-24 18:08:17 +0800 182)                     .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
5219b954 JFlowMonitor/src/Presentation/Statics/TimeSelectPage.java  (XuDaWei 2011-05-24 18:08:17 +0800 183)                     .addComponent(jLabel3)
5219b954 JFlowMonitor/src/Presentation/Statics/TimeSelectPage.java  (XuDaWei 2011-05-24 18:08:17 +0800 184)                     .addComponent(jTextField2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
5219b954 JFlowMonitor/src/Presentation/Statics/TimeSelectPage.java  (XuDaWei 2011-05-24 18:08:17 +0800 185)                     .addComponent(jLabel4)
5219b954 JFlowMonitor/src/Presentation/Statics/TimeSelectPage.java  (XuDaWei 2011-05-24 18:08:17 +0800 186)                     .addComponent(jTextField3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
39ffa906 JFlowMonitor/src/Presentation/Statics/TimeSelectPanel.java (XuDaWei 2011-05-25 12:49:53 +0800 187)                     .addComponent(jLabel2)
39ffa906 JFlowMonitor/src/Presentation/Statics/TimeSelectPanel.java (XuDaWei 2011-05-25 12:49:53 +0800 188)                     .addComponent(jLabel9))
5219b954 JFlowMonitor/src/Presentation/Statics/TimeSelectPage.java  (XuDaWei 2011-05-24 18:08:17 +0800 189)                 .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
5219b954 JFlowMonitor/src/Presentation/Statics/TimeSelectPage.java  (XuDaWei 2011-05-24 18:08:17 +0800 190)                 .addComponent(jLabel5)
5219b954 JFlowMonitor/src/Presentation/Statics/TimeSelectPage.java  (XuDaWei 2011-05-24 18:08:17 +0800 191)                 .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
5219b954 JFlowMonitor/src/Presentation/Statics/TimeSelectPage.java  (XuDaWei 2011-05-24 18:08:17 +0800 192)                 .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
5219b954 JFlowMonitor/src/Presentation/Statics/TimeSelectPage.java  (XuDaWei 2011-05-24 18:08:17 +0800 193)                     .addComponent(jLabel6)
5219b954 JFlowMonitor/src/Presentation/Statics/TimeSelectPage.java  (XuDaWei 2011-05-24 18:08:17 +0800 194)                     .addComponent(jTextField4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
5219b954 JFlowMonitor/src/Presentation/Statics/TimeSelectPage.java  (XuDaWei 2011-05-24 18:08:17 +0800 195)                     .addComponent(jLabel7)
5219b954 JFlowMonitor/src/Presentation/Statics/TimeSelectPage.java  (XuDaWei 2011-05-24 18:08:17 +0800 196)                     .addComponent(jTextField5, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
5219b954 JFlowMonitor/src/Presentation/Statics/TimeSelectPage.java  (XuDaWei 2011-05-24 18:08:17 +0800 197)                     .addComponent(jLabel8)
98f41d00 JFlowMonitor/src/Presentation/Statics/TimeSelectPage.java  (XuDaWei 2011-05-24 19:21:54 +0800 198)                     .addComponent(jTextField6, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
98f41d00 JFlowMonitor/src/Presentation/Statics/TimeSelectPage.java  (XuDaWei 2011-05-24 19:21:54 +0800 199)                     .addComponent(jButton1))
98f41d00 JFlowMonitor/src/Presentation/Statics/TimeSelectPage.java  (XuDaWei 2011-05-24 19:21:54 +0800 200)                 .addContainerGap(286, Short.MAX_VALUE))
5219b954 JFlowMonitor/src/Presentation/Statics/TimeSelectPage.java  (XuDaWei 2011-05-24 18:08:17 +0800 201)         );
5219b954 JFlowMonitor/src/Presentation/Statics/TimeSelectPage.java  (XuDaWei 2011-05-24 18:08:17 +0800 202)     }// </editor-fold>//GEN-END:initComponents
5219b954 JFlowMonitor/src/Presentation/Statics/TimeSelectPage.java  (XuDaWei 2011-05-24 18:08:17 +0800 203) 
5219b954 JFlowMonitor/src/Presentation/Statics/TimeSelectPage.java  (XuDaWei 2011-05-24 18:08:17 +0800 204)     private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
5219b954 JFlowMonitor/src/Presentation/Statics/TimeSelectPage.java  (XuDaWei 2011-05-24 18:08:17 +0800 205)         // TODO add your handling code here:
5219b954 JFlowMonitor/src/Presentation/Statics/TimeSelectPage.java  (XuDaWei 2011-05-24 18:08:17 +0800 206)         String fromy = jTextField1.getText();
5219b954 JFlowMonitor/src/Presentation/Statics/TimeSelectPage.java  (XuDaWei 2011-05-24 18:08:17 +0800 207)         String fromm = jTextField2.getText();
5219b954 JFlowMonitor/src/Presentation/Statics/TimeSelectPage.java  (XuDaWei 2011-05-24 18:08:17 +0800 208)         String fromd = jTextField3.getText();
39ffa906 JFlowMonitor/src/Presentation/Statics/TimeSelectPanel.java (XuDaWei 2011-05-25 12:49:53 +0800 209)         String toy = jTextField4.getText();
39ffa906 JFlowMonitor/src/Presentation/Statics/TimeSelectPanel.java (XuDaWei 2011-05-25 12:49:53 +0800 210)         String tom = jTextField5.getText();
39ffa906 JFlowMonitor/src/Presentation/Statics/TimeSelectPanel.java (XuDaWei 2011-05-25 12:49:53 +0800 211)         String tod = jTextField6.getText();
c6fda429 JFlowMonitor/src/Presentation/Statics/TimeSelectPanel.java (XuDaWei 2011-05-25 16:14:25 +0800 212)         jLabel9.setText("");
c6fda429 JFlowMonitor/src/Presentation/Statics/TimeSelectPanel.java (XuDaWei 2011-05-25 16:14:25 +0800 213)         if (isNumeric(fromy) && isNumeric(fromm) && isNumeric(fromd) && isNumeric(toy) && isNumeric(tom) && isNumeric(tod)) {
39ffa906 JFlowMonitor/src/Presentation/Statics/TimeSelectPanel.java (XuDaWei 2011-05-25 12:49:53 +0800 214)         } else {
39ffa906 JFlowMonitor/src/Presentation/Statics/TimeSelectPanel.java (XuDaWei 2011-05-25 12:49:53 +0800 215)             jLabel9.setText("Wrong Input!");
39ffa906 JFlowMonitor/src/Presentation/Statics/TimeSelectPanel.java (XuDaWei 2011-05-25 12:49:53 +0800 216)             return;
39ffa906 JFlowMonitor/src/Presentation/Statics/TimeSelectPanel.java (XuDaWei 2011-05-25 12:49:53 +0800 217)         }
c6fda429 JFlowMonitor/src/Presentation/Statics/TimeSelectPanel.java (XuDaWei 2011-05-25 16:14:25 +0800 218) 
39ffa906 JFlowMonitor/src/Presentation/Statics/TimeSelectPanel.java (XuDaWei 2011-05-25 12:49:53 +0800 219)         int yf = Integer.parseInt(fromy);
39ffa906 JFlowMonitor/src/Presentation/Statics/TimeSelectPanel.java (XuDaWei 2011-05-25 12:49:53 +0800 220)         int mf = Integer.parseInt(fromm);
5219b954 JFlowMonitor/src/Presentation/Statics/TimeSelectPage.java  (XuDaWei 2011-05-24 18:08:17 +0800 221)         int df = Integer.parseInt(fromd);
5219b954 JFlowMonitor/src/Presentation/Statics/TimeSelectPage.java  (XuDaWei 2011-05-24 18:08:17 +0800 222)         Date from = new Date(yf - 1900, mf - 1, df);
5219b954 JFlowMonitor/src/Presentation/Statics/TimeSelectPage.java  (XuDaWei 2011-05-24 18:08:17 +0800 223)         int yt = Integer.parseInt(toy);
5219b954 JFlowMonitor/src/Presentation/Statics/TimeSelectPage.java  (XuDaWei 2011-05-24 18:08:17 +0800 224)         int mt = Integer.parseInt(tom);
5219b954 JFlowMonitor/src/Presentation/Statics/TimeSelectPage.java  (XuDaWei 2011-05-24 18:08:17 +0800 225)         int dt = Integer.parseInt(tod);
5219b954 JFlowMonitor/src/Presentation/Statics/TimeSelectPage.java  (XuDaWei 2011-05-24 18:08:17 +0800 226)         Date to = new Date(yt - 1900, mt - 1, dt);
194aaaa6 JFlowMonitor/src/Presentation/Statics/TimeSelectPanel.java (reyoung 2011-05-25 23:33:20 +0800 227) //        System.out.println(from);
194aaaa6 JFlowMonitor/src/Presentation/Statics/TimeSelectPanel.java (reyoung 2011-05-25 23:33:20 +0800 228) //        System.out.println(to);
c6fda429 JFlowMonitor/src/Presentation/Statics/TimeSelectPanel.java (XuDaWei 2011-05-25 16:14:25 +0800 229) 
70e8c2e7 JFlowMonitor/src/Presentation/Statics/TimeSelectPanel.java (XuDaWei 2011-05-24 20:52:27 +0800 230)         info = new MostFlowedSiteHistoryInfo(from, to, 20);
cb8ec857 JFlowMonitor/src/Presentation/Statics/TimeSelectPage.java  (XuDaWei 2011-05-24 18:53:12 +0800 231)         ProcessThread pt = new ProcessThread(new ProcessCompleteListener() {
98f41d00 JFlowMonitor/src/Presentation/Statics/TimeSelectPage.java  (XuDaWei 2011-05-24 19:21:54 +0800 232) 
cb8ec857 JFlowMonitor/src/Presentation/Statics/TimeSelectPage.java  (XuDaWei 2011-05-24 18:53:12 +0800 233)             public void onProcessComplete(HistoryInfo info) {
cb8ec857 JFlowMonitor/src/Presentation/Statics/TimeSelectPage.java  (XuDaWei 2011-05-24 18:53:12 +0800 234)                 chartshow();
cb8ec857 JFlowMonitor/src/Presentation/Statics/TimeSelectPage.java  (XuDaWei 2011-05-24 18:53:12 +0800 235)             }
cb8ec857 JFlowMonitor/src/Presentation/Statics/TimeSelectPage.java  (XuDaWei 2011-05-24 18:53:12 +0800 236)         }, info);
cb8ec857 JFlowMonitor/src/Presentation/Statics/TimeSelectPage.java  (XuDaWei 2011-05-24 18:53:12 +0800 237)         pt.start();
5219b954 JFlowMonitor/src/Presentation/Statics/TimeSelectPage.java  (XuDaWei 2011-05-24 18:08:17 +0800 238)     }//GEN-LAST:event_jButton1ActionPerformed
cb8ec857 JFlowMonitor/src/Presentation/Statics/TimeSelectPage.java  (XuDaWei 2011-05-24 18:53:12 +0800 239)     private void chartshow() {
cb8ec857 JFlowMonitor/src/Presentation/Statics/TimeSelectPage.java  (XuDaWei 2011-05-24 18:53:12 +0800 240)         dataset = createDataset(info);
98f41d00 JFlowMonitor/src/Presentation/Statics/TimeSelectPage.java  (XuDaWei 2011-05-24 19:21:54 +0800 241)         chart = createChart(dataset);
98f41d00 JFlowMonitor/src/Presentation/Statics/TimeSelectPage.java  (XuDaWei 2011-05-24 19:21:54 +0800 242)         ChartPanel chartPanel = new ChartPanel(chart);
98f41d00 JFlowMonitor/src/Presentation/Statics/TimeSelectPage.java  (XuDaWei 2011-05-24 19:21:54 +0800 243)         add(chartPanel);
98f41d00 JFlowMonitor/src/Presentation/Statics/TimeSelectPage.java  (XuDaWei 2011-05-24 19:21:54 +0800 244)         chartPanel.setLocation(20, 160);
98f41d00 JFlowMonitor/src/Presentation/Statics/TimeSelectPage.java  (XuDaWei 2011-05-24 19:21:54 +0800 245)         chartPanel.setSize(440, 290);
cb8ec857 JFlowMonitor/src/Presentation/Statics/TimeSelectPage.java  (XuDaWei 2011-05-24 18:53:12 +0800 246)     }
5219b954 JFlowMonitor/src/Presentation/Statics/TimeSelectPage.java  (XuDaWei 2011-05-24 18:08:17 +0800 247)     private void jTextField1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextField1ActionPerformed
5219b954 JFlowMonitor/src/Presentation/Statics/TimeSelectPage.java  (XuDaWei 2011-05-24 18:08:17 +0800 248)         // TODO add your handling code here:
5219b954 JFlowMonitor/src/Presentation/Statics/TimeSelectPage.java  (XuDaWei 2011-05-24 18:08:17 +0800 249)     }//GEN-LAST:event_jTextField1ActionPerformed
98f41d00 JFlowMonitor/src/Presentation/Statics/TimeSelectPage.java  (XuDaWei 2011-05-24 19:21:54 +0800 250) 
98f41d00 JFlowMonitor/src/Presentation/Statics/TimeSelectPage.java  (XuDaWei 2011-05-24 19:21:54 +0800 251)     private void jTextField3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextField3ActionPerformed
98f41d00 JFlowMonitor/src/Presentation/Statics/TimeSelectPage.java  (XuDaWei 2011-05-24 19:21:54 +0800 252)         // TODO add your handling code here:
98f41d00 JFlowMonitor/src/Presentation/Statics/TimeSelectPage.java  (XuDaWei 2011-05-24 19:21:54 +0800 253)     }//GEN-LAST:event_jTextField3ActionPerformed
5219b954 JFlowMonitor/src/Presentation/Statics/TimeSelectPage.java  (XuDaWei 2011-05-24 18:08:17 +0800 254)     // Variables declaration - do not modify//GEN-BEGIN:variables
5219b954 JFlowMonitor/src/Presentation/Statics/TimeSelectPage.java  (XuDaWei 2011-05-24 18:08:17 +0800 255)     private javax.swing.JButton jButton1;
5219b954 JFlowMonitor/src/Presentation/Statics/TimeSelectPage.java  (XuDaWei 2011-05-24 18:08:17 +0800 256)     private javax.swing.JLabel jLabel1;
5219b954 JFlowMonitor/src/Presentation/Statics/TimeSelectPage.java  (XuDaWei 2011-05-24 18:08:17 +0800 257)     private javax.swing.JLabel jLabel2;
5219b954 JFlowMonitor/src/Presentation/Statics/TimeSelectPage.java  (XuDaWei 2011-05-24 18:08:17 +0800 258)     private javax.swing.JLabel jLabel3;
5219b954 JFlowMonitor/src/Presentation/Statics/TimeSelectPage.java  (XuDaWei 2011-05-24 18:08:17 +0800 259)     private javax.swing.JLabel jLabel4;
5219b954 JFlowMonitor/src/Presentation/Statics/TimeSelectPage.java  (XuDaWei 2011-05-24 18:08:17 +0800 260)     private javax.swing.JLabel jLabel5;
5219b954 JFlowMonitor/src/Presentation/Statics/TimeSelectPage.java  (XuDaWei 2011-05-24 18:08:17 +0800 261)     private javax.swing.JLabel jLabel6;
5219b954 JFlowMonitor/src/Presentation/Statics/TimeSelectPage.java  (XuDaWei 2011-05-24 18:08:17 +0800 262)     private javax.swing.JLabel jLabel7;
5219b954 JFlowMonitor/src/Presentation/Statics/TimeSelectPage.java  (XuDaWei 2011-05-24 18:08:17 +0800 263)     private javax.swing.JLabel jLabel8;
39ffa906 JFlowMonitor/src/Presentation/Statics/TimeSelectPanel.java (XuDaWei 2011-05-25 12:49:53 +0800 264)     private javax.swing.JLabel jLabel9;
5219b954 JFlowMonitor/src/Presentation/Statics/TimeSelectPage.java  (XuDaWei 2011-05-24 18:08:17 +0800 265)     private javax.swing.JTextField jTextField1;
5219b954 JFlowMonitor/src/Presentation/Statics/TimeSelectPage.java  (XuDaWei 2011-05-24 18:08:17 +0800 266)     private javax.swing.JTextField jTextField2;
5219b954 JFlowMonitor/src/Presentation/Statics/TimeSelectPage.java  (XuDaWei 2011-05-24 18:08:17 +0800 267)     private javax.swing.JTextField jTextField3;
5219b954 JFlowMonitor/src/Presentation/Statics/TimeSelectPage.java  (XuDaWei 2011-05-24 18:08:17 +0800 268)     private javax.swing.JTextField jTextField4;
5219b954 JFlowMonitor/src/Presentation/Statics/TimeSelectPage.java  (XuDaWei 2011-05-24 18:08:17 +0800 269)     private javax.swing.JTextField jTextField5;
5219b954 JFlowMonitor/src/Presentation/Statics/TimeSelectPage.java  (XuDaWei 2011-05-24 18:08:17 +0800 270)     private javax.swing.JTextField jTextField6;
5219b954 JFlowMonitor/src/Presentation/Statics/TimeSelectPage.java  (XuDaWei 2011-05-24 18:08:17 +0800 271)     // End of variables declaration//GEN-END:variables
5219b954 JFlowMonitor/src/Presentation/Statics/TimeSelectPage.java  (XuDaWei 2011-05-24 18:08:17 +0800 272) 
5219b954 JFlowMonitor/src/Presentation/Statics/TimeSelectPage.java  (XuDaWei 2011-05-24 18:08:17 +0800 273)     public JFreeChart createChart(CategoryDataset dataset) {
5219b954 JFlowMonitor/src/Presentation/Statics/TimeSelectPage.java  (XuDaWei 2011-05-24 18:08:17 +0800 274) // create the chart...
5219b954 JFlowMonitor/src/Presentation/Statics/TimeSelectPage.java  (XuDaWei 2011-05-24 18:08:17 +0800 275)         JFreeChart chart = ChartFactory.createBarChart(
98f41d00 JFlowMonitor/src/Presentation/Statics/TimeSelectPage.java  (XuDaWei 2011-05-24 19:21:54 +0800 276)                 "Flow Analysis", // chart title
5219b954 JFlowMonitor/src/Presentation/Statics/TimeSelectPage.java  (XuDaWei 2011-05-24 18:08:17 +0800 277)                 "Category", // domain axis label
70e8c2e7 JFlowMonitor/src/Presentation/Statics/TimeSelectPanel.java (XuDaWei 2011-05-24 20:52:27 +0800 278)                 "Flow(kb)", // range axis label
5219b954 JFlowMonitor/src/Presentation/Statics/TimeSelectPage.java  (XuDaWei 2011-05-24 18:08:17 +0800 279)                 dataset, // data
5219b954 JFlowMonitor/src/Presentation/Statics/TimeSelectPage.java  (XuDaWei 2011-05-24 18:08:17 +0800 280)                 PlotOrientation.VERTICAL, // orientation
5219b954 JFlowMonitor/src/Presentation/Statics/TimeSelectPage.java  (XuDaWei 2011-05-24 18:08:17 +0800 281)                 true, // include legend
5219b954 JFlowMonitor/src/Presentation/Statics/TimeSelectPage.java  (XuDaWei 2011-05-24 18:08:17 +0800 282)                 true, // tooltips?
5219b954 JFlowMonitor/src/Presentation/Statics/TimeSelectPage.java  (XuDaWei 2011-05-24 18:08:17 +0800 283)                 false // URLs?
5219b954 JFlowMonitor/src/Presentation/Statics/TimeSelectPage.java  (XuDaWei 2011-05-24 18:08:17 +0800 284)                 );
5219b954 JFlowMonitor/src/Presentation/Statics/TimeSelectPage.java  (XuDaWei 2011-05-24 18:08:17 +0800 285) // NOW DO SOME OPTIONAL CUSTOMISATION OF THE CHART...
5219b954 JFlowMonitor/src/Presentation/Statics/TimeSelectPage.java  (XuDaWei 2011-05-24 18:08:17 +0800 286) // set the background color for the chart...
5219b954 JFlowMonitor/src/Presentation/Statics/TimeSelectPage.java  (XuDaWei 2011-05-24 18:08:17 +0800 287)         chart.setBackgroundPaint(Color.white);
5219b954 JFlowMonitor/src/Presentation/Statics/TimeSelectPage.java  (XuDaWei 2011-05-24 18:08:17 +0800 288) // get a reference to the plot for further customisation...
5219b954 JFlowMonitor/src/Presentation/Statics/TimeSelectPage.java  (XuDaWei 2011-05-24 18:08:17 +0800 289)         CategoryPlot plot = chart.getCategoryPlot();
5219b954 JFlowMonitor/src/Presentation/Statics/TimeSelectPage.java  (XuDaWei 2011-05-24 18:08:17 +0800 290)         plot.setBackgroundPaint(Color.lightGray);
5219b954 JFlowMonitor/src/Presentation/Statics/TimeSelectPage.java  (XuDaWei 2011-05-24 18:08:17 +0800 291)         plot.setDomainGridlinePaint(Color.white);
5219b954 JFlowMonitor/src/Presentation/Statics/TimeSelectPage.java  (XuDaWei 2011-05-24 18:08:17 +0800 292)         plot.setDomainGridlinesVisible(true);
5219b954 JFlowMonitor/src/Presentation/Statics/TimeSelectPage.java  (XuDaWei 2011-05-24 18:08:17 +0800 293)         plot.setRangeGridlinePaint(Color.white);
5219b954 JFlowMonitor/src/Presentation/Statics/TimeSelectPage.java  (XuDaWei 2011-05-24 18:08:17 +0800 294) // set the range axis to display integers only...
5219b954 JFlowMonitor/src/Presentation/Statics/TimeSelectPage.java  (XuDaWei 2011-05-24 18:08:17 +0800 295)         final NumberAxis rangeAxis = (NumberAxis) plot.getRangeAxis();
5219b954 JFlowMonitor/src/Presentation/Statics/TimeSelectPage.java  (XuDaWei 2011-05-24 18:08:17 +0800 296)         rangeAxis.setStandardTickUnits(NumberAxis.createIntegerTickUnits());
5219b954 JFlowMonitor/src/Presentation/Statics/TimeSelectPage.java  (XuDaWei 2011-05-24 18:08:17 +0800 297) // disable bar outlines...
5219b954 JFlowMonitor/src/Presentation/Statics/TimeSelectPage.java  (XuDaWei 2011-05-24 18:08:17 +0800 298)         BarRenderer renderer = (BarRenderer) plot.getRenderer();
5219b954 JFlowMonitor/src/Presentation/Statics/TimeSelectPage.java  (XuDaWei 2011-05-24 18:08:17 +0800 299)         renderer.setDrawBarOutline(false);
5219b954 JFlowMonitor/src/Presentation/Statics/TimeSelectPage.java  (XuDaWei 2011-05-24 18:08:17 +0800 300) // set up gradient paints for series...
5219b954 JFlowMonitor/src/Presentation/Statics/TimeSelectPage.java  (XuDaWei 2011-05-24 18:08:17 +0800 301)         GradientPaint gp0 = new GradientPaint(
5219b954 JFlowMonitor/src/Presentation/Statics/TimeSelectPage.java  (XuDaWei 2011-05-24 18:08:17 +0800 302)                 0.0f, 0.0f, Color.blue,
5219b954 JFlowMonitor/src/Presentation/Statics/TimeSelectPage.java  (XuDaWei 2011-05-24 18:08:17 +0800 303)                 0.0f, 0.0f, new Color(0, 0, 64));
5219b954 JFlowMonitor/src/Presentation/Statics/TimeSelectPage.java  (XuDaWei 2011-05-24 18:08:17 +0800 304)         GradientPaint gp1 = new GradientPaint(
5219b954 JFlowMonitor/src/Presentation/Statics/TimeSelectPage.java  (XuDaWei 2011-05-24 18:08:17 +0800 305)                 0.0f, 0.0f, Color.green,
5219b954 JFlowMonitor/src/Presentation/Statics/TimeSelectPage.java  (XuDaWei 2011-05-24 18:08:17 +0800 306)                 0.0f, 0.0f, new Color(0, 64, 0));
5219b954 JFlowMonitor/src/Presentation/Statics/TimeSelectPage.java  (XuDaWei 2011-05-24 18:08:17 +0800 307)         GradientPaint gp2 = new GradientPaint(
5219b954 JFlowMonitor/src/Presentation/Statics/TimeSelectPage.java  (XuDaWei 2011-05-24 18:08:17 +0800 308)                 0.0f, 0.0f, Color.red,
5219b954 JFlowMonitor/src/Presentation/Statics/TimeSelectPage.java  (XuDaWei 2011-05-24 18:08:17 +0800 309)                 0.0f, 0.0f, new Color(64, 0, 0));
5219b954 JFlowMonitor/src/Presentation/Statics/TimeSelectPage.java  (XuDaWei 2011-05-24 18:08:17 +0800 310)         renderer.setSeriesPaint(0, gp0);
5219b954 JFlowMonitor/src/Presentation/Statics/TimeSelectPage.java  (XuDaWei 2011-05-24 18:08:17 +0800 311)         renderer.setSeriesPaint(1, gp1);
5219b954 JFlowMonitor/src/Presentation/Statics/TimeSelectPage.java  (XuDaWei 2011-05-24 18:08:17 +0800 312)         renderer.setSeriesPaint(2, gp2);
5219b954 JFlowMonitor/src/Presentation/Statics/TimeSelectPage.java  (XuDaWei 2011-05-24 18:08:17 +0800 313)         CategoryAxis domainAxis = plot.getDomainAxis();
5219b954 JFlowMonitor/src/Presentation/Statics/TimeSelectPage.java  (XuDaWei 2011-05-24 18:08:17 +0800 314)         domainAxis.setCategoryLabelPositions(
5219b954 JFlowMonitor/src/Presentation/Statics/TimeSelectPage.java  (XuDaWei 2011-05-24 18:08:17 +0800 315)                 CategoryLabelPositions.createUpRotationLabelPositions(Math.PI / 6.0));
5219b954 JFlowMonitor/src/Presentation/Statics/TimeSelectPage.java  (XuDaWei 2011-05-24 18:08:17 +0800 316) // OPTIONAL CUSTOMISATION COMPLETED.
5219b954 JFlowMonitor/src/Presentation/Statics/TimeSelectPage.java  (XuDaWei 2011-05-24 18:08:17 +0800 317)         return chart;
5219b954 JFlowMonitor/src/Presentation/Statics/TimeSelectPage.java  (XuDaWei 2011-05-24 18:08:17 +0800 318)     }
5219b954 JFlowMonitor/src/Presentation/Statics/TimeSelectPage.java  (XuDaWei 2011-05-24 18:08:17 +0800 319) 
cb8ec857 JFlowMonitor/src/Presentation/Statics/TimeSelectPage.java  (XuDaWei 2011-05-24 18:53:12 +0800 320)     public CategoryDataset createDataset(MostFlowedSiteHistoryInfo info) {
5219b954 JFlowMonitor/src/Presentation/Statics/TimeSelectPage.java  (XuDaWei 2011-05-24 18:08:17 +0800 321) // row keys...
5219b954 JFlowMonitor/src/Presentation/Statics/TimeSelectPage.java  (XuDaWei 2011-05-24 18:08:17 +0800 322)         String series1 = "Flow";
5219b954 JFlowMonitor/src/Presentation/Statics/TimeSelectPage.java  (XuDaWei 2011-05-24 18:08:17 +0800 323) // column keys...
c6fda429 JFlowMonitor/src/Presentation/Statics/TimeSelectPanel.java (XuDaWei 2011-05-25 16:14:25 +0800 324) 
5219b954 JFlowMonitor/src/Presentation/Statics/TimeSelectPage.java  (XuDaWei 2011-05-24 18:08:17 +0800 325) 
5219b954 JFlowMonitor/src/Presentation/Statics/TimeSelectPage.java  (XuDaWei 2011-05-24 18:08:17 +0800 326) 
5219b954 JFlowMonitor/src/Presentation/Statics/TimeSelectPage.java  (XuDaWei 2011-05-24 18:08:17 +0800 327)         DefaultCategoryDataset dataset = new DefaultCategoryDataset();
194aaaa6 JFlowMonitor/src/Presentation/Statics/TimeSelectPanel.java (reyoung 2011-05-25 23:33:20 +0800 328) //        System.out.println("create dataset");
cb8ec857 JFlowMonitor/src/Presentation/Statics/TimeSelectPage.java  (XuDaWei 2011-05-24 18:53:12 +0800 329)         int N;
98f41d00 JFlowMonitor/src/Presentation/Statics/TimeSelectPage.java  (XuDaWei 2011-05-24 19:21:54 +0800 330)         if (info.Sites.size() > 10) {
98f41d00 JFlowMonitor/src/Presentation/Statics/TimeSelectPage.java  (XuDaWei 2011-05-24 19:21:54 +0800 331)             N = 10;
98f41d00 JFlowMonitor/src/Presentation/Statics/TimeSelectPage.java  (XuDaWei 2011-05-24 19:21:54 +0800 332)         } else {
98f41d00 JFlowMonitor/src/Presentation/Statics/TimeSelectPage.java  (XuDaWei 2011-05-24 19:21:54 +0800 333)             N = info.Sites.size();
98f41d00 JFlowMonitor/src/Presentation/Statics/TimeSelectPage.java  (XuDaWei 2011-05-24 19:21:54 +0800 334)         }
39ffa906 JFlowMonitor/src/Presentation/Statics/TimeSelectPanel.java (XuDaWei 2011-05-25 12:49:53 +0800 335)         for (int i = N - 1; i >= 0; i--) {
194aaaa6 JFlowMonitor/src/Presentation/Statics/TimeSelectPanel.java (reyoung 2011-05-25 23:33:20 +0800 336) //            System.out.println("start insert!");
cb8ec857 JFlowMonitor/src/Presentation/Statics/TimeSelectPage.java  (XuDaWei 2011-05-24 18:53:12 +0800 337)             dataset.addValue(info.SiteFolws.get(i), series1, info.Sites.get(i));
194aaaa6 JFlowMonitor/src/Presentation/Statics/TimeSelectPanel.java (reyoung 2011-05-25 23:33:20 +0800 338) //            System.out.println(info.SiteFolws.get(i));
5219b954 JFlowMonitor/src/Presentation/Statics/TimeSelectPage.java  (XuDaWei 2011-05-24 18:08:17 +0800 339) //            dataset.addValue(1,series1,series1);
5219b954 JFlowMonitor/src/Presentation/Statics/TimeSelectPage.java  (XuDaWei 2011-05-24 18:08:17 +0800 340)         }
194aaaa6 JFlowMonitor/src/Presentation/Statics/TimeSelectPanel.java (reyoung 2011-05-25 23:33:20 +0800 341) //        System.out.println("data insert finish");
5219b954 JFlowMonitor/src/Presentation/Statics/TimeSelectPage.java  (XuDaWei 2011-05-24 18:08:17 +0800 342)         return dataset;
5219b954 JFlowMonitor/src/Presentation/Statics/TimeSelectPage.java  (XuDaWei 2011-05-24 18:08:17 +0800 343)     }
39ffa906 JFlowMonitor/src/Presentation/Statics/TimeSelectPanel.java (XuDaWei 2011-05-25 12:49:53 +0800 344) 
39ffa906 JFlowMonitor/src/Presentation/Statics/TimeSelectPanel.java (XuDaWei 2011-05-25 12:49:53 +0800 345)     public static boolean isNumeric(String str) {
39ffa906 JFlowMonitor/src/Presentation/Statics/TimeSelectPanel.java (XuDaWei 2011-05-25 12:49:53 +0800 346)         for (int i = str.length(); --i >= 0;) {
39ffa906 JFlowMonitor/src/Presentation/Statics/TimeSelectPanel.java (XuDaWei 2011-05-25 12:49:53 +0800 347)             if (!Character.isDigit(str.charAt(i))) {
39ffa906 JFlowMonitor/src/Presentation/Statics/TimeSelectPanel.java (XuDaWei 2011-05-25 12:49:53 +0800 348)                 return false;
39ffa906 JFlowMonitor/src/Presentation/Statics/TimeSelectPanel.java (XuDaWei 2011-05-25 12:49:53 +0800 349)             }
39ffa906 JFlowMonitor/src/Presentation/Statics/TimeSelectPanel.java (XuDaWei 2011-05-25 12:49:53 +0800 350)         }
39ffa906 JFlowMonitor/src/Presentation/Statics/TimeSelectPanel.java (XuDaWei 2011-05-25 12:49:53 +0800 351)         return true;
39ffa906 JFlowMonitor/src/Presentation/Statics/TimeSelectPanel.java (XuDaWei 2011-05-25 12:49:53 +0800 352)     }
5219b954 JFlowMonitor/src/Presentation/Statics/TimeSelectPage.java  (XuDaWei 2011-05-24 18:08:17 +0800 353) }
8fedcf98 JFlowMonitor/src/Presentation/TimeSeriesChart.java              (XuDaWei 2011-05-07 12:12:10 +0800   1) /*
8fedcf98 JFlowMonitor/src/Presentation/TimeSeriesChart.java              (XuDaWei 2011-05-07 12:12:10 +0800   2)  * To change this template, choose Tools | Templates
8fedcf98 JFlowMonitor/src/Presentation/TimeSeriesChart.java              (XuDaWei 2011-05-07 12:12:10 +0800   3)  * and open the template in the editor.
8fedcf98 JFlowMonitor/src/Presentation/TimeSeriesChart.java              (XuDaWei 2011-05-07 12:12:10 +0800   4)  */
dc794e80 JFlowMonitor/src/Presentation/Statics/TimeSeriesChart.java      (XuDaWei 2011-05-21 14:55:47 +0800   5) package Presentation.Statics;
8fedcf98 JFlowMonitor/src/Presentation/TimeSeriesChart.java              (XuDaWei 2011-05-07 12:12:10 +0800   6) 
81896147 JFlowMonitor/src/Presentation/TimeSeriesChart.java              (XuDaWei 2011-05-07 18:01:29 +0800   7) import Logic.PacketPool.IPacketPoolEvent;
81896147 JFlowMonitor/src/Presentation/TimeSeriesChart.java              (XuDaWei 2011-05-07 18:01:29 +0800   8) import Logic.PacketPool.IPacketPoolEventListener;
81896147 JFlowMonitor/src/Presentation/TimeSeriesChart.java              (XuDaWei 2011-05-07 18:01:29 +0800   9) import Logic.PacketPool.PacketPool;
8fedcf98 JFlowMonitor/src/Presentation/TimeSeriesChart.java              (XuDaWei 2011-05-07 12:12:10 +0800  10) import java.awt.BasicStroke;
8fedcf98 JFlowMonitor/src/Presentation/TimeSeriesChart.java              (XuDaWei 2011-05-07 12:12:10 +0800  11) import java.awt.BorderLayout;
8fedcf98 JFlowMonitor/src/Presentation/TimeSeriesChart.java              (XuDaWei 2011-05-07 12:12:10 +0800  12) import java.awt.Color;
8fedcf98 JFlowMonitor/src/Presentation/TimeSeriesChart.java              (XuDaWei 2011-05-07 12:12:10 +0800  13) import java.awt.Font;
6f9a925c JFlowMonitor/src/Presentation/Statics/TimeSeriesChart.java      (XuDaWei 2011-05-21 18:13:17 +0800  14) import java.awt.GridLayout;
8fedcf98 JFlowMonitor/src/Presentation/TimeSeriesChart.java              (XuDaWei 2011-05-07 12:12:10 +0800  15) 
8fedcf98 JFlowMonitor/src/Presentation/TimeSeriesChart.java              (XuDaWei 2011-05-07 12:12:10 +0800  16) import javax.swing.BorderFactory;
8fedcf98 JFlowMonitor/src/Presentation/TimeSeriesChart.java              (XuDaWei 2011-05-07 12:12:10 +0800  17) import javax.swing.JPanel;
8fedcf98 JFlowMonitor/src/Presentation/TimeSeriesChart.java              (XuDaWei 2011-05-07 12:12:10 +0800  18) import javax.swing.Timer;
8fedcf98 JFlowMonitor/src/Presentation/TimeSeriesChart.java              (XuDaWei 2011-05-07 12:12:10 +0800  19) 
8fedcf98 JFlowMonitor/src/Presentation/TimeSeriesChart.java              (XuDaWei 2011-05-07 12:12:10 +0800  20) import org.jfree.chart.ChartPanel;
8fedcf98 JFlowMonitor/src/Presentation/TimeSeriesChart.java              (XuDaWei 2011-05-07 12:12:10 +0800  21) import org.jfree.chart.JFreeChart;
8fedcf98 JFlowMonitor/src/Presentation/TimeSeriesChart.java              (XuDaWei 2011-05-07 12:12:10 +0800  22) import org.jfree.chart.axis.DateAxis;
8fedcf98 JFlowMonitor/src/Presentation/TimeSeriesChart.java              (XuDaWei 2011-05-07 12:12:10 +0800  23) import org.jfree.chart.axis.NumberAxis;
8fedcf98 JFlowMonitor/src/Presentation/TimeSeriesChart.java              (XuDaWei 2011-05-07 12:12:10 +0800  24) import org.jfree.chart.plot.XYPlot;
8fedcf98 JFlowMonitor/src/Presentation/TimeSeriesChart.java              (XuDaWei 2011-05-07 12:12:10 +0800  25) import org.jfree.chart.renderer.xy.XYItemRenderer;
8fedcf98 JFlowMonitor/src/Presentation/TimeSeriesChart.java              (XuDaWei 2011-05-07 12:12:10 +0800  26) import org.jfree.chart.renderer.xy.XYLineAndShapeRenderer;
8fedcf98 JFlowMonitor/src/Presentation/TimeSeriesChart.java              (XuDaWei 2011-05-07 12:12:10 +0800  27) import org.jfree.data.time.Millisecond;
2b5630f8 JFlowMonitor/src/Presentation/TimeSeriesChart.java              (XuDaWei 2011-05-20 19:58:23 +0800  28) import org.jfree.data.time.Second;
8fedcf98 JFlowMonitor/src/Presentation/TimeSeriesChart.java              (XuDaWei 2011-05-07 12:12:10 +0800  29) import org.jfree.data.time.TimeSeries;
8fedcf98 JFlowMonitor/src/Presentation/TimeSeriesChart.java              (XuDaWei 2011-05-07 12:12:10 +0800  30) import org.jfree.data.time.TimeSeriesCollection;
8fedcf98 JFlowMonitor/src/Presentation/TimeSeriesChart.java              (XuDaWei 2011-05-07 12:12:10 +0800  31) import org.jfree.ui.RectangleInsets;
8fedcf98 JFlowMonitor/src/Presentation/TimeSeriesChart.java              (XuDaWei 2011-05-07 12:12:10 +0800  32) 
8fedcf98 JFlowMonitor/src/Presentation/TimeSeriesChart.java              (XuDaWei 2011-05-07 12:12:10 +0800  33) /**
8fedcf98 JFlowMonitor/src/Presentation/TimeSeriesChart.java              (XuDaWei 2011-05-07 12:12:10 +0800  34)  *
8fedcf98 JFlowMonitor/src/Presentation/TimeSeriesChart.java              (XuDaWei 2011-05-07 12:12:10 +0800  35)  * @author Administrator
8fedcf98 JFlowMonitor/src/Presentation/TimeSeriesChart.java              (XuDaWei 2011-05-07 12:12:10 +0800  36)  */
70e8c2e7 JFlowMonitor/src/Presentation/Statics/TimeSeriesChartPanel.java (XuDaWei 2011-05-24 20:52:27 +0800  37) public class TimeSeriesChartPanel extends JPanel {
8fedcf98 JFlowMonitor/src/Presentation/TimeSeriesChart.java              (XuDaWei 2011-05-07 12:12:10 +0800  38) 
8fedcf98 JFlowMonitor/src/Presentation/TimeSeriesChart.java              (XuDaWei 2011-05-07 12:12:10 +0800  39)     /** Time series for total memory used. */
988fe0ab JFlowMonitor/src/Presentation/TimeSeriesChart.java              (XuDaWei 2011-05-20 19:05:48 +0800  40)     private TimeSeries upload;
04bc609b JFlowMonitor/src/Presentation/TimeSeriesChart.java              (XuDaWei 2011-05-16 20:08:38 +0800  41)     private TimeSeries upinn;
04bc609b JFlowMonitor/src/Presentation/TimeSeriesChart.java              (XuDaWei 2011-05-16 20:08:38 +0800  42)     private TimeSeries upout;
8fedcf98 JFlowMonitor/src/Presentation/TimeSeriesChart.java              (XuDaWei 2011-05-07 12:12:10 +0800  43)     /** Time series for free memory. */
988fe0ab JFlowMonitor/src/Presentation/TimeSeriesChart.java              (XuDaWei 2011-05-20 19:05:48 +0800  44)     private TimeSeries down;
04bc609b JFlowMonitor/src/Presentation/TimeSeriesChart.java              (XuDaWei 2011-05-16 20:08:38 +0800  45)     private TimeSeries dninn;
04bc609b JFlowMonitor/src/Presentation/TimeSeriesChart.java              (XuDaWei 2011-05-16 20:08:38 +0800  46)     private TimeSeries dnout;
8fedcf98 JFlowMonitor/src/Presentation/TimeSeriesChart.java              (XuDaWei 2011-05-07 12:12:10 +0800  47) 
8fedcf98 JFlowMonitor/src/Presentation/TimeSeriesChart.java              (XuDaWei 2011-05-07 12:12:10 +0800  48)     /**
8fedcf98 JFlowMonitor/src/Presentation/TimeSeriesChart.java              (XuDaWei 2011-05-07 12:12:10 +0800  49)      * Creates a new application.
8fedcf98 JFlowMonitor/src/Presentation/TimeSeriesChart.java              (XuDaWei 2011-05-07 12:12:10 +0800  50)      *
8fedcf98 JFlowMonitor/src/Presentation/TimeSeriesChart.java              (XuDaWei 2011-05-07 12:12:10 +0800  51)      * @param historyCount the history count (in milliseconds).
8fedcf98 JFlowMonitor/src/Presentation/TimeSeriesChart.java              (XuDaWei 2011-05-07 12:12:10 +0800  52)      */
70e8c2e7 JFlowMonitor/src/Presentation/Statics/TimeSeriesChartPanel.java (XuDaWei 2011-05-24 20:52:27 +0800  53)     public TimeSeriesChartPanel(int historyCount, boolean det) {
8fedcf98 JFlowMonitor/src/Presentation/TimeSeriesChart.java              (XuDaWei 2011-05-07 12:12:10 +0800  54)         super(new BorderLayout());
8fedcf98 JFlowMonitor/src/Presentation/TimeSeriesChart.java              (XuDaWei 2011-05-07 12:12:10 +0800  55) // create two series that automatically discard data more than 30
8fedcf98 JFlowMonitor/src/Presentation/TimeSeriesChart.java              (XuDaWei 2011-05-07 12:12:10 +0800  56) // seconds old...
988fe0ab JFlowMonitor/src/Presentation/TimeSeriesChart.java              (XuDaWei 2011-05-20 19:05:48 +0800  57)         this.upload = new TimeSeries("Upload", Millisecond.class);
988fe0ab JFlowMonitor/src/Presentation/TimeSeriesChart.java              (XuDaWei 2011-05-20 19:05:48 +0800  58)         this.upload.setMaximumItemAge(historyCount);
c7f2dff0 JFlowMonitor/src/Presentation/TimeSeriesChart.java              (XuDaWei 2011-05-20 16:20:20 +0800  59)         this.upinn = new TimeSeries("UpInner", Millisecond.class);
c7f2dff0 JFlowMonitor/src/Presentation/TimeSeriesChart.java              (XuDaWei 2011-05-20 16:20:20 +0800  60)         this.upinn.setMaximumItemAge(historyCount);
c7f2dff0 JFlowMonitor/src/Presentation/TimeSeriesChart.java              (XuDaWei 2011-05-20 16:20:20 +0800  61)         this.upout = new TimeSeries("UpOuter", Millisecond.class);
c7f2dff0 JFlowMonitor/src/Presentation/TimeSeriesChart.java              (XuDaWei 2011-05-20 16:20:20 +0800  62)         this.upout.setMaximumItemAge(historyCount);
988fe0ab JFlowMonitor/src/Presentation/TimeSeriesChart.java              (XuDaWei 2011-05-20 19:05:48 +0800  63)         this.down = new TimeSeries("Download", Millisecond.class);
988fe0ab JFlowMonitor/src/Presentation/TimeSeriesChart.java              (XuDaWei 2011-05-20 19:05:48 +0800  64)         this.down.setMaximumItemAge(historyCount);
c7f2dff0 JFlowMonitor/src/Presentation/TimeSeriesChart.java              (XuDaWei 2011-05-20 16:20:20 +0800  65)         this.dninn = new TimeSeries("DownInner", Millisecond.class);
c7f2dff0 JFlowMonitor/src/Presentation/TimeSeriesChart.java              (XuDaWei 2011-05-20 16:20:20 +0800  66)         this.dninn.setMaximumItemAge(historyCount);
c7f2dff0 JFlowMonitor/src/Presentation/TimeSeriesChart.java              (XuDaWei 2011-05-20 16:20:20 +0800  67)         this.dnout = new TimeSeries("DownOuter", Millisecond.class);
c7f2dff0 JFlowMonitor/src/Presentation/TimeSeriesChart.java              (XuDaWei 2011-05-20 16:20:20 +0800  68)         this.dnout.setMaximumItemAge(historyCount);
755c7cc7 JFlowMonitor/src/Presentation/TimeSeriesChart.java              (XuDaWei 2011-05-09 16:04:31 +0800  69) 
8fedcf98 JFlowMonitor/src/Presentation/TimeSeriesChart.java              (XuDaWei 2011-05-07 12:12:10 +0800  70)         TimeSeriesCollection dataset = new TimeSeriesCollection();
6f9a925c JFlowMonitor/src/Presentation/Statics/TimeSeriesChart.java      (XuDaWei 2011-05-21 18:13:17 +0800  71)         TimeSeriesCollection dataset2 = new TimeSeriesCollection();
988fe0ab JFlowMonitor/src/Presentation/TimeSeriesChart.java              (XuDaWei 2011-05-20 19:05:48 +0800  72)         dataset.addSeries(this.upload);
6f9a925c JFlowMonitor/src/Presentation/Statics/TimeSeriesChart.java      (XuDaWei 2011-05-21 18:13:17 +0800  73)         dataset2.addSeries(this.down);
6f9a925c JFlowMonitor/src/Presentation/Statics/TimeSeriesChart.java      (XuDaWei 2011-05-21 18:13:17 +0800  74)         dataset.addSeries(this.upinn);
6f9a925c JFlowMonitor/src/Presentation/Statics/TimeSeriesChart.java      (XuDaWei 2011-05-21 18:13:17 +0800  75)         dataset.addSeries(this.upout);
6f9a925c JFlowMonitor/src/Presentation/Statics/TimeSeriesChart.java      (XuDaWei 2011-05-21 18:13:17 +0800  76)         dataset2.addSeries(this.dninn);
6f9a925c JFlowMonitor/src/Presentation/Statics/TimeSeriesChart.java      (XuDaWei 2011-05-21 18:13:17 +0800  77)         dataset2.addSeries(this.dnout);
6f9a925c JFlowMonitor/src/Presentation/Statics/TimeSeriesChart.java      (XuDaWei 2011-05-21 18:13:17 +0800  78)         DateAxis domain;
86181ff0 JFlowMonitor/src/Presentation/TimeSeriesChart.java              (XuDaWei 2011-05-21 12:50:42 +0800  79)         NumberAxis range;
6f9a925c JFlowMonitor/src/Presentation/Statics/TimeSeriesChart.java      (XuDaWei 2011-05-21 18:13:17 +0800  80)         domain = new DateAxis("Time(s)");
6f9a925c JFlowMonitor/src/Presentation/Statics/TimeSeriesChart.java      (XuDaWei 2011-05-21 18:13:17 +0800  81)         range = new NumberAxis("Flow(kb)");
8fedcf98 JFlowMonitor/src/Presentation/TimeSeriesChart.java              (XuDaWei 2011-05-07 12:12:10 +0800  82)         domain.setTickLabelFont(new Font("SansSerif", Font.PLAIN, 12));
8fedcf98 JFlowMonitor/src/Presentation/TimeSeriesChart.java              (XuDaWei 2011-05-07 12:12:10 +0800  83)         range.setTickLabelFont(new Font("SansSerif", Font.PLAIN, 12));
8fedcf98 JFlowMonitor/src/Presentation/TimeSeriesChart.java              (XuDaWei 2011-05-07 12:12:10 +0800  84)         domain.setLabelFont(new Font("SansSerif", Font.PLAIN, 14));
8fedcf98 JFlowMonitor/src/Presentation/TimeSeriesChart.java              (XuDaWei 2011-05-07 12:12:10 +0800  85)         range.setLabelFont(new Font("SansSerif", Font.PLAIN, 14));
8fedcf98 JFlowMonitor/src/Presentation/TimeSeriesChart.java              (XuDaWei 2011-05-07 12:12:10 +0800  86)         XYItemRenderer renderer = new XYLineAndShapeRenderer(true, false);
8fedcf98 JFlowMonitor/src/Presentation/TimeSeriesChart.java              (XuDaWei 2011-05-07 12:12:10 +0800  87)         renderer.setSeriesPaint(0, Color.red);
8fedcf98 JFlowMonitor/src/Presentation/TimeSeriesChart.java              (XuDaWei 2011-05-07 12:12:10 +0800  88)         renderer.setSeriesPaint(1, Color.green);
c7f2dff0 JFlowMonitor/src/Presentation/TimeSeriesChart.java              (XuDaWei 2011-05-20 16:20:20 +0800  89) 
8fedcf98 JFlowMonitor/src/Presentation/TimeSeriesChart.java              (XuDaWei 2011-05-07 12:12:10 +0800  90)         renderer.setStroke(
8fedcf98 JFlowMonitor/src/Presentation/TimeSeriesChart.java              (XuDaWei 2011-05-07 12:12:10 +0800  91)                 new BasicStroke(3f, BasicStroke.CAP_BUTT, BasicStroke.JOIN_BEVEL));
8fedcf98 JFlowMonitor/src/Presentation/TimeSeriesChart.java              (XuDaWei 2011-05-07 12:12:10 +0800  92)         XYPlot plot = new XYPlot(dataset, domain, range, renderer);
86181ff0 JFlowMonitor/src/Presentation/TimeSeriesChart.java              (XuDaWei 2011-05-21 12:50:42 +0800  93)         plot.setBackgroundPaint(Color.white);
86181ff0 JFlowMonitor/src/Presentation/TimeSeriesChart.java              (XuDaWei 2011-05-21 12:50:42 +0800  94)         plot.setDomainGridlinePaint(Color.DARK_GRAY);
86181ff0 JFlowMonitor/src/Presentation/TimeSeriesChart.java              (XuDaWei 2011-05-21 12:50:42 +0800  95)         plot.setRangeGridlinePaint(Color.DARK_GRAY);
8fedcf98 JFlowMonitor/src/Presentation/TimeSeriesChart.java              (XuDaWei 2011-05-07 12:12:10 +0800  96)         plot.setAxisOffset(new RectangleInsets(5.0, 5.0, 5.0, 5.0));
70e8c2e7 JFlowMonitor/src/Presentation/Statics/TimeSeriesChartPanel.java (XuDaWei 2011-05-24 20:52:27 +0800  97)         
6f9a925c JFlowMonitor/src/Presentation/Statics/TimeSeriesChart.java      (XuDaWei 2011-05-21 18:13:17 +0800  98)         XYPlot plot2 = new XYPlot(dataset2, domain, range, renderer);
6f9a925c JFlowMonitor/src/Presentation/Statics/TimeSeriesChart.java      (XuDaWei 2011-05-21 18:13:17 +0800  99)         plot2.setBackgroundPaint(Color.white);
6f9a925c JFlowMonitor/src/Presentation/Statics/TimeSeriesChart.java      (XuDaWei 2011-05-21 18:13:17 +0800 100)         plot2.setDomainGridlinePaint(Color.DARK_GRAY);
6f9a925c JFlowMonitor/src/Presentation/Statics/TimeSeriesChart.java      (XuDaWei 2011-05-21 18:13:17 +0800 101)         plot2.setRangeGridlinePaint(Color.DARK_GRAY);
6f9a925c JFlowMonitor/src/Presentation/Statics/TimeSeriesChart.java      (XuDaWei 2011-05-21 18:13:17 +0800 102)         plot2.setAxisOffset(new RectangleInsets(5.0, 5.0, 5.0, 5.0));
70e8c2e7 JFlowMonitor/src/Presentation/Statics/TimeSeriesChartPanel.java (XuDaWei 2011-05-24 20:52:27 +0800 103) 
86181ff0 JFlowMonitor/src/Presentation/TimeSeriesChart.java              (XuDaWei 2011-05-21 12:50:42 +0800 104)         domain.setAutoRange(true);
8fedcf98 JFlowMonitor/src/Presentation/TimeSeriesChart.java              (XuDaWei 2011-05-07 12:12:10 +0800 105)         domain.setLowerMargin(0.0);
8fedcf98 JFlowMonitor/src/Presentation/TimeSeriesChart.java              (XuDaWei 2011-05-07 12:12:10 +0800 106)         domain.setUpperMargin(0.0);
8fedcf98 JFlowMonitor/src/Presentation/TimeSeriesChart.java              (XuDaWei 2011-05-07 12:12:10 +0800 107)         domain.setTickLabelsVisible(true);
6f9a925c JFlowMonitor/src/Presentation/Statics/TimeSeriesChart.java      (XuDaWei 2011-05-21 18:13:17 +0800 108)         range.setStandardTickUnits(NumberAxis.createIntegerTickUnits());
6f9a925c JFlowMonitor/src/Presentation/Statics/TimeSeriesChart.java      (XuDaWei 2011-05-21 18:13:17 +0800 109)         range.setAutoRange(true);
86181ff0 JFlowMonitor/src/Presentation/TimeSeriesChart.java              (XuDaWei 2011-05-21 12:50:42 +0800 110) 
86181ff0 JFlowMonitor/src/Presentation/TimeSeriesChart.java              (XuDaWei 2011-05-21 12:50:42 +0800 111) //        range.setAutoRangeMinimumSize(+100);
86181ff0 JFlowMonitor/src/Presentation/TimeSeriesChart.java              (XuDaWei 2011-05-21 12:50:42 +0800 112) //        range.setLowerBound(0);
6f9a925c JFlowMonitor/src/Presentation/Statics/TimeSeriesChart.java      (XuDaWei 2011-05-21 18:13:17 +0800 113) //        range.setLowerMargin(0.0);
6f9a925c JFlowMonitor/src/Presentation/Statics/TimeSeriesChart.java      (XuDaWei 2011-05-21 18:13:17 +0800 114) //        range.setUpperMargin(0.5);
6f9a925c JFlowMonitor/src/Presentation/Statics/TimeSeriesChart.java      (XuDaWei 2011-05-21 18:13:17 +0800 115)         JFreeChart chart = new JFreeChart(
6f9a925c JFlowMonitor/src/Presentation/Statics/TimeSeriesChart.java      (XuDaWei 2011-05-21 18:13:17 +0800 116)                 "实时上传流量监控",
6f9a925c JFlowMonitor/src/Presentation/Statics/TimeSeriesChart.java      (XuDaWei 2011-05-21 18:13:17 +0800 117)                 new Font("SansSerif", Font.BOLD, 16),
6f9a925c JFlowMonitor/src/Presentation/Statics/TimeSeriesChart.java      (XuDaWei 2011-05-21 18:13:17 +0800 118)                 plot,
6f9a925c JFlowMonitor/src/Presentation/Statics/TimeSeriesChart.java      (XuDaWei 2011-05-21 18:13:17 +0800 119)                 true);
6f9a925c JFlowMonitor/src/Presentation/Statics/TimeSeriesChart.java      (XuDaWei 2011-05-21 18:13:17 +0800 120)         JFreeChart chart2 = new JFreeChart(
6f9a925c JFlowMonitor/src/Presentation/Statics/TimeSeriesChart.java      (XuDaWei 2011-05-21 18:13:17 +0800 121)                 "实时下载流量监控",
6f9a925c JFlowMonitor/src/Presentation/Statics/TimeSeriesChart.java      (XuDaWei 2011-05-21 18:13:17 +0800 122)                 new Font("SansSerif", Font.BOLD, 16),
6f9a925c JFlowMonitor/src/Presentation/Statics/TimeSeriesChart.java      (XuDaWei 2011-05-21 18:13:17 +0800 123)                 plot2,
6f9a925c JFlowMonitor/src/Presentation/Statics/TimeSeriesChart.java      (XuDaWei 2011-05-21 18:13:17 +0800 124)                 true);
6f9a925c JFlowMonitor/src/Presentation/Statics/TimeSeriesChart.java      (XuDaWei 2011-05-21 18:13:17 +0800 125) 
86181ff0 JFlowMonitor/src/Presentation/TimeSeriesChart.java              (XuDaWei 2011-05-21 12:50:42 +0800 126) //        chart.setBackgroundPaint(Color.lightGray);
6f9a925c JFlowMonitor/src/Presentation/Statics/TimeSeriesChart.java      (XuDaWei 2011-05-21 18:13:17 +0800 127) //        ChartPanel chartPanel = new ChartPanel(chart);
6f9a925c JFlowMonitor/src/Presentation/Statics/TimeSeriesChart.java      (XuDaWei 2011-05-21 18:13:17 +0800 128) 
86181ff0 JFlowMonitor/src/Presentation/TimeSeriesChart.java              (XuDaWei 2011-05-21 12:50:42 +0800 129) //        chartPanel.setBorder(BorderFactory.createCompoundBorder(
86181ff0 JFlowMonitor/src/Presentation/TimeSeriesChart.java              (XuDaWei 2011-05-21 12:50:42 +0800 130) //                BorderFactory.createEmptyBorder(4, 4, 4, 4),
86181ff0 JFlowMonitor/src/Presentation/TimeSeriesChart.java              (XuDaWei 2011-05-21 12:50:42 +0800 131) //                BorderFactory.createLineBorder(Color.black)));
6f9a925c JFlowMonitor/src/Presentation/Statics/TimeSeriesChart.java      (XuDaWei 2011-05-21 18:13:17 +0800 132) //        add(chartPanel);
6f9a925c JFlowMonitor/src/Presentation/Statics/TimeSeriesChart.java      (XuDaWei 2011-05-21 18:13:17 +0800 133)         JPanel panel = new JPanel(new GridLayout(2, 1));
6f9a925c JFlowMonitor/src/Presentation/Statics/TimeSeriesChart.java      (XuDaWei 2011-05-21 18:13:17 +0800 134)         panel.add(new ChartPanel(chart));
6f9a925c JFlowMonitor/src/Presentation/Statics/TimeSeriesChart.java      (XuDaWei 2011-05-21 18:13:17 +0800 135)         panel.add(new ChartPanel(chart2));
6f9a925c JFlowMonitor/src/Presentation/Statics/TimeSeriesChart.java      (XuDaWei 2011-05-21 18:13:17 +0800 136)         add(panel);
2b5630f8 JFlowMonitor/src/Presentation/TimeSeriesChart.java              (XuDaWei 2011-05-20 19:58:23 +0800 137) 
86181ff0 JFlowMonitor/src/Presentation/TimeSeriesChart.java              (XuDaWei 2011-05-21 12:50:42 +0800 138)         for (int i = 0; i < 90; i++) {
86181ff0 JFlowMonitor/src/Presentation/TimeSeriesChart.java              (XuDaWei 2011-05-21 12:50:42 +0800 139)             this.upload.add(new Millisecond(i, new Second()), 0);
86181ff0 JFlowMonitor/src/Presentation/TimeSeriesChart.java              (XuDaWei 2011-05-21 12:50:42 +0800 140)             this.upinn.add(new Millisecond(i, new Second()), 0);
86181ff0 JFlowMonitor/src/Presentation/TimeSeriesChart.java              (XuDaWei 2011-05-21 12:50:42 +0800 141)             this.upout.add(new Millisecond(i, new Second()), 0);
86181ff0 JFlowMonitor/src/Presentation/TimeSeriesChart.java              (XuDaWei 2011-05-21 12:50:42 +0800 142)             this.down.add(new Millisecond(i, new Second()), 0);
86181ff0 JFlowMonitor/src/Presentation/TimeSeriesChart.java              (XuDaWei 2011-05-21 12:50:42 +0800 143)             this.dninn.add(new Millisecond(i, new Second()), 0);
86181ff0 JFlowMonitor/src/Presentation/TimeSeriesChart.java              (XuDaWei 2011-05-21 12:50:42 +0800 144)             this.dnout.add(new Millisecond(i, new Second()), 0);
2b5630f8 JFlowMonitor/src/Presentation/TimeSeriesChart.java              (XuDaWei 2011-05-20 19:58:23 +0800 145)         }
8fedcf98 JFlowMonitor/src/Presentation/TimeSeriesChart.java              (XuDaWei 2011-05-07 12:12:10 +0800 146)     }
8fedcf98 JFlowMonitor/src/Presentation/TimeSeriesChart.java              (XuDaWei 2011-05-07 12:12:10 +0800 147) 
755c7cc7 JFlowMonitor/src/Presentation/TimeSeriesChart.java              (XuDaWei 2011-05-09 16:04:31 +0800 148)     private void addUploadObservation(double y) {
988fe0ab JFlowMonitor/src/Presentation/TimeSeriesChart.java              (XuDaWei 2011-05-20 19:05:48 +0800 149)         this.upload.add(new Millisecond(), y);
8fedcf98 JFlowMonitor/src/Presentation/TimeSeriesChart.java              (XuDaWei 2011-05-07 12:12:10 +0800 150)     }
86181ff0 JFlowMonitor/src/Presentation/TimeSeriesChart.java              (XuDaWei 2011-05-21 12:50:42 +0800 151) 
c7f2dff0 JFlowMonitor/src/Presentation/TimeSeriesChart.java              (XuDaWei 2011-05-20 16:20:20 +0800 152)     private void addUpinnObservation(double y) {
c7f2dff0 JFlowMonitor/src/Presentation/TimeSeriesChart.java              (XuDaWei 2011-05-20 16:20:20 +0800 153)         this.upinn.add(new Millisecond(), y);
c7f2dff0 JFlowMonitor/src/Presentation/TimeSeriesChart.java              (XuDaWei 2011-05-20 16:20:20 +0800 154)     }
86181ff0 JFlowMonitor/src/Presentation/TimeSeriesChart.java              (XuDaWei 2011-05-21 12:50:42 +0800 155) 
c7f2dff0 JFlowMonitor/src/Presentation/TimeSeriesChart.java              (XuDaWei 2011-05-20 16:20:20 +0800 156)     private void addUpoutObservation(double y) {
c7f2dff0 JFlowMonitor/src/Presentation/TimeSeriesChart.java              (XuDaWei 2011-05-20 16:20:20 +0800 157)         this.upout.add(new Millisecond(), y);
c7f2dff0 JFlowMonitor/src/Presentation/TimeSeriesChart.java              (XuDaWei 2011-05-20 16:20:20 +0800 158)     }
8fedcf98 JFlowMonitor/src/Presentation/TimeSeriesChart.java              (XuDaWei 2011-05-07 12:12:10 +0800 159) 
8fedcf98 JFlowMonitor/src/Presentation/TimeSeriesChart.java              (XuDaWei 2011-05-07 12:12:10 +0800 160)     /**
8fedcf98 JFlowMonitor/src/Presentation/TimeSeriesChart.java              (XuDaWei 2011-05-07 12:12:10 +0800 161)      * Adds an observation to the ’free memory’ time series.
8fedcf98 JFlowMonitor/src/Presentation/TimeSeriesChart.java              (XuDaWei 2011-05-07 12:12:10 +0800 162)      *
8fedcf98 JFlowMonitor/src/Presentation/TimeSeriesChart.java              (XuDaWei 2011-05-07 12:12:10 +0800 163)      * @param y the free memory.
8fedcf98 JFlowMonitor/src/Presentation/TimeSeriesChart.java              (XuDaWei 2011-05-07 12:12:10 +0800 164)      */
755c7cc7 JFlowMonitor/src/Presentation/TimeSeriesChart.java              (XuDaWei 2011-05-09 16:04:31 +0800 165)     private void addDownloadObservation(double y) {
988fe0ab JFlowMonitor/src/Presentation/TimeSeriesChart.java              (XuDaWei 2011-05-20 19:05:48 +0800 166)         this.down.add(new Millisecond(), y);
8fedcf98 JFlowMonitor/src/Presentation/TimeSeriesChart.java              (XuDaWei 2011-05-07 12:12:10 +0800 167)     }
86181ff0 JFlowMonitor/src/Presentation/TimeSeriesChart.java              (XuDaWei 2011-05-21 12:50:42 +0800 168) 
c7f2dff0 JFlowMonitor/src/Presentation/TimeSeriesChart.java              (XuDaWei 2011-05-20 16:20:20 +0800 169)     private void addDowninnObservation(double y) {
c7f2dff0 JFlowMonitor/src/Presentation/TimeSeriesChart.java              (XuDaWei 2011-05-20 16:20:20 +0800 170)         this.dninn.add(new Millisecond(), y);
c7f2dff0 JFlowMonitor/src/Presentation/TimeSeriesChart.java              (XuDaWei 2011-05-20 16:20:20 +0800 171)     }
86181ff0 JFlowMonitor/src/Presentation/TimeSeriesChart.java              (XuDaWei 2011-05-21 12:50:42 +0800 172) 
c7f2dff0 JFlowMonitor/src/Presentation/TimeSeriesChart.java              (XuDaWei 2011-05-20 16:20:20 +0800 173)     private void addDownoutObservation(double y) {
c7f2dff0 JFlowMonitor/src/Presentation/TimeSeriesChart.java              (XuDaWei 2011-05-20 16:20:20 +0800 174)         this.dnout.add(new Millisecond(), y);
c7f2dff0 JFlowMonitor/src/Presentation/TimeSeriesChart.java              (XuDaWei 2011-05-20 16:20:20 +0800 175)     }
8fedcf98 JFlowMonitor/src/Presentation/TimeSeriesChart.java              (XuDaWei 2011-05-07 12:12:10 +0800 176) 
8fedcf98 JFlowMonitor/src/Presentation/TimeSeriesChart.java              (XuDaWei 2011-05-07 12:12:10 +0800 177)     /**
8fedcf98 JFlowMonitor/src/Presentation/TimeSeriesChart.java              (XuDaWei 2011-05-07 12:12:10 +0800 178)      * The data generator.
8fedcf98 JFlowMonitor/src/Presentation/TimeSeriesChart.java              (XuDaWei 2011-05-07 12:12:10 +0800 179)      */
81896147 JFlowMonitor/src/Presentation/TimeSeriesChart.java              (XuDaWei 2011-05-07 18:01:29 +0800 180)     class DataGenerator extends Timer implements IPacketPoolEventListener {
8fedcf98 JFlowMonitor/src/Presentation/TimeSeriesChart.java              (XuDaWei 2011-05-07 12:12:10 +0800 181) 
8fedcf98 JFlowMonitor/src/Presentation/TimeSeriesChart.java              (XuDaWei 2011-05-07 12:12:10 +0800 182)         /**
8fedcf98 JFlowMonitor/src/Presentation/TimeSeriesChart.java              (XuDaWei 2011-05-07 12:12:10 +0800 183)          * Constructor.
8fedcf98 JFlowMonitor/src/Presentation/TimeSeriesChart.java              (XuDaWei 2011-05-07 12:12:10 +0800 184)          *
8fedcf98 JFlowMonitor/src/Presentation/TimeSeriesChart.java              (XuDaWei 2011-05-07 12:12:10 +0800 185)          * @param interval the interval (in milliseconds)
8fedcf98 JFlowMonitor/src/Presentation/TimeSeriesChart.java              (XuDaWei 2011-05-07 12:12:10 +0800 186)          */
8fedcf98 JFlowMonitor/src/Presentation/TimeSeriesChart.java              (XuDaWei 2011-05-07 12:12:10 +0800 187)         DataGenerator(int interval) {
8fedcf98 JFlowMonitor/src/Presentation/TimeSeriesChart.java              (XuDaWei 2011-05-07 12:12:10 +0800 188)             super(interval, null);
81896147 JFlowMonitor/src/Presentation/TimeSeriesChart.java              (XuDaWei 2011-05-07 18:01:29 +0800 189) //            addActionListener(this);
81896147 JFlowMonitor/src/Presentation/TimeSeriesChart.java              (XuDaWei 2011-05-07 18:01:29 +0800 190)             PacketPool.Instance().addPacketPoolListener(this);
755c7cc7 JFlowMonitor/src/Presentation/TimeSeriesChart.java              (XuDaWei 2011-05-09 16:04:31 +0800 191) //            for(int i=0;i<50;i++){
755c7cc7 JFlowMonitor/src/Presentation/TimeSeriesChart.java              (XuDaWei 2011-05-09 16:04:31 +0800 192) //                addUploadObservation(0);
755c7cc7 JFlowMonitor/src/Presentation/TimeSeriesChart.java              (XuDaWei 2011-05-09 16:04:31 +0800 193) //                addDownloadObservation(0);
755c7cc7 JFlowMonitor/src/Presentation/TimeSeriesChart.java              (XuDaWei 2011-05-09 16:04:31 +0800 194) //            }
8fedcf98 JFlowMonitor/src/Presentation/TimeSeriesChart.java              (XuDaWei 2011-05-07 12:12:10 +0800 195)         }
8fedcf98 JFlowMonitor/src/Presentation/TimeSeriesChart.java              (XuDaWei 2011-05-07 12:12:10 +0800 196) 
8fedcf98 JFlowMonitor/src/Presentation/TimeSeriesChart.java              (XuDaWei 2011-05-07 12:12:10 +0800 197)         /**
8fedcf98 JFlowMonitor/src/Presentation/TimeSeriesChart.java              (XuDaWei 2011-05-07 12:12:10 +0800 198)          * Adds a new free/total memory reading to the dataset.
8fedcf98 JFlowMonitor/src/Presentation/TimeSeriesChart.java              (XuDaWei 2011-05-07 12:12:10 +0800 199)          *
8fedcf98 JFlowMonitor/src/Presentation/TimeSeriesChart.java              (XuDaWei 2011-05-07 12:12:10 +0800 200)          * @param event the action event.
8fedcf98 JFlowMonitor/src/Presentation/TimeSeriesChart.java              (XuDaWei 2011-05-07 12:12:10 +0800 201)          */
81896147 JFlowMonitor/src/Presentation/TimeSeriesChart.java              (XuDaWei 2011-05-07 18:01:29 +0800 202) //        public void actionPerformed(ActionEvent event) {
81896147 JFlowMonitor/src/Presentation/TimeSeriesChart.java              (XuDaWei 2011-05-07 18:01:29 +0800 203) //            long f = Runtime.getRuntime().freeMemory();
81896147 JFlowMonitor/src/Presentation/TimeSeriesChart.java              (XuDaWei 2011-05-07 18:01:29 +0800 204) //            long t = Runtime.getRuntime().totalMemory();
755c7cc7 JFlowMonitor/src/Presentation/TimeSeriesChart.java              (XuDaWei 2011-05-09 16:04:31 +0800 205) //            addUploadObservation(t);
755c7cc7 JFlowMonitor/src/Presentation/TimeSeriesChart.java              (XuDaWei 2011-05-09 16:04:31 +0800 206) //            addDownloadObservation(f);
81896147 JFlowMonitor/src/Presentation/TimeSeriesChart.java              (XuDaWei 2011-05-07 18:01:29 +0800 207) //        }
81896147 JFlowMonitor/src/Presentation/TimeSeriesChart.java              (XuDaWei 2011-05-07 18:01:29 +0800 208)         public void onPoolRefresh(IPacketPoolEvent e) {
86181ff0 JFlowMonitor/src/Presentation/TimeSeriesChart.java              (XuDaWei 2011-05-21 12:50:42 +0800 209)             double us = e.getUploadSpeed() / 1024;
86181ff0 JFlowMonitor/src/Presentation/TimeSeriesChart.java              (XuDaWei 2011-05-21 12:50:42 +0800 210)             double ui = e.getInnerUploadSpeed() / 1024;
86181ff0 JFlowMonitor/src/Presentation/TimeSeriesChart.java              (XuDaWei 2011-05-21 12:50:42 +0800 211)             double uo = e.getOutterUploadSpeed() / 1024;
86181ff0 JFlowMonitor/src/Presentation/TimeSeriesChart.java              (XuDaWei 2011-05-21 12:50:42 +0800 212)             double ds = e.getDownloadSpeed() / 1024;
86181ff0 JFlowMonitor/src/Presentation/TimeSeriesChart.java              (XuDaWei 2011-05-21 12:50:42 +0800 213)             double di = e.getInnerDownloadSpeed() / 1024;
86181ff0 JFlowMonitor/src/Presentation/TimeSeriesChart.java              (XuDaWei 2011-05-21 12:50:42 +0800 214)             double dout = e.getOutterDownloadSpeed() / 1024;
755c7cc7 JFlowMonitor/src/Presentation/TimeSeriesChart.java              (XuDaWei 2011-05-09 16:04:31 +0800 215)             addUploadObservation(us);
c7f2dff0 JFlowMonitor/src/Presentation/TimeSeriesChart.java              (XuDaWei 2011-05-20 16:20:20 +0800 216)             addUpinnObservation(ui);
c7f2dff0 JFlowMonitor/src/Presentation/TimeSeriesChart.java              (XuDaWei 2011-05-20 16:20:20 +0800 217)             addUpoutObservation(uo);
755c7cc7 JFlowMonitor/src/Presentation/TimeSeriesChart.java              (XuDaWei 2011-05-09 16:04:31 +0800 218)             addDownloadObservation(ds);
86181ff0 JFlowMonitor/src/Presentation/TimeSeriesChart.java              (XuDaWei 2011-05-21 12:50:42 +0800 219)             addDowninnObservation(di);
86181ff0 JFlowMonitor/src/Presentation/TimeSeriesChart.java              (XuDaWei 2011-05-21 12:50:42 +0800 220)             ;
c7f2dff0 JFlowMonitor/src/Presentation/TimeSeriesChart.java              (XuDaWei 2011-05-20 16:20:20 +0800 221)             addDownoutObservation(dout);
81896147 JFlowMonitor/src/Presentation/TimeSeriesChart.java              (XuDaWei 2011-05-07 18:01:29 +0800 222)         }
81896147 JFlowMonitor/src/Presentation/TimeSeriesChart.java              (XuDaWei 2011-05-07 18:01:29 +0800 223) 
81896147 JFlowMonitor/src/Presentation/TimeSeriesChart.java              (XuDaWei 2011-05-07 18:01:29 +0800 224)         public boolean isEnable() {
81896147 JFlowMonitor/src/Presentation/TimeSeriesChart.java              (XuDaWei 2011-05-07 18:01:29 +0800 225)             return true;
81896147 JFlowMonitor/src/Presentation/TimeSeriesChart.java              (XuDaWei 2011-05-07 18:01:29 +0800 226)         }
81896147 JFlowMonitor/src/Presentation/TimeSeriesChart.java              (XuDaWei 2011-05-07 18:01:29 +0800 227) 
81896147 JFlowMonitor/src/Presentation/TimeSeriesChart.java              (XuDaWei 2011-05-07 18:01:29 +0800 228)         public boolean isConcern() {
81896147 JFlowMonitor/src/Presentation/TimeSeriesChart.java              (XuDaWei 2011-05-07 18:01:29 +0800 229)             return true;
8fedcf98 JFlowMonitor/src/Presentation/TimeSeriesChart.java              (XuDaWei 2011-05-07 12:12:10 +0800 230)         }
8fedcf98 JFlowMonitor/src/Presentation/TimeSeriesChart.java              (XuDaWei 2011-05-07 12:12:10 +0800 231)     }
8fedcf98 JFlowMonitor/src/Presentation/TimeSeriesChart.java              (XuDaWei 2011-05-07 12:12:10 +0800 232)     /**
8fedcf98 JFlowMonitor/src/Presentation/TimeSeriesChart.java              (XuDaWei 2011-05-07 12:12:10 +0800 233)      * Entry point for the sample application.
8fedcf98 JFlowMonitor/src/Presentation/TimeSeriesChart.java              (XuDaWei 2011-05-07 12:12:10 +0800 234)      *
8fedcf98 JFlowMonitor/src/Presentation/TimeSeriesChart.java              (XuDaWei 2011-05-07 12:12:10 +0800 235)      * @param args ignored.
8fedcf98 JFlowMonitor/src/Presentation/TimeSeriesChart.java              (XuDaWei 2011-05-07 12:12:10 +0800 236)      */
64814568 JFlowMonitor/src/Presentation/TimeSeriesChart.java              (XuDaWei 2011-05-07 14:43:19 +0800 237) //    public static void main(String[] args) {
64814568 JFlowMonitor/src/Presentation/TimeSeriesChart.java              (XuDaWei 2011-05-07 14:43:19 +0800 238) //        JFrame frame = new JFrame("Memory Usage Demo");
64814568 JFlowMonitor/src/Presentation/TimeSeriesChart.java              (XuDaWei 2011-05-07 14:43:19 +0800 239) //        TimeSeriesChart panel = new TimeSeriesChart(30000);
64814568 JFlowMonitor/src/Presentation/TimeSeriesChart.java              (XuDaWei 2011-05-07 14:43:19 +0800 240) //        frame.getContentPane().add(panel, BorderLayout.CENTER);
64814568 JFlowMonitor/src/Presentation/TimeSeriesChart.java              (XuDaWei 2011-05-07 14:43:19 +0800 241) //        frame.setBounds(200, 120, 600, 280);
64814568 JFlowMonitor/src/Presentation/TimeSeriesChart.java              (XuDaWei 2011-05-07 14:43:19 +0800 242) //        frame.setVisible(true);
64814568 JFlowMonitor/src/Presentation/TimeSeriesChart.java              (XuDaWei 2011-05-07 14:43:19 +0800 243) //        panel.new DataGenerator(100).start();
64814568 JFlowMonitor/src/Presentation/TimeSeriesChart.java              (XuDaWei 2011-05-07 14:43:19 +0800 244) //        frame.addWindowListener(new WindowAdapter() {
64814568 JFlowMonitor/src/Presentation/TimeSeriesChart.java              (XuDaWei 2011-05-07 14:43:19 +0800 245) //
64814568 JFlowMonitor/src/Presentation/TimeSeriesChart.java              (XuDaWei 2011-05-07 14:43:19 +0800 246) //            public void windowClosing(WindowEvent e) {
64814568 JFlowMonitor/src/Presentation/TimeSeriesChart.java              (XuDaWei 2011-05-07 14:43:19 +0800 247) //                System.exit(0);
64814568 JFlowMonitor/src/Presentation/TimeSeriesChart.java              (XuDaWei 2011-05-07 14:43:19 +0800 248) //            }
64814568 JFlowMonitor/src/Presentation/TimeSeriesChart.java              (XuDaWei 2011-05-07 14:43:19 +0800 249) //        });
64814568 JFlowMonitor/src/Presentation/TimeSeriesChart.java              (XuDaWei 2011-05-07 14:43:19 +0800 250) //    }
8fedcf98 JFlowMonitor/src/Presentation/TimeSeriesChart.java              (XuDaWei 2011-05-07 12:12:10 +0800 251) }
01a42767 (aHa     2011-05-20 21:42:29 +0800  1) /*
01a42767 (aHa     2011-05-20 21:42:29 +0800  2)  * To change this template, choose Tools | Templates
01a42767 (aHa     2011-05-20 21:42:29 +0800  3)  * and open the template in the editor.
01a42767 (aHa     2011-05-20 21:42:29 +0800  4)  */
01a42767 (aHa     2011-05-20 21:42:29 +0800  5) package Presentation;
01a42767 (aHa     2011-05-20 21:42:29 +0800  6) 
01a42767 (aHa     2011-05-20 21:42:29 +0800  7) import java.awt.MenuItem;
01a42767 (aHa     2011-05-20 21:42:29 +0800  8) import java.awt.PopupMenu;
01a42767 (aHa     2011-05-20 21:42:29 +0800  9) import java.awt.SystemTray;
01a42767 (aHa     2011-05-20 21:42:29 +0800 10) import java.awt.TrayIcon;
01a42767 (aHa     2011-05-20 21:42:29 +0800 11) import java.awt.event.ActionEvent;
01a42767 (aHa     2011-05-20 21:42:29 +0800 12) import java.awt.event.ActionListener;
bf630962 (aHa     2011-05-20 22:10:04 +0800 13) import javax.swing.ImageIcon;
ac43aebc (reyoung 2011-05-21 14:09:37 +0800 14) 
01a42767 (aHa     2011-05-20 21:42:29 +0800 15) /**
01a42767 (aHa     2011-05-20 21:42:29 +0800 16)  *
01a42767 (aHa     2011-05-20 21:42:29 +0800 17)  * @author YQ
01a42767 (aHa     2011-05-20 21:42:29 +0800 18)  */
01a42767 (aHa     2011-05-20 21:42:29 +0800 19) public class TrayIconWindow {
ac43aebc (reyoung 2011-05-21 14:09:37 +0800 20) 
ac43aebc (reyoung 2011-05-21 14:09:37 +0800 21)     private TrayIconWindow() {
bf630962 (aHa     2011-05-20 22:10:04 +0800 22)         initComponents();
bf630962 (aHa     2011-05-20 22:10:04 +0800 23)     }
2bed1d39 (reyoung 2011-05-21 14:04:45 +0800 24)     static TrayIconWindow instance = null;
ac43aebc (reyoung 2011-05-21 14:09:37 +0800 25) 
ac43aebc (reyoung 2011-05-21 14:09:37 +0800 26)     static public TrayIconWindow Instance() {
ac43aebc (reyoung 2011-05-21 14:09:37 +0800 27)         if (instance == null) {
2bed1d39 (reyoung 2011-05-21 14:04:45 +0800 28)             instance = new TrayIconWindow();
2bed1d39 (reyoung 2011-05-21 14:04:45 +0800 29)         }
2bed1d39 (reyoung 2011-05-21 14:04:45 +0800 30)         return instance;
2bed1d39 (reyoung 2011-05-21 14:04:45 +0800 31)     }
2bed1d39 (reyoung 2011-05-21 14:04:45 +0800 32)     private TrayIcon m_trayIcon;
ac43aebc (reyoung 2011-05-21 14:09:37 +0800 33) 
ac43aebc (reyoung 2011-05-21 14:09:37 +0800 34)     static public void showMessage(String title, String msg) {
2bed1d39 (reyoung 2011-05-21 14:04:45 +0800 35)         Instance().m_trayIcon.displayMessage(title, msg, TrayIcon.MessageType.INFO);
2bed1d39 (reyoung 2011-05-21 14:04:45 +0800 36)     }
2bed1d39 (reyoung 2011-05-21 14:04:45 +0800 37) 
ac43aebc (reyoung 2011-05-21 14:09:37 +0800 38)     private void initComponents() {
ac43aebc (reyoung 2011-05-21 14:09:37 +0800 39)         try {
ac43aebc (reyoung 2011-05-21 14:09:37 +0800 40)             if (SystemTray.isSupported()) {// 判断当前平台是否支持系统托盘
01a42767 (aHa     2011-05-20 21:42:29 +0800 41)                 SystemTray st = SystemTray.getSystemTray();
01a42767 (aHa     2011-05-20 21:42:29 +0800 42)                 PopupMenu pm = new PopupMenu();//创建右键菜单
01a42767 (aHa     2011-05-20 21:42:29 +0800 43)                 MenuItem changeUserMenu = new MenuItem("Show Statics");
ac43aebc (reyoung 2011-05-21 14:09:37 +0800 44)                 changeUserMenu.addActionListener(new ActionListener() {
ac43aebc (reyoung 2011-05-21 14:09:37 +0800 45)                     public void actionPerformed(ActionEvent e) {
01a42767 (aHa     2011-05-20 21:42:29 +0800 46)                         onStaticsShow();
01a42767 (aHa     2011-05-20 21:42:29 +0800 47)                     }
01a42767 (aHa     2011-05-20 21:42:29 +0800 48)                 });
01a42767 (aHa     2011-05-20 21:42:29 +0800 49)                 MenuItem exitMenu = new MenuItem("Exit");
ac43aebc (reyoung 2011-05-21 14:09:37 +0800 50)                 exitMenu.addActionListener(new ActionListener() {
ac43aebc (reyoung 2011-05-21 14:09:37 +0800 51)                     public void actionPerformed(ActionEvent e) {
01a42767 (aHa     2011-05-20 21:42:29 +0800 52)                         System.exit(0);
01a42767 (aHa     2011-05-20 21:42:29 +0800 53)                     }
01a42767 (aHa     2011-05-20 21:42:29 +0800 54)                 });
01a42767 (aHa     2011-05-20 21:42:29 +0800 55)                 pm.add(changeUserMenu);
bf630962 (aHa     2011-05-20 22:10:04 +0800 56)                 pm.addSeparator();
01a42767 (aHa     2011-05-20 21:42:29 +0800 57)                 pm.add(exitMenu);
482fb472 (reyoung 2011-05-21 13:57:13 +0800 58)                 TrayIcon ti = new TrayIcon(new ImageIcon(getClass().getResource("/Presentation/tray-icon-16.png")).getImage(), "JFlowMonitor", pm);
01a42767 (aHa     2011-05-20 21:42:29 +0800 59)                 ti.setImageAutoSize(true);
01a42767 (aHa     2011-05-20 21:42:29 +0800 60)                 st.add(ti);
2bed1d39 (reyoung 2011-05-21 14:04:45 +0800 61)                 m_trayIcon = ti;
01a42767 (aHa     2011-05-20 21:42:29 +0800 62)             }
ac43aebc (reyoung 2011-05-21 14:09:37 +0800 63)         } catch (Exception e) {
01a42767 (aHa     2011-05-20 21:42:29 +0800 64)             e.printStackTrace();
01a42767 (aHa     2011-05-20 21:42:29 +0800 65)         }
01a42767 (aHa     2011-05-20 21:42:29 +0800 66)     }
ac43aebc (reyoung 2011-05-21 14:09:37 +0800 67) 
2bed1d39 (reyoung 2011-05-21 14:04:45 +0800 68)     void onStaticsShow() {
2bed1d39 (reyoung 2011-05-21 14:04:45 +0800 69)         SmallWindow.onStaticsShow();
01a42767 (aHa     2011-05-20 21:42:29 +0800 70)     }
01a42767 (aHa     2011-05-20 21:42:29 +0800 71) }
